//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/crypto/engines/RSABlindingEngine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/engines/RSABlindingEngine.h"
#include "org/bouncycastle/crypto/engines/RSACoreEngine.h"
#include "org/bouncycastle/crypto/params/ParametersWithRandom.h"
#include "org/bouncycastle/crypto/params/RSABlindingParameters.h"
#include "org/bouncycastle/crypto/params/RSAKeyParameters.h"

__attribute__((unused)) static JavaMathBigInteger *OrgBouncycastleCryptoEnginesRSABlindingEngine_blindMessageWithJavaMathBigInteger_(OrgBouncycastleCryptoEnginesRSABlindingEngine *self, JavaMathBigInteger *msg);
__attribute__((unused)) static JavaMathBigInteger *OrgBouncycastleCryptoEnginesRSABlindingEngine_unblindMessageWithJavaMathBigInteger_(OrgBouncycastleCryptoEnginesRSABlindingEngine *self, JavaMathBigInteger *blindedMsg);

@interface OrgBouncycastleCryptoEnginesRSABlindingEngine () {
 @public
  OrgBouncycastleCryptoEnginesRSACoreEngine *core_;
  OrgBouncycastleCryptoParamsRSAKeyParameters *key_;
  JavaMathBigInteger *blindingFactor_;
  jboolean forEncryption_;
}

- (JavaMathBigInteger *)blindMessageWithJavaMathBigInteger:(JavaMathBigInteger *)msg;

- (JavaMathBigInteger *)unblindMessageWithJavaMathBigInteger:(JavaMathBigInteger *)blindedMsg;
@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoEnginesRSABlindingEngine, core_, OrgBouncycastleCryptoEnginesRSACoreEngine *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoEnginesRSABlindingEngine, key_, OrgBouncycastleCryptoParamsRSAKeyParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoEnginesRSABlindingEngine, blindingFactor_, JavaMathBigInteger *)

@implementation OrgBouncycastleCryptoEnginesRSABlindingEngine

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param {
  OrgBouncycastleCryptoParamsRSABlindingParameters *p;
  if ([param isKindOfClass:[OrgBouncycastleCryptoParamsParametersWithRandom class]]) {
    OrgBouncycastleCryptoParamsParametersWithRandom *rParam = (OrgBouncycastleCryptoParamsParametersWithRandom *) check_class_cast(param, [OrgBouncycastleCryptoParamsParametersWithRandom class]);
    p = (OrgBouncycastleCryptoParamsRSABlindingParameters *) check_class_cast([((OrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getParameters], [OrgBouncycastleCryptoParamsRSABlindingParameters class]);
  }
  else {
    p = (OrgBouncycastleCryptoParamsRSABlindingParameters *) check_class_cast(param, [OrgBouncycastleCryptoParamsRSABlindingParameters class]);
  }
  [((OrgBouncycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) init__WithBoolean:forEncryption withOrgBouncycastleCryptoCipherParameters:[((OrgBouncycastleCryptoParamsRSABlindingParameters *) nil_chk(p)) getPublicKey]];
  self->forEncryption_ = forEncryption;
  self->key_ = [p getPublicKey];
  self->blindingFactor_ = [p getBlindingFactor];
}

- (jint)getInputBlockSize {
  return [((OrgBouncycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) getInputBlockSize];
}

- (jint)getOutputBlockSize {
  return [((OrgBouncycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) getOutputBlockSize];
}

- (IOSByteArray *)processBlockWithByteArray:(IOSByteArray *)inArg
                                    withInt:(jint)inOff
                                    withInt:(jint)inLen {
  JavaMathBigInteger *msg = [((OrgBouncycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) convertInputWithByteArray:inArg withInt:inOff withInt:inLen];
  if (forEncryption_) {
    msg = OrgBouncycastleCryptoEnginesRSABlindingEngine_blindMessageWithJavaMathBigInteger_(self, msg);
  }
  else {
    msg = OrgBouncycastleCryptoEnginesRSABlindingEngine_unblindMessageWithJavaMathBigInteger_(self, msg);
  }
  return [core_ convertOutputWithJavaMathBigInteger:msg];
}

- (JavaMathBigInteger *)blindMessageWithJavaMathBigInteger:(JavaMathBigInteger *)msg {
  return OrgBouncycastleCryptoEnginesRSABlindingEngine_blindMessageWithJavaMathBigInteger_(self, msg);
}

- (JavaMathBigInteger *)unblindMessageWithJavaMathBigInteger:(JavaMathBigInteger *)blindedMsg {
  return OrgBouncycastleCryptoEnginesRSABlindingEngine_unblindMessageWithJavaMathBigInteger_(self, blindedMsg);
}

- (instancetype)init {
  if (self = [super init]) {
    core_ = [[OrgBouncycastleCryptoEnginesRSACoreEngine alloc] init];
  }
  return self;
}

- (void)copyAllFieldsTo:(OrgBouncycastleCryptoEnginesRSABlindingEngine *)other {
  [super copyAllFieldsTo:other];
  other->core_ = core_;
  other->key_ = key_;
  other->blindingFactor_ = blindingFactor_;
  other->forEncryption_ = forEncryption_;
}

@end

JavaMathBigInteger *OrgBouncycastleCryptoEnginesRSABlindingEngine_blindMessageWithJavaMathBigInteger_(OrgBouncycastleCryptoEnginesRSABlindingEngine *self, JavaMathBigInteger *msg) {
  JavaMathBigInteger *blindMsg = self->blindingFactor_;
  blindMsg = [((JavaMathBigInteger *) nil_chk(msg)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(blindMsg)) modPowWithJavaMathBigInteger:[((OrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(self->key_)) getExponent] withJavaMathBigInteger:[self->key_ getModulus]]];
  blindMsg = [((JavaMathBigInteger *) nil_chk(blindMsg)) modWithJavaMathBigInteger:[self->key_ getModulus]];
  return blindMsg;
}

JavaMathBigInteger *OrgBouncycastleCryptoEnginesRSABlindingEngine_unblindMessageWithJavaMathBigInteger_(OrgBouncycastleCryptoEnginesRSABlindingEngine *self, JavaMathBigInteger *blindedMsg) {
  JavaMathBigInteger *m = [((OrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(self->key_)) getModulus];
  JavaMathBigInteger *msg = blindedMsg;
  JavaMathBigInteger *blindFactorInverse = [((JavaMathBigInteger *) nil_chk(self->blindingFactor_)) modInverseWithJavaMathBigInteger:m];
  msg = [((JavaMathBigInteger *) nil_chk(msg)) multiplyWithJavaMathBigInteger:blindFactorInverse];
  msg = [((JavaMathBigInteger *) nil_chk(msg)) modWithJavaMathBigInteger:m];
  return msg;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoEnginesRSABlindingEngine)
