//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/crypto/engines/RSABlindedEngine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/engines/RSABlindedEngine.h"
#include "org/bouncycastle/crypto/engines/RSACoreEngine.h"
#include "org/bouncycastle/crypto/params/ParametersWithRandom.h"
#include "org/bouncycastle/crypto/params/RSAKeyParameters.h"
#include "org/bouncycastle/crypto/params/RSAPrivateCrtKeyParameters.h"
#include "org/bouncycastle/util/BigIntegers.h"

@interface OrgBouncycastleCryptoEnginesRSABlindedEngine () {
 @public
  OrgBouncycastleCryptoEnginesRSACoreEngine *core_;
  OrgBouncycastleCryptoParamsRSAKeyParameters *key_;
  JavaSecuritySecureRandom *random_;
}
@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoEnginesRSABlindedEngine, core_, OrgBouncycastleCryptoEnginesRSACoreEngine *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoEnginesRSABlindedEngine, key_, OrgBouncycastleCryptoParamsRSAKeyParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoEnginesRSABlindedEngine, random_, JavaSecuritySecureRandom *)

BOOL OrgBouncycastleCryptoEnginesRSABlindedEngine_initialized = NO;

@implementation OrgBouncycastleCryptoEnginesRSABlindedEngine

JavaMathBigInteger * OrgBouncycastleCryptoEnginesRSABlindedEngine_ONE_;

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param {
  [((OrgBouncycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) init__WithBoolean:forEncryption withOrgBouncycastleCryptoCipherParameters:param];
  if ([param isKindOfClass:[OrgBouncycastleCryptoParamsParametersWithRandom class]]) {
    OrgBouncycastleCryptoParamsParametersWithRandom *rParam = (OrgBouncycastleCryptoParamsParametersWithRandom *) check_class_cast(param, [OrgBouncycastleCryptoParamsParametersWithRandom class]);
    key_ = (OrgBouncycastleCryptoParamsRSAKeyParameters *) check_class_cast([((OrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getParameters], [OrgBouncycastleCryptoParamsRSAKeyParameters class]);
    random_ = [rParam getRandom];
  }
  else {
    key_ = (OrgBouncycastleCryptoParamsRSAKeyParameters *) check_class_cast(param, [OrgBouncycastleCryptoParamsRSAKeyParameters class]);
    random_ = [[JavaSecuritySecureRandom alloc] init];
  }
}

- (jint)getInputBlockSize {
  return [((OrgBouncycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) getInputBlockSize];
}

- (jint)getOutputBlockSize {
  return [((OrgBouncycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) getOutputBlockSize];
}

- (IOSByteArray *)processBlockWithByteArray:(IOSByteArray *)inArg
                                    withInt:(jint)inOff
                                    withInt:(jint)inLen {
  if (key_ == nil) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"RSA engine not initialised"];
  }
  JavaMathBigInteger *input = [((OrgBouncycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) convertInputWithByteArray:inArg withInt:inOff withInt:inLen];
  JavaMathBigInteger *result;
  if ([key_ isKindOfClass:[OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters class]]) {
    OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *k = (OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *) check_class_cast(key_, [OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters class]);
    JavaMathBigInteger *e = [((OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *) nil_chk(k)) getPublicExponent];
    if (e != nil) {
      JavaMathBigInteger *m = [k getModulus];
      JavaMathBigInteger *r = OrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(OrgBouncycastleCryptoEnginesRSABlindedEngine_ONE_, [((JavaMathBigInteger *) nil_chk(m)) subtractWithJavaMathBigInteger:OrgBouncycastleCryptoEnginesRSABlindedEngine_ONE_], random_);
      JavaMathBigInteger *blindedInput = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(r)) modPowWithJavaMathBigInteger:e withJavaMathBigInteger:m])) multiplyWithJavaMathBigInteger:input])) modWithJavaMathBigInteger:m];
      JavaMathBigInteger *blindedResult = [core_ processBlockWithJavaMathBigInteger:blindedInput];
      JavaMathBigInteger *rInv = [r modInverseWithJavaMathBigInteger:m];
      result = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(blindedResult)) multiplyWithJavaMathBigInteger:rInv])) modWithJavaMathBigInteger:m];
    }
    else {
      result = [core_ processBlockWithJavaMathBigInteger:input];
    }
  }
  else {
    result = [core_ processBlockWithJavaMathBigInteger:input];
  }
  return [core_ convertOutputWithJavaMathBigInteger:result];
}

- (instancetype)init {
  if (self = [super init]) {
    core_ = [[OrgBouncycastleCryptoEnginesRSACoreEngine alloc] init];
  }
  return self;
}

- (void)copyAllFieldsTo:(OrgBouncycastleCryptoEnginesRSABlindedEngine *)other {
  [super copyAllFieldsTo:other];
  other->core_ = core_;
  other->key_ = key_;
  other->random_ = random_;
}

+ (void)initialize {
  if (self == [OrgBouncycastleCryptoEnginesRSABlindedEngine class]) {
    OrgBouncycastleCryptoEnginesRSABlindedEngine_ONE_ = JavaMathBigInteger_valueOfWithLong_(1);
    J2OBJC_SET_INITIALIZED(OrgBouncycastleCryptoEnginesRSABlindedEngine)
  }
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoEnginesRSABlindedEngine)
