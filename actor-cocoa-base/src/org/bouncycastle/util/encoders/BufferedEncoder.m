//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/util/encoders/BufferedEncoder.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/bouncycastle/util/encoders/BufferedEncoder.h"
#include "org/bouncycastle/util/encoders/Translator.h"

@implementation OrgBouncycastleUtilEncodersBufferedEncoder

- (instancetype)initWithOrgBouncycastleUtilEncodersTranslator:(id<OrgBouncycastleUtilEncodersTranslator>)translator
                                                      withInt:(jint)bufSize {
  if (self = [super init]) {
    self->translator_ = translator;
    if ((bufSize % [((id<OrgBouncycastleUtilEncodersTranslator>) nil_chk(translator)) getEncodedBlockSize]) != 0) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"buffer size not multiple of input block size"];
    }
    buf_ = [IOSByteArray newArrayWithLength:bufSize];
    bufOff_ = 0;
  }
  return self;
}

- (jint)processByteWithByte:(jbyte)inArg
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff {
  jint resultLen = 0;
  *IOSByteArray_GetRef(nil_chk(buf_), bufOff_++) = inArg;
  if (bufOff_ == buf_->size_) {
    resultLen = [((id<OrgBouncycastleUtilEncodersTranslator>) nil_chk(translator_)) encodeWithByteArray:buf_ withInt:0 withInt:buf_->size_ withByteArray:outArg withInt:outOff];
    bufOff_ = 0;
  }
  return resultLen;
}

- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (len < 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Can't have a negative input length!"];
  }
  jint resultLen = 0;
  jint gapLen = ((IOSByteArray *) nil_chk(buf_))->size_ - bufOff_;
  if (len > gapLen) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, gapLen);
    resultLen += [((id<OrgBouncycastleUtilEncodersTranslator>) nil_chk(translator_)) encodeWithByteArray:buf_ withInt:0 withInt:buf_->size_ withByteArray:outArg withInt:outOff];
    bufOff_ = 0;
    len -= gapLen;
    inOff += gapLen;
    outOff += resultLen;
    jint chunkSize = len - (len % buf_->size_);
    resultLen += [translator_ encodeWithByteArray:inArg withInt:inOff withInt:chunkSize withByteArray:outArg withInt:outOff];
    len -= chunkSize;
    inOff += chunkSize;
  }
  if (len != 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, len);
    bufOff_ += len;
  }
  return resultLen;
}

- (void)copyAllFieldsTo:(OrgBouncycastleUtilEncodersBufferedEncoder *)other {
  [super copyAllFieldsTo:other];
  other->buf_ = buf_;
  other->bufOff_ = bufOff_;
  other->translator_ = translator_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleUtilEncodersBufferedEncoder)
