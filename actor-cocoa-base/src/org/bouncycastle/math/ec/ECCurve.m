//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/math/ec/ECCurve.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/math/BigInteger.h"
#include "java/util/Hashtable.h"
#include "java/util/Random.h"
#include "org/bouncycastle/math/ec/ECAlgorithms.h"
#include "org/bouncycastle/math/ec/ECConstants.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/math/ec/ECMultiplier.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/GLVMultiplier.h"
#include "org/bouncycastle/math/ec/PreCompInfo.h"
#include "org/bouncycastle/math/ec/Tnaf.h"
#include "org/bouncycastle/math/ec/WNafL2RMultiplier.h"
#include "org/bouncycastle/math/ec/WTauNafMultiplier.h"
#include "org/bouncycastle/math/ec/endo/ECEndomorphism.h"
#include "org/bouncycastle/math/ec/endo/GLVEndomorphism.h"
#include "org/bouncycastle/math/field/FiniteField.h"
#include "org/bouncycastle/math/field/FiniteFields.h"
#include "org/bouncycastle/math/field/PolynomialExtensionField.h"
#include "org/bouncycastle/util/BigIntegers.h"
#include "org/bouncycastle/util/Integers.h"

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

__attribute__((unused)) static id<OrgBouncycastleMathFieldFiniteField> OrgBouncycastleMathEcECCurve_AbstractF2m_buildFieldWithInt_withInt_withInt_withInt_(jint m, jint k1, jint k2, jint k3);
__attribute__((unused)) static OrgBouncycastleMathEcECFieldElement *OrgBouncycastleMathEcECCurve_F2m_solveQuadraticEquationWithOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECCurve_F2m *self, OrgBouncycastleMathEcECFieldElement *beta);

@interface OrgBouncycastleMathEcECCurve_Config () {
 @public
  OrgBouncycastleMathEcECCurve *this$0_;
}
@end

J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve_Config, this$0_, OrgBouncycastleMathEcECCurve *)

@interface OrgBouncycastleMathEcECCurve_Fp () {
}
@end

@interface OrgBouncycastleMathEcECCurve_AbstractF2m ()

+ (id<OrgBouncycastleMathFieldFiniteField>)buildFieldWithInt:(jint)m
                                                     withInt:(jint)k1
                                                     withInt:(jint)k2
                                                     withInt:(jint)k3;
@end

@interface OrgBouncycastleMathEcECCurve_F2m () {
 @public
  jint m_;
  jint k1_;
  jint k2_;
  jint k3_;
  OrgBouncycastleMathEcECPoint_F2m *infinity_;
  jbyte mu_;
  IOSObjectArray *si_;
}

- (OrgBouncycastleMathEcECFieldElement *)solveQuadraticEquationWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)beta;
@end

J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve_F2m, infinity_, OrgBouncycastleMathEcECPoint_F2m *)
J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve_F2m, si_, IOSObjectArray *)

@implementation OrgBouncycastleMathEcECCurve_Config

- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)outer$
                                             withInt:(jint)coord
         withOrgBouncycastleMathEcEndoECEndomorphism:(id<OrgBouncycastleMathEcEndoECEndomorphism>)endomorphism
               withOrgBouncycastleMathEcECMultiplier:(id<OrgBouncycastleMathEcECMultiplier>)multiplier {
  this$0_ = outer$;
  if (self = [super init]) {
    self->coord_ = coord;
    self->endomorphism_ = endomorphism;
    self->multiplier_ = multiplier;
  }
  return self;
}

- (OrgBouncycastleMathEcECCurve_Config *)setCoordinateSystemWithInt:(jint)coord {
  self->coord_ = coord;
  return self;
}

- (OrgBouncycastleMathEcECCurve_Config *)setEndomorphismWithOrgBouncycastleMathEcEndoECEndomorphism:(id<OrgBouncycastleMathEcEndoECEndomorphism>)endomorphism {
  self->endomorphism_ = endomorphism;
  return self;
}

- (OrgBouncycastleMathEcECCurve_Config *)setMultiplierWithOrgBouncycastleMathEcECMultiplier:(id<OrgBouncycastleMathEcECMultiplier>)multiplier {
  self->multiplier_ = multiplier;
  return self;
}

- (OrgBouncycastleMathEcECCurve *)create {
  if (![this$0_ supportsCoordinateSystemWithInt:coord_]) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"unsupported coordinate system"];
  }
  OrgBouncycastleMathEcECCurve *c = [this$0_ cloneCurve];
  if (c == this$0_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"implementation returned current curve"];
  }
  ((OrgBouncycastleMathEcECCurve *) nil_chk(c))->coord_ = coord_;
  c->endomorphism_ = endomorphism_;
  c->multiplier_ = multiplier_;
  return c;
}

- (void)copyAllFieldsTo:(OrgBouncycastleMathEcECCurve_Config *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
  other->coord_ = coord_;
  other->endomorphism_ = endomorphism_;
  other->multiplier_ = multiplier_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECCurve_Config)

@implementation OrgBouncycastleMathEcECCurve

+ (IOSIntArray *)getAllCoordinateSystems {
  return OrgBouncycastleMathEcECCurve_getAllCoordinateSystems();
}

- (instancetype)initWithOrgBouncycastleMathFieldFiniteField:(id<OrgBouncycastleMathFieldFiniteField>)field {
  if (self = [super init]) {
    coord_ = OrgBouncycastleMathEcECCurve_COORD_AFFINE;
    endomorphism_ = nil;
    multiplier_ = nil;
    self->field_ = field;
  }
  return self;
}

- (OrgBouncycastleMathEcECCurve_Config *)configure {
  return [[OrgBouncycastleMathEcECCurve_Config alloc] initWithOrgBouncycastleMathEcECCurve:self withInt:self->coord_ withOrgBouncycastleMathEcEndoECEndomorphism:self->endomorphism_ withOrgBouncycastleMathEcECMultiplier:self->multiplier_];
}

- (OrgBouncycastleMathEcECPoint *)validatePointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                               withJavaMathBigInteger:(JavaMathBigInteger *)y {
  OrgBouncycastleMathEcECPoint *p = [self createPointWithJavaMathBigInteger:x withJavaMathBigInteger:y];
  if (![((OrgBouncycastleMathEcECPoint *) nil_chk(p)) isValid]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid point coordinates"];
  }
  return p;
}

- (OrgBouncycastleMathEcECPoint *)validatePointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                               withJavaMathBigInteger:(JavaMathBigInteger *)y
                                                          withBoolean:(jboolean)withCompression {
  OrgBouncycastleMathEcECPoint *p = [self createPointWithJavaMathBigInteger:x withJavaMathBigInteger:y withBoolean:withCompression];
  if (![((OrgBouncycastleMathEcECPoint *) nil_chk(p)) isValid]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid point coordinates"];
  }
  return p;
}

- (OrgBouncycastleMathEcECPoint *)createPointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                             withJavaMathBigInteger:(JavaMathBigInteger *)y {
  return [self createPointWithJavaMathBigInteger:x withJavaMathBigInteger:y withBoolean:NO];
}

- (OrgBouncycastleMathEcECPoint *)createPointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                             withJavaMathBigInteger:(JavaMathBigInteger *)y
                                                        withBoolean:(jboolean)withCompression {
  return [self createRawPointWithOrgBouncycastleMathEcECFieldElement:[self fromBigIntegerWithJavaMathBigInteger:x] withOrgBouncycastleMathEcECFieldElement:[self fromBigIntegerWithJavaMathBigInteger:y] withBoolean:withCompression];
}

- (id<OrgBouncycastleMathEcECMultiplier>)createDefaultMultiplier {
  if ([OrgBouncycastleMathEcEndoGLVEndomorphism_class_() isInstance:endomorphism_]) {
    return [[OrgBouncycastleMathEcGLVMultiplier alloc] initWithOrgBouncycastleMathEcECCurve:self withOrgBouncycastleMathEcEndoGLVEndomorphism:(id<OrgBouncycastleMathEcEndoGLVEndomorphism>) check_protocol_cast(endomorphism_, @protocol(OrgBouncycastleMathEcEndoGLVEndomorphism))];
  }
  return [[OrgBouncycastleMathEcWNafL2RMultiplier alloc] init];
}

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord {
  return coord == OrgBouncycastleMathEcECCurve_COORD_AFFINE;
}

- (id<OrgBouncycastleMathEcPreCompInfo>)getPreCompInfoWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)point
                                                                          withNSString:(NSString *)name {
  [self checkPointWithOrgBouncycastleMathEcECPoint:point];
  @synchronized(point) {
    JavaUtilHashtable *table = ((OrgBouncycastleMathEcECPoint *) nil_chk(point))->preCompTable_;
    return table == nil ? nil : (id<OrgBouncycastleMathEcPreCompInfo>) check_protocol_cast([table getWithId:name], @protocol(OrgBouncycastleMathEcPreCompInfo));
  }
}

- (void)setPreCompInfoWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)point
                                          withNSString:(NSString *)name
                  withOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)preCompInfo {
  [self checkPointWithOrgBouncycastleMathEcECPoint:point];
  @synchronized(point) {
    JavaUtilHashtable *table = ((OrgBouncycastleMathEcECPoint *) nil_chk(point))->preCompTable_;
    if (nil == table) {
      point->preCompTable_ = table = [[JavaUtilHashtable alloc] initWithInt:4];
    }
    (void) [((JavaUtilHashtable *) nil_chk(table)) putWithId:name withId:preCompInfo];
  }
}

- (OrgBouncycastleMathEcECPoint *)importPointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p {
  if (self == [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve]) {
    return p;
  }
  if ([p isInfinity]) {
    return [self getInfinity];
  }
  p = [p normalize];
  return [self validatePointWithJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getXCoord])) toBigInteger] withJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([p getYCoord])) toBigInteger] withBoolean:p->withCompression_];
}

- (void)normalizeAllWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points {
  [self checkPointsWithOrgBouncycastleMathEcECPointArray:points];
  if ([self getCoordinateSystem] == OrgBouncycastleMathEcECCurve_COORD_AFFINE) {
    return;
  }
  IOSObjectArray *zs = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(points))->size_ type:OrgBouncycastleMathEcECFieldElement_class_()];
  IOSIntArray *indices = [IOSIntArray newArrayWithLength:points->size_];
  jint count = 0;
  for (jint i = 0; i < points->size_; ++i) {
    OrgBouncycastleMathEcECPoint *p = IOSObjectArray_Get(points, i);
    if (nil != p && ![p isNormalized]) {
      IOSObjectArray_Set(zs, count, [p getZCoordWithInt:0]);
      *IOSIntArray_GetRef(indices, count++) = i;
    }
  }
  if (count == 0) {
    return;
  }
  OrgBouncycastleMathEcECAlgorithms_montgomeryTrickWithOrgBouncycastleMathEcECFieldElementArray_withInt_withInt_(zs, 0, count);
  for (jint j = 0; j < count; ++j) {
    jint index = IOSIntArray_Get(indices, j);
    IOSObjectArray_Set(points, index, [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(points, index))) normalizeWithOrgBouncycastleMathEcECFieldElement:IOSObjectArray_Get(zs, j)]);
  }
}

- (id<OrgBouncycastleMathFieldFiniteField>)getField {
  return field_;
}

- (OrgBouncycastleMathEcECFieldElement *)getA {
  return a_;
}

- (OrgBouncycastleMathEcECFieldElement *)getB {
  return b_;
}

- (JavaMathBigInteger *)getOrder {
  return order_;
}

- (JavaMathBigInteger *)getCofactor {
  return cofactor_;
}

- (jint)getCoordinateSystem {
  return coord_;
}

- (id<OrgBouncycastleMathEcEndoECEndomorphism>)getEndomorphism {
  return endomorphism_;
}

- (id<OrgBouncycastleMathEcECMultiplier>)getMultiplier {
  @synchronized(self) {
    if (self->multiplier_ == nil) {
      self->multiplier_ = [self createDefaultMultiplier];
    }
    return self->multiplier_;
  }
}

- (OrgBouncycastleMathEcECPoint *)decodePointWithByteArray:(IOSByteArray *)encoded {
  OrgBouncycastleMathEcECPoint *p = nil;
  jint expectedLength = ([self getFieldSize] + 7) / 8;
  jbyte type = IOSByteArray_Get(nil_chk(encoded), 0);
  switch (type) {
    case (jint) 0x00:
    {
      if (encoded->size_ != 1) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Incorrect length for infinity encoding"];
      }
      p = [self getInfinity];
      break;
    }
    case (jint) 0x02:
    case (jint) 0x03:
    {
      if (encoded->size_ != (expectedLength + 1)) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Incorrect length for compressed encoding"];
      }
      jint yTilde = type & 1;
      JavaMathBigInteger *X = OrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1, expectedLength);
      p = [self decompressPointWithInt:yTilde withJavaMathBigInteger:X];
      if (![((OrgBouncycastleMathEcECPoint *) nil_chk(p)) satisfiesCofactor]) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid point"];
      }
      break;
    }
    case (jint) 0x04:
    {
      if (encoded->size_ != (2 * expectedLength + 1)) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Incorrect length for uncompressed encoding"];
      }
      JavaMathBigInteger *X = OrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1, expectedLength);
      JavaMathBigInteger *Y = OrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1 + expectedLength, expectedLength);
      p = [self validatePointWithJavaMathBigInteger:X withJavaMathBigInteger:Y];
      break;
    }
    case (jint) 0x06:
    case (jint) 0x07:
    {
      if (encoded->size_ != (2 * expectedLength + 1)) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Incorrect length for hybrid encoding"];
      }
      JavaMathBigInteger *X = OrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1, expectedLength);
      JavaMathBigInteger *Y = OrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1 + expectedLength, expectedLength);
      if ([((JavaMathBigInteger *) nil_chk(Y)) testBitWithInt:0] != (type == (jint) 0x07)) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Inconsistent Y coordinate in hybrid encoding"];
      }
      p = [self validatePointWithJavaMathBigInteger:X withJavaMathBigInteger:Y];
      break;
    }
    default:
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$", @"Invalid point encoding 0x", JavaLangInteger_toStringWithInt_withInt_(type, 16))];
  }
  if (type != (jint) 0x00 && [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) isInfinity]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid infinity encoding"];
  }
  return p;
}

- (void)checkPointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)point {
  if (nil == point || (self != [point getCurve])) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"'point' must be non-null and on this curve"];
  }
}

- (void)checkPointsWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points {
  if (points == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"'points' cannot be null"];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points))->size_; ++i) {
    OrgBouncycastleMathEcECPoint *point = IOSObjectArray_Get(points, i);
    if (nil != point && self != [point getCurve]) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"'points' entries must be null or on this curve"];
    }
  }
}

- (jboolean)equalsWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)other {
  return self == other || (nil != other && [((id<OrgBouncycastleMathFieldFiniteField>) nil_chk([self getField])) isEqual:[other getField]] && [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([self getA])) toBigInteger])) isEqual:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([other getA])) toBigInteger]] && [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([self getB])) toBigInteger])) isEqual:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([other getB])) toBigInteger]]);
}

- (jboolean)isEqual:(id)obj {
  return self == obj || ([obj isKindOfClass:[OrgBouncycastleMathEcECCurve class]] && [self equalsWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *) check_class_cast(obj, [OrgBouncycastleMathEcECCurve class])]);
}

- (NSUInteger)hash {
  return ((jint) [((id<OrgBouncycastleMathFieldFiniteField>) nil_chk([self getField])) hash]) ^ OrgBouncycastleUtilIntegers_rotateLeftWithInt_withInt_(((jint) [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([self getA])) toBigInteger])) hash]), 8) ^ OrgBouncycastleUtilIntegers_rotateLeftWithInt_withInt_(((jint) [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([self getB])) toBigInteger])) hash]), 16);
}

- (void)copyAllFieldsTo:(OrgBouncycastleMathEcECCurve *)other {
  [super copyAllFieldsTo:other];
  other->field_ = field_;
  other->a_ = a_;
  other->b_ = b_;
  other->order_ = order_;
  other->cofactor_ = cofactor_;
  other->coord_ = coord_;
  other->endomorphism_ = endomorphism_;
  other->multiplier_ = multiplier_;
}

@end

IOSIntArray *OrgBouncycastleMathEcECCurve_getAllCoordinateSystems() {
  OrgBouncycastleMathEcECCurve_init();
  return [IOSIntArray newArrayWithInts:(jint[]){ OrgBouncycastleMathEcECCurve_COORD_AFFINE, OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS, OrgBouncycastleMathEcECCurve_COORD_JACOBIAN, OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY, OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED, OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE, OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE, OrgBouncycastleMathEcECCurve_COORD_SKEWED } count:8];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECCurve)

@implementation OrgBouncycastleMathEcECCurve_AbstractFp

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q {
  return [super initWithOrgBouncycastleMathFieldFiniteField:OrgBouncycastleMathFieldFiniteFields_getPrimeFieldWithJavaMathBigInteger_(q)];
}

- (OrgBouncycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                  withJavaMathBigInteger:(JavaMathBigInteger *)X1 {
  OrgBouncycastleMathEcECFieldElement *x = [self fromBigIntegerWithJavaMathBigInteger:X1];
  OrgBouncycastleMathEcECFieldElement *rhs = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(x)) square])) addWithOrgBouncycastleMathEcECFieldElement:a_])) multiplyWithOrgBouncycastleMathEcECFieldElement:x])) addWithOrgBouncycastleMathEcECFieldElement:b_];
  OrgBouncycastleMathEcECFieldElement *y = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(rhs)) sqrt];
  if (y == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid point compression"];
  }
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(y)) testBitZero] != (yTilde == 1)) {
    y = [y negate];
  }
  return [self createRawPointWithOrgBouncycastleMathEcECFieldElement:x withOrgBouncycastleMathEcECFieldElement:y withBoolean:YES];
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECCurve_AbstractFp)

@implementation OrgBouncycastleMathEcECCurve_Fp

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)a
                    withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return [self initOrgBouncycastleMathEcECCurve_FpWithJavaMathBigInteger:q withJavaMathBigInteger:a withJavaMathBigInteger:b withJavaMathBigInteger:nil withJavaMathBigInteger:nil];
}

- (instancetype)initOrgBouncycastleMathEcECCurve_FpWithJavaMathBigInteger:(JavaMathBigInteger *)q
                                                   withJavaMathBigInteger:(JavaMathBigInteger *)a
                                                   withJavaMathBigInteger:(JavaMathBigInteger *)b
                                                   withJavaMathBigInteger:(JavaMathBigInteger *)order
                                                   withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  if (self = [super initWithJavaMathBigInteger:q]) {
    self->q_ = q;
    self->r_ = OrgBouncycastleMathEcECFieldElement_Fp_calculateResidueWithJavaMathBigInteger_(q);
    self->infinity_ = [[OrgBouncycastleMathEcECPoint_Fp alloc] initWithOrgBouncycastleMathEcECCurve:self withOrgBouncycastleMathEcECFieldElement:nil withOrgBouncycastleMathEcECFieldElement:nil];
    self->a_ = [self fromBigIntegerWithJavaMathBigInteger:a];
    self->b_ = [self fromBigIntegerWithJavaMathBigInteger:b];
    self->order_ = order;
    self->cofactor_ = cofactor;
    self->coord_ = OrgBouncycastleMathEcECCurve_Fp_FP_DEFAULT_COORDS;
  }
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)a
                    withJavaMathBigInteger:(JavaMathBigInteger *)b
                    withJavaMathBigInteger:(JavaMathBigInteger *)order
                    withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  return [self initOrgBouncycastleMathEcECCurve_FpWithJavaMathBigInteger:q withJavaMathBigInteger:a withJavaMathBigInteger:b withJavaMathBigInteger:order withJavaMathBigInteger:cofactor];
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)r
   withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)a
   withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b {
  return [self initOrgBouncycastleMathEcECCurve_FpWithJavaMathBigInteger:q withJavaMathBigInteger:r withOrgBouncycastleMathEcECFieldElement:a withOrgBouncycastleMathEcECFieldElement:b withJavaMathBigInteger:nil withJavaMathBigInteger:nil];
}

- (instancetype)initOrgBouncycastleMathEcECCurve_FpWithJavaMathBigInteger:(JavaMathBigInteger *)q
                                                   withJavaMathBigInteger:(JavaMathBigInteger *)r
                                  withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)a
                                  withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                                                   withJavaMathBigInteger:(JavaMathBigInteger *)order
                                                   withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  if (self = [super initWithJavaMathBigInteger:q]) {
    self->q_ = q;
    self->r_ = r;
    self->infinity_ = [[OrgBouncycastleMathEcECPoint_Fp alloc] initWithOrgBouncycastleMathEcECCurve:self withOrgBouncycastleMathEcECFieldElement:nil withOrgBouncycastleMathEcECFieldElement:nil];
    self->a_ = a;
    self->b_ = b;
    self->order_ = order;
    self->cofactor_ = cofactor;
    self->coord_ = OrgBouncycastleMathEcECCurve_Fp_FP_DEFAULT_COORDS;
  }
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)r
   withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)a
   withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                    withJavaMathBigInteger:(JavaMathBigInteger *)order
                    withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  return [self initOrgBouncycastleMathEcECCurve_FpWithJavaMathBigInteger:q withJavaMathBigInteger:r withOrgBouncycastleMathEcECFieldElement:a withOrgBouncycastleMathEcECFieldElement:b withJavaMathBigInteger:order withJavaMathBigInteger:cofactor];
}

- (OrgBouncycastleMathEcECCurve *)cloneCurve {
  return [[OrgBouncycastleMathEcECCurve_Fp alloc] initWithJavaMathBigInteger:q_ withJavaMathBigInteger:r_ withOrgBouncycastleMathEcECFieldElement:a_ withOrgBouncycastleMathEcECFieldElement:b_ withJavaMathBigInteger:order_ withJavaMathBigInteger:cofactor_];
}

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord {
  switch (coord) {
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    return YES;
    default:
    return NO;
  }
}

- (JavaMathBigInteger *)getQ {
  return q_;
}

- (jint)getFieldSize {
  return [((JavaMathBigInteger *) nil_chk(q_)) bitLength];
}

- (OrgBouncycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return [[OrgBouncycastleMathEcECFieldElement_Fp alloc] initWithJavaMathBigInteger:self->q_ withJavaMathBigInteger:self->r_ withJavaMathBigInteger:x];
}

- (OrgBouncycastleMathEcECPoint *)createRawPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y
                                                                            withBoolean:(jboolean)withCompression {
  return [[OrgBouncycastleMathEcECPoint_Fp alloc] initWithOrgBouncycastleMathEcECCurve:self withOrgBouncycastleMathEcECFieldElement:x withOrgBouncycastleMathEcECFieldElement:y withBoolean:withCompression];
}

- (OrgBouncycastleMathEcECPoint *)createRawPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y
                                           withOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                                            withBoolean:(jboolean)withCompression {
  return [[OrgBouncycastleMathEcECPoint_Fp alloc] initWithOrgBouncycastleMathEcECCurve:self withOrgBouncycastleMathEcECFieldElement:x withOrgBouncycastleMathEcECFieldElement:y withOrgBouncycastleMathEcECFieldElementArray:zs withBoolean:withCompression];
}

- (OrgBouncycastleMathEcECPoint *)importPointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p {
  if (self != [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve] && [self getCoordinateSystem] == OrgBouncycastleMathEcECCurve_COORD_JACOBIAN && ![p isInfinity]) {
    switch ([((OrgBouncycastleMathEcECCurve *) nil_chk([p getCurve])) getCoordinateSystem]) {
      case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
      case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY:
      case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
      return [[OrgBouncycastleMathEcECPoint_Fp alloc] initWithOrgBouncycastleMathEcECCurve:self withOrgBouncycastleMathEcECFieldElement:[self fromBigIntegerWithJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(p->x_)) toBigInteger]] withOrgBouncycastleMathEcECFieldElement:[self fromBigIntegerWithJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(p->y_)) toBigInteger]] withOrgBouncycastleMathEcECFieldElementArray:[IOSObjectArray newArrayWithObjects:(id[]){ [self fromBigIntegerWithJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(nil_chk(p->zs_), 0))) toBigInteger]] } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()] withBoolean:p->withCompression_];
      default:
      break;
    }
  }
  return [super importPointWithOrgBouncycastleMathEcECPoint:p];
}

- (OrgBouncycastleMathEcECPoint *)getInfinity {
  return infinity_;
}

- (void)copyAllFieldsTo:(OrgBouncycastleMathEcECCurve_Fp *)other {
  [super copyAllFieldsTo:other];
  other->q_ = q_;
  other->r_ = r_;
  other->infinity_ = infinity_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECCurve_Fp)

@implementation OrgBouncycastleMathEcECCurve_AbstractF2m

+ (id<OrgBouncycastleMathFieldFiniteField>)buildFieldWithInt:(jint)m
                                                     withInt:(jint)k1
                                                     withInt:(jint)k2
                                                     withInt:(jint)k3 {
  return OrgBouncycastleMathEcECCurve_AbstractF2m_buildFieldWithInt_withInt_withInt_withInt_(m, k1, k2, k3);
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3 {
  return [super initWithOrgBouncycastleMathFieldFiniteField:OrgBouncycastleMathEcECCurve_AbstractF2m_buildFieldWithInt_withInt_withInt_withInt_(m, k1, k2, k3)];
}

@end

id<OrgBouncycastleMathFieldFiniteField> OrgBouncycastleMathEcECCurve_AbstractF2m_buildFieldWithInt_withInt_withInt_withInt_(jint m, jint k1, jint k2, jint k3) {
  OrgBouncycastleMathEcECCurve_AbstractF2m_init();
  if (k1 == 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"k1 must be > 0"];
  }
  if (k2 == 0) {
    if (k3 != 0) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"k3 must be 0 if k2 == 0"];
    }
    return OrgBouncycastleMathFieldFiniteFields_getBinaryExtensionFieldWithIntArray_([IOSIntArray newArrayWithInts:(jint[]){ 0, k1, m } count:3]);
  }
  if (k2 <= k1) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"k2 must be > k1"];
  }
  if (k3 <= k2) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"k3 must be > k2"];
  }
  return OrgBouncycastleMathFieldFiniteFields_getBinaryExtensionFieldWithIntArray_([IOSIntArray newArrayWithInts:(jint[]){ 0, k1, k2, k3, m } count:5]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECCurve_AbstractF2m)

@implementation OrgBouncycastleMathEcECCurve_F2m

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return [self initOrgBouncycastleMathEcECCurve_F2mWithInt:m withInt:k withInt:0 withInt:0 withJavaMathBigInteger:a withJavaMathBigInteger:b withJavaMathBigInteger:nil withJavaMathBigInteger:nil];
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  return [self initOrgBouncycastleMathEcECCurve_F2mWithInt:m withInt:k withInt:0 withInt:0 withJavaMathBigInteger:a withJavaMathBigInteger:b withJavaMathBigInteger:order withJavaMathBigInteger:cofactor];
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return [self initOrgBouncycastleMathEcECCurve_F2mWithInt:m withInt:k1 withInt:k2 withInt:k3 withJavaMathBigInteger:a withJavaMathBigInteger:b withJavaMathBigInteger:nil withJavaMathBigInteger:nil];
}

- (instancetype)initOrgBouncycastleMathEcECCurve_F2mWithInt:(jint)m
                                                    withInt:(jint)k1
                                                    withInt:(jint)k2
                                                    withInt:(jint)k3
                                     withJavaMathBigInteger:(JavaMathBigInteger *)a
                                     withJavaMathBigInteger:(JavaMathBigInteger *)b
                                     withJavaMathBigInteger:(JavaMathBigInteger *)order
                                     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  if (self = [super initWithInt:m withInt:k1 withInt:k2 withInt:k3]) {
    mu_ = 0;
    si_ = nil;
    self->m_ = m;
    self->k1_ = k1;
    self->k2_ = k2;
    self->k3_ = k3;
    self->order_ = order;
    self->cofactor_ = cofactor;
    self->infinity_ = [[OrgBouncycastleMathEcECPoint_F2m alloc] initWithOrgBouncycastleMathEcECCurve:self withOrgBouncycastleMathEcECFieldElement:nil withOrgBouncycastleMathEcECFieldElement:nil];
    self->a_ = [self fromBigIntegerWithJavaMathBigInteger:a];
    self->b_ = [self fromBigIntegerWithJavaMathBigInteger:b];
    self->coord_ = OrgBouncycastleMathEcECCurve_F2m_F2M_DEFAULT_COORDS;
  }
  return self;
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  return [self initOrgBouncycastleMathEcECCurve_F2mWithInt:m withInt:k1 withInt:k2 withInt:k3 withJavaMathBigInteger:a withJavaMathBigInteger:b withJavaMathBigInteger:order withJavaMathBigInteger:cofactor];
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)a
withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  if (self = [super initWithInt:m withInt:k1 withInt:k2 withInt:k3]) {
    mu_ = 0;
    si_ = nil;
    self->m_ = m;
    self->k1_ = k1;
    self->k2_ = k2;
    self->k3_ = k3;
    self->order_ = order;
    self->cofactor_ = cofactor;
    self->infinity_ = [[OrgBouncycastleMathEcECPoint_F2m alloc] initWithOrgBouncycastleMathEcECCurve:self withOrgBouncycastleMathEcECFieldElement:nil withOrgBouncycastleMathEcECFieldElement:nil];
    self->a_ = a;
    self->b_ = b;
    self->coord_ = OrgBouncycastleMathEcECCurve_F2m_F2M_DEFAULT_COORDS;
  }
  return self;
}

- (OrgBouncycastleMathEcECCurve *)cloneCurve {
  return [[OrgBouncycastleMathEcECCurve_F2m alloc] initWithInt:m_ withInt:k1_ withInt:k2_ withInt:k3_ withOrgBouncycastleMathEcECFieldElement:a_ withOrgBouncycastleMathEcECFieldElement:b_ withJavaMathBigInteger:order_ withJavaMathBigInteger:cofactor_];
}

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord {
  switch (coord) {
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    return YES;
    default:
    return NO;
  }
}

- (id<OrgBouncycastleMathEcECMultiplier>)createDefaultMultiplier {
  if ([self isKoblitz]) {
    return [[OrgBouncycastleMathEcWTauNafMultiplier alloc] init];
  }
  return [super createDefaultMultiplier];
}

- (jint)getFieldSize {
  return m_;
}

- (OrgBouncycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return [[OrgBouncycastleMathEcECFieldElement_F2m alloc] initWithInt:self->m_ withInt:self->k1_ withInt:self->k2_ withInt:self->k3_ withJavaMathBigInteger:x];
}

- (OrgBouncycastleMathEcECPoint *)createPointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                             withJavaMathBigInteger:(JavaMathBigInteger *)y
                                                        withBoolean:(jboolean)withCompression {
  OrgBouncycastleMathEcECFieldElement *X = [self fromBigIntegerWithJavaMathBigInteger:x], *Y = [self fromBigIntegerWithJavaMathBigInteger:y];
  switch ([self getCoordinateSystem]) {
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X)) isZero]) {
        if (![((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) square])) isEqual:[self getB]]) {
          @throw [[JavaLangIllegalArgumentException alloc] init];
        }
      }
      else {
        Y = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) divideWithOrgBouncycastleMathEcECFieldElement:X])) addWithOrgBouncycastleMathEcECFieldElement:X];
      }
      break;
    }
    default:
    {
      break;
    }
  }
  return [self createRawPointWithOrgBouncycastleMathEcECFieldElement:X withOrgBouncycastleMathEcECFieldElement:Y withBoolean:withCompression];
}

- (OrgBouncycastleMathEcECPoint *)createRawPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y
                                                                            withBoolean:(jboolean)withCompression {
  return [[OrgBouncycastleMathEcECPoint_F2m alloc] initWithOrgBouncycastleMathEcECCurve:self withOrgBouncycastleMathEcECFieldElement:x withOrgBouncycastleMathEcECFieldElement:y withBoolean:withCompression];
}

- (OrgBouncycastleMathEcECPoint *)createRawPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y
                                           withOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                                            withBoolean:(jboolean)withCompression {
  return [[OrgBouncycastleMathEcECPoint_F2m alloc] initWithOrgBouncycastleMathEcECCurve:self withOrgBouncycastleMathEcECFieldElement:x withOrgBouncycastleMathEcECFieldElement:y withOrgBouncycastleMathEcECFieldElementArray:zs withBoolean:withCompression];
}

- (OrgBouncycastleMathEcECPoint *)getInfinity {
  return infinity_;
}

- (jboolean)isKoblitz {
  return order_ != nil && cofactor_ != nil && [((OrgBouncycastleMathEcECFieldElement *) nil_chk(b_)) isOne] && ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(a_)) isZero] || [a_ isOne]);
}

- (jbyte)getMu {
  @synchronized(self) {
    if (mu_ == 0) {
      mu_ = OrgBouncycastleMathEcTnaf_getMuWithOrgBouncycastleMathEcECCurve_F2m_(self);
    }
    return mu_;
  }
}

- (IOSObjectArray *)getSi {
  @synchronized(self) {
    if (si_ == nil) {
      si_ = OrgBouncycastleMathEcTnaf_getSiWithOrgBouncycastleMathEcECCurve_F2m_(self);
    }
    return si_;
  }
}

- (OrgBouncycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                  withJavaMathBigInteger:(JavaMathBigInteger *)X1 {
  OrgBouncycastleMathEcECFieldElement *x = [self fromBigIntegerWithJavaMathBigInteger:X1], *y = nil;
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(x)) isZero]) {
    y = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(b_)) sqrt];
  }
  else {
    OrgBouncycastleMathEcECFieldElement *beta = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([x square])) invert])) multiplyWithOrgBouncycastleMathEcECFieldElement:b_])) addWithOrgBouncycastleMathEcECFieldElement:a_])) addWithOrgBouncycastleMathEcECFieldElement:x];
    OrgBouncycastleMathEcECFieldElement *z = OrgBouncycastleMathEcECCurve_F2m_solveQuadraticEquationWithOrgBouncycastleMathEcECFieldElement_(self, beta);
    if (z != nil) {
      if ([z testBitZero] != (yTilde == 1)) {
        z = [z addOne];
      }
      switch ([self getCoordinateSystem]) {
        case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
        case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
        {
          y = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(z)) addWithOrgBouncycastleMathEcECFieldElement:x];
          break;
        }
        default:
        {
          y = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(z)) multiplyWithOrgBouncycastleMathEcECFieldElement:x];
          break;
        }
      }
    }
  }
  if (y == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid point compression"];
  }
  return [self createRawPointWithOrgBouncycastleMathEcECFieldElement:x withOrgBouncycastleMathEcECFieldElement:y withBoolean:YES];
}

- (OrgBouncycastleMathEcECFieldElement *)solveQuadraticEquationWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)beta {
  return OrgBouncycastleMathEcECCurve_F2m_solveQuadraticEquationWithOrgBouncycastleMathEcECFieldElement_(self, beta);
}

- (jint)getM {
  return m_;
}

- (jboolean)isTrinomial {
  return k2_ == 0 && k3_ == 0;
}

- (jint)getK1 {
  return k1_;
}

- (jint)getK2 {
  return k2_;
}

- (jint)getK3 {
  return k3_;
}

- (JavaMathBigInteger *)getN {
  return order_;
}

- (JavaMathBigInteger *)getH {
  return cofactor_;
}

- (void)copyAllFieldsTo:(OrgBouncycastleMathEcECCurve_F2m *)other {
  [super copyAllFieldsTo:other];
  other->m_ = m_;
  other->k1_ = k1_;
  other->k2_ = k2_;
  other->k3_ = k3_;
  other->infinity_ = infinity_;
  other->mu_ = mu_;
  other->si_ = si_;
}

@end

OrgBouncycastleMathEcECFieldElement *OrgBouncycastleMathEcECCurve_F2m_solveQuadraticEquationWithOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECCurve_F2m *self, OrgBouncycastleMathEcECFieldElement *beta) {
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(beta)) isZero]) {
    return beta;
  }
  OrgBouncycastleMathEcECFieldElement *zeroElement = [self fromBigIntegerWithJavaMathBigInteger:OrgBouncycastleMathEcECConstants_get_ZERO_()];
  OrgBouncycastleMathEcECFieldElement *z = nil;
  OrgBouncycastleMathEcECFieldElement *gamma = nil;
  JavaUtilRandom *rand = [[JavaUtilRandom alloc] init];
  do {
    OrgBouncycastleMathEcECFieldElement *t = [self fromBigIntegerWithJavaMathBigInteger:[[JavaMathBigInteger alloc] initWithInt:self->m_ withJavaUtilRandom:rand]];
    z = zeroElement;
    OrgBouncycastleMathEcECFieldElement *w = beta;
    for (jint i = 1; i <= self->m_ - 1; i++) {
      OrgBouncycastleMathEcECFieldElement *w2 = [w square];
      z = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(z)) square])) addWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(w2)) multiplyWithOrgBouncycastleMathEcECFieldElement:t]];
      w = [w2 addWithOrgBouncycastleMathEcECFieldElement:beta];
    }
    if (![((OrgBouncycastleMathEcECFieldElement *) nil_chk(w)) isZero]) {
      return nil;
    }
    gamma = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(z)) square])) addWithOrgBouncycastleMathEcECFieldElement:z];
  }
  while ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(gamma)) isZero]);
  return z;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECCurve_F2m)
