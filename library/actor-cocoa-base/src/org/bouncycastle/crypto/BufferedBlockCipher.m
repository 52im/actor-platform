//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/org/bouncycastle/crypto/BufferedBlockCipher.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "org/bouncycastle/crypto/BlockCipher.h"
#include "org/bouncycastle/crypto/BufferedBlockCipher.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/DataLengthException.h"
#include "org/bouncycastle/crypto/InvalidCipherTextException.h"
#include "org/bouncycastle/crypto/OutputLengthException.h"
#include "org/bouncycastle/crypto/StreamCipher.h"

@implementation OrgBouncycastleCryptoBufferedBlockCipher

- (instancetype)init {
  return [super init];
}

- (instancetype)initWithOrgBouncycastleCryptoBlockCipher:(id<OrgBouncycastleCryptoBlockCipher>)cipher {
  if (self = [super init]) {
    self->cipher_ = cipher;
    buf_ = [IOSByteArray newArrayWithLength:[((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize]];
    bufOff_ = 0;
    NSString *name = [cipher getAlgorithmName];
    jint idx = [((NSString *) nil_chk(name)) indexOf:'/'] + 1;
    pgpCFB_ = (idx > 0 && [name hasPrefix:@"PGP" offset:idx]);
    if (pgpCFB_ || [OrgBouncycastleCryptoStreamCipher_class_() isInstance:cipher]) {
      partialBlockOkay_ = YES;
    }
    else {
      partialBlockOkay_ = (idx > 0 && ([name hasPrefix:@"OpenPGP" offset:idx]));
    }
  }
  return self;
}

- (id<OrgBouncycastleCryptoBlockCipher>)getUnderlyingCipher {
  return cipher_;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)params {
  self->forEncryption_ = forEncryption;
  [self reset];
  [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:forEncryption withOrgBouncycastleCryptoCipherParameters:params];
}

- (jint)getBlockSize {
  return [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
}

- (jint)getUpdateOutputSizeWithInt:(jint)len {
  jint total = len + bufOff_;
  jint leftOver;
  if (pgpCFB_) {
    leftOver = total % ((IOSByteArray *) nil_chk(buf_))->size_ - ([((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize] + 2);
  }
  else {
    leftOver = total % ((IOSByteArray *) nil_chk(buf_))->size_;
  }
  return total - leftOver;
}

- (jint)getOutputSizeWithInt:(jint)length {
  return length + bufOff_;
}

- (jint)processByteWithByte:(jbyte)inArg
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff {
  jint resultLen = 0;
  *IOSByteArray_GetRef(nil_chk(buf_), bufOff_++) = inArg;
  if (bufOff_ == buf_->size_) {
    resultLen = [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
    bufOff_ = 0;
  }
  return resultLen;
}

- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (len < 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Can't have a negative input length!"];
  }
  jint blockSize = [self getBlockSize];
  jint length = [self getUpdateOutputSizeWithInt:len];
  if (length > 0) {
    if ((outOff + length) > ((IOSByteArray *) nil_chk(outArg))->size_) {
      @throw [[OrgBouncycastleCryptoOutputLengthException alloc] initWithNSString:@"output buffer too short"];
    }
  }
  jint resultLen = 0;
  jint gapLen = ((IOSByteArray *) nil_chk(buf_))->size_ - bufOff_;
  if (len > gapLen) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, gapLen);
    resultLen += [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
    bufOff_ = 0;
    len -= gapLen;
    inOff += gapLen;
    while (len > buf_->size_) {
      resultLen += [cipher_ processBlockWithByteArray:inArg withInt:inOff withByteArray:outArg withInt:outOff + resultLen];
      len -= blockSize;
      inOff += blockSize;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, len);
  bufOff_ += len;
  if (bufOff_ == buf_->size_) {
    resultLen += [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff + resultLen];
    bufOff_ = 0;
  }
  return resultLen;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  @try {
    jint resultLen = 0;
    if (outOff + bufOff_ > ((IOSByteArray *) nil_chk(outArg))->size_) {
      @throw [[OrgBouncycastleCryptoOutputLengthException alloc] initWithNSString:@"output buffer too short for doFinal()"];
    }
    if (bufOff_ != 0) {
      if (!partialBlockOkay_) {
        @throw [[OrgBouncycastleCryptoDataLengthException alloc] initWithNSString:@"data not block size aligned"];
      }
      [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:buf_ withInt:0];
      resultLen = bufOff_;
      bufOff_ = 0;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, 0, outArg, outOff, resultLen);
    }
    return resultLen;
  }
  @finally {
    [self reset];
  }
}

- (void)reset {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(buf_))->size_; i++) {
    *IOSByteArray_GetRef(buf_, i) = 0;
  }
  bufOff_ = 0;
  [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) reset];
}

- (void)copyAllFieldsTo:(OrgBouncycastleCryptoBufferedBlockCipher *)other {
  [super copyAllFieldsTo:other];
  other->buf_ = buf_;
  other->bufOff_ = bufOff_;
  other->forEncryption_ = forEncryption_;
  other->cipher_ = cipher_;
  other->partialBlockOkay_ = partialBlockOkay_;
  other->pgpCFB_ = pgpCFB_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoBufferedBlockCipher)
