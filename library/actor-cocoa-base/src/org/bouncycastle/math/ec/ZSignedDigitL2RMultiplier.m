//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/org/bouncycastle/math/ec/ZSignedDigitL2RMultiplier.java
//

#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/ZSignedDigitL2RMultiplier.h"

@implementation OrgBouncycastleMathEcZSignedDigitL2RMultiplier

- (OrgBouncycastleMathEcECPoint *)multiplyPositiveWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                            withJavaMathBigInteger:(JavaMathBigInteger *)k {
  OrgBouncycastleMathEcECPoint *addP = [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) normalize], *subP = [((OrgBouncycastleMathEcECPoint *) nil_chk(addP)) negate];
  OrgBouncycastleMathEcECPoint *R0 = addP;
  jint n = [((JavaMathBigInteger *) nil_chk(k)) bitLength];
  jint s = [k getLowestSetBit];
  jint i = n;
  while (--i > s) {
    R0 = [R0 twicePlusWithOrgBouncycastleMathEcECPoint:[k testBitWithInt:i] ? addP : subP];
  }
  R0 = [((OrgBouncycastleMathEcECPoint *) nil_chk(R0)) timesPow2WithInt:s];
  return R0;
}

- (instancetype)init {
  return [super init];
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcZSignedDigitL2RMultiplier)
