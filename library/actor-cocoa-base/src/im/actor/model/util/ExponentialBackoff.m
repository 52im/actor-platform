//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/util/ExponentialBackoff.java
//

#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/actors/Environment.h"
#include "im/actor/model/util/AtomicIntegerCompat.h"
#include "im/actor/model/util/ExponentialBackoff.h"
#include "java/util/Random.h"

@interface AMExponentialBackoff () {
 @public
  AMAtomicIntegerCompat *currentFailureCount_;
  JavaUtilRandom *random_;
}
@end

J2OBJC_FIELD_SETTER(AMExponentialBackoff, currentFailureCount_, AMAtomicIntegerCompat *)
J2OBJC_FIELD_SETTER(AMExponentialBackoff, random_, JavaUtilRandom *)

@implementation AMExponentialBackoff

- (jlong)exponentialWait {
  jlong maxDelay = AMExponentialBackoff_MIN_DELAY + ((AMExponentialBackoff_MAX_DELAY - AMExponentialBackoff_MIN_DELAY) / AMExponentialBackoff_MAX_FAILURE_COUNT) * [((AMAtomicIntegerCompat *) nil_chk(currentFailureCount_)) get];
  @synchronized(random_) {
    return J2ObjCFpToLong(([((JavaUtilRandom *) nil_chk(random_)) nextFloat] * maxDelay));
  }
}

- (void)onFailure {
  jint val = [((AMAtomicIntegerCompat *) nil_chk(currentFailureCount_)) incrementAndGet];
  if (val > 50) {
    [currentFailureCount_ compareAndSetWithInt:val withInt:AMExponentialBackoff_MAX_FAILURE_COUNT];
  }
}

- (void)onSuccess {
  [self reset];
}

- (void)reset {
  [((AMAtomicIntegerCompat *) nil_chk(currentFailureCount_)) setWithInt:0];
}

- (instancetype)init {
  if (self = [super init]) {
    currentFailureCount_ = DKEnvironment_createAtomicIntWithInt_(1);
    random_ = [[JavaUtilRandom alloc] init];
  }
  return self;
}

- (void)copyAllFieldsTo:(AMExponentialBackoff *)other {
  [super copyAllFieldsTo:other];
  other->currentFailureCount_ = currentFailureCount_;
  other->random_ = random_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMExponentialBackoff)
