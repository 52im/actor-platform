//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/modules/notifications/NotificationsActor.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/Configuration.h"
#include "im/actor/model/NotificationProvider.h"
#include "im/actor/model/droidkit/actors/Actor.h"
#include "im/actor/model/droidkit/engine/SyncKeyValue.h"
#include "im/actor/model/entity/ContentDescription.h"
#include "im/actor/model/entity/Notification.h"
#include "im/actor/model/entity/Peer.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/Notifications.h"
#include "im/actor/model/modules/Settings.h"
#include "im/actor/model/modules/notifications/NotificationsActor.h"
#include "im/actor/model/modules/notifications/entity/PendingNotification.h"
#include "im/actor/model/modules/notifications/entity/PendingStorage.h"
#include "im/actor/model/modules/utils/ModuleActor.h"
#include "java/io/IOException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"

__attribute__((unused)) static id<JavaUtilList> ImActorModelModulesNotificationsNotificationsActor_getNotifications(ImActorModelModulesNotificationsNotificationsActor *self);
__attribute__((unused)) static void ImActorModelModulesNotificationsNotificationsActor_saveStorage(ImActorModelModulesNotificationsNotificationsActor *self);

@interface ImActorModelModulesNotificationsNotificationsActor () {
 @public
  DKSyncKeyValue *storage_;
  ImActorModelModulesNotificationsEntityPendingStorage *pendingStorage_;
  AMPeer *visiblePeer_;
  jboolean isAppVisible_;
  jboolean isDialogsVisible_;
}

- (id<JavaUtilList>)getNotifications;

- (void)saveStorage;
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesNotificationsNotificationsActor, storage_, DKSyncKeyValue *)
J2OBJC_FIELD_SETTER(ImActorModelModulesNotificationsNotificationsActor, pendingStorage_, ImActorModelModulesNotificationsEntityPendingStorage *)
J2OBJC_FIELD_SETTER(ImActorModelModulesNotificationsNotificationsActor, visiblePeer_, AMPeer *)

@interface ImActorModelModulesNotificationsNotificationsActor_NewMessage () {
 @public
  AMPeer *peer_;
  jint sender_;
  jlong sortDate_;
  AMContentDescription *contentDescription_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesNotificationsNotificationsActor_NewMessage, peer_, AMPeer *)
J2OBJC_FIELD_SETTER(ImActorModelModulesNotificationsNotificationsActor_NewMessage, contentDescription_, AMContentDescription *)

@interface ImActorModelModulesNotificationsNotificationsActor_MessagesRead () {
 @public
  AMPeer *peer_;
  jlong fromDate_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesNotificationsNotificationsActor_MessagesRead, peer_, AMPeer *)

@interface ImActorModelModulesNotificationsNotificationsActor_OnConversationVisible () {
 @public
  AMPeer *peer_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesNotificationsNotificationsActor_OnConversationVisible, peer_, AMPeer *)

@interface ImActorModelModulesNotificationsNotificationsActor_OnConversationHidden () {
 @public
  AMPeer *peer_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesNotificationsNotificationsActor_OnConversationHidden, peer_, AMPeer *)

@implementation ImActorModelModulesNotificationsNotificationsActor

NSString * ImActorModelModulesNotificationsNotificationsActor_PREFERENCES_STORAGE_ = @"notifications_pending";

- (instancetype)initWithImActorModelModulesModules:(ImActorModelModulesModules *)messenger {
  if (self = [super initWithImActorModelModulesModules:messenger]) {
    isAppVisible_ = NO;
    isDialogsVisible_ = NO;
    self->storage_ = [((ImActorModelModulesNotifications *) nil_chk([((ImActorModelModulesModules *) nil_chk(messenger)) getNotifications])) getNotificationsStorage];
  }
  return self;
}

- (void)preStart {
  pendingStorage_ = [[ImActorModelModulesNotificationsEntityPendingStorage alloc] init];
  IOSByteArray *storage = [((DKSyncKeyValue *) nil_chk(self->storage_)) getWithLong:0];
  if (storage != nil) {
    @try {
      pendingStorage_ = ImActorModelModulesNotificationsEntityPendingStorage_fromBytesWithByteArray_(storage);
    }
    @catch (JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
  }
}

- (id<JavaUtilList>)getNotifications {
  return ImActorModelModulesNotificationsNotificationsActor_getNotifications(self);
}

- (void)onNewMessageWithAMPeer:(AMPeer *)peer
                       withInt:(jint)sender
                      withLong:(jlong)date
      withAMContentDescription:(AMContentDescription *)description_ {
  jboolean isEnabled = [((ImActorModelModulesSettings *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getSettings])) isNotificationsEnabledWithAMPeer:peer];
  id<JavaUtilList> allPending = ImActorModelModulesNotificationsNotificationsActor_getNotifications(self);
  if (isEnabled) {
    [((id<JavaUtilList>) nil_chk(allPending)) addWithId:[[ImActorModelModulesNotificationsEntityPendingNotification alloc] initWithAMPeer:peer withInt:sender withLong:date withAMContentDescription:description_]];
    ImActorModelModulesNotificationsNotificationsActor_saveStorage(self);
  }
  if ([((AMConfiguration *) nil_chk([self config])) getNotificationProvider] != nil) {
    if (visiblePeer_ != nil && [visiblePeer_ isEqual:peer]) {
      if ([((ImActorModelModulesSettings *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getSettings])) isConversationTonesEnabled]) {
        [((id<AMNotificationProvider>) nil_chk([((AMConfiguration *) nil_chk([self config])) getNotificationProvider])) onMessageArriveInApp];
      }
      return;
    }
    if (isDialogsVisible_) {
      if ([((ImActorModelModulesSettings *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getSettings])) isConversationTonesEnabled]) {
        [((id<AMNotificationProvider>) nil_chk([((AMConfiguration *) nil_chk([self config])) getNotificationProvider])) onMessageArriveInApp];
      }
      return;
    }
    if (!isEnabled) {
      return;
    }
    id<JavaUtilList> destNotifications;
    if ([((id<JavaUtilList>) nil_chk(allPending)) size] <= ImActorModelModulesNotificationsNotificationsActor_MAX_NOTIFICATION_COUNT) {
      destNotifications = [[JavaUtilArrayList alloc] init];
      for (jint i = 0; i < [allPending size]; i++) {
        [destNotifications addWithId:[allPending getWithInt:[allPending size] - 1 - i]];
      }
    }
    else {
      destNotifications = [[JavaUtilArrayList alloc] init];
      for (jint i = 0; i < ImActorModelModulesNotificationsNotificationsActor_MAX_NOTIFICATION_COUNT; i++) {
        [destNotifications addWithId:[allPending getWithInt:[allPending size] - 1 - i]];
      }
    }
    id<JavaUtilList> res = [[JavaUtilArrayList alloc] init];
    for (ImActorModelModulesNotificationsEntityPendingNotification * __strong p in nil_chk(destNotifications)) {
      [res addWithId:[[AMNotification alloc] initWithAMPeer:[((ImActorModelModulesNotificationsEntityPendingNotification *) nil_chk(p)) getPeer] withInt:[p getSender] withAMContentDescription:[p getContent]]];
    }
    jint messagesCount = [allPending size];
    JavaUtilHashSet *peers = [[JavaUtilHashSet alloc] init];
    for (ImActorModelModulesNotificationsEntityPendingNotification * __strong p in allPending) {
      [peers addWithId:[((ImActorModelModulesNotificationsEntityPendingNotification *) nil_chk(p)) getPeer]];
    }
    jint chatsCount = [peers size];
    [((id<AMNotificationProvider>) nil_chk([((AMConfiguration *) nil_chk([self config])) getNotificationProvider])) onNotificationWithJavaUtilList:res withInt:messagesCount withInt:chatsCount];
  }
}

- (void)onMessagesReadWithAMPeer:(AMPeer *)peer
                        withLong:(jlong)fromDate {
  jboolean isChanged = NO;
  {
    IOSObjectArray *a__ = [((id<JavaUtilList>) nil_chk([((ImActorModelModulesNotificationsEntityPendingStorage *) nil_chk(pendingStorage_)) getNotifications])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:ImActorModelModulesNotificationsEntityPendingNotification_class_()]];
    ImActorModelModulesNotificationsEntityPendingNotification * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ImActorModelModulesNotificationsEntityPendingNotification * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ImActorModelModulesNotificationsEntityPendingNotification *p = *b__++;
      if ([((AMPeer *) nil_chk([((ImActorModelModulesNotificationsEntityPendingNotification *) nil_chk(p)) getPeer])) isEqual:peer] && [p getDate] <= fromDate) {
        [((id<JavaUtilList>) nil_chk([pendingStorage_ getNotifications])) removeWithId:p];
        isChanged = YES;
      }
    }
  }
  if (isChanged) {
    ImActorModelModulesNotificationsNotificationsActor_saveStorage(self);
  }
}

- (void)onConversationVisibleWithAMPeer:(AMPeer *)peer {
  self->visiblePeer_ = peer;
  if ([((AMConfiguration *) nil_chk([self config])) getNotificationProvider] != nil) {
    [((id<AMNotificationProvider>) nil_chk([((AMConfiguration *) nil_chk([self config])) getNotificationProvider])) onChatOpenWithAMPeer:peer];
  }
}

- (void)onConversationHiddenWithAMPeer:(AMPeer *)peer {
  if (visiblePeer_ != nil && [visiblePeer_ isEqual:peer]) {
    self->visiblePeer_ = nil;
  }
}

- (void)onAppVisible {
  isAppVisible_ = YES;
}

- (void)onAppHidden {
  isAppVisible_ = NO;
}

- (void)onDialogsVisible {
  isDialogsVisible_ = YES;
  if ([((AMConfiguration *) nil_chk([self config])) getNotificationProvider] != nil) {
    [((id<AMNotificationProvider>) nil_chk([((AMConfiguration *) nil_chk([self config])) getNotificationProvider])) onDialogsOpen];
  }
}

- (void)onDialogsHidden {
  isDialogsVisible_ = NO;
}

- (void)saveStorage {
  ImActorModelModulesNotificationsNotificationsActor_saveStorage(self);
}

- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[ImActorModelModulesNotificationsNotificationsActor_NewMessage class]]) {
    ImActorModelModulesNotificationsNotificationsActor_NewMessage *newMessage = (ImActorModelModulesNotificationsNotificationsActor_NewMessage *) check_class_cast(message, [ImActorModelModulesNotificationsNotificationsActor_NewMessage class]);
    [self onNewMessageWithAMPeer:[((ImActorModelModulesNotificationsNotificationsActor_NewMessage *) nil_chk(newMessage)) getPeer] withInt:[newMessage getSender] withLong:[newMessage getSortDate] withAMContentDescription:[newMessage getContentDescription]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesNotificationsNotificationsActor_MessagesRead class]]) {
    ImActorModelModulesNotificationsNotificationsActor_MessagesRead *read = (ImActorModelModulesNotificationsNotificationsActor_MessagesRead *) check_class_cast(message, [ImActorModelModulesNotificationsNotificationsActor_MessagesRead class]);
    [self onMessagesReadWithAMPeer:[((ImActorModelModulesNotificationsNotificationsActor_MessagesRead *) nil_chk(read)) getPeer] withLong:[read getFromDate]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesNotificationsNotificationsActor_OnConversationVisible class]]) {
    [self onConversationVisibleWithAMPeer:[((ImActorModelModulesNotificationsNotificationsActor_OnConversationVisible *) nil_chk(((ImActorModelModulesNotificationsNotificationsActor_OnConversationVisible *) check_class_cast(message, [ImActorModelModulesNotificationsNotificationsActor_OnConversationVisible class])))) getPeer]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesNotificationsNotificationsActor_OnConversationHidden class]]) {
    [self onConversationHiddenWithAMPeer:[((ImActorModelModulesNotificationsNotificationsActor_OnConversationHidden *) nil_chk(((ImActorModelModulesNotificationsNotificationsActor_OnConversationHidden *) check_class_cast(message, [ImActorModelModulesNotificationsNotificationsActor_OnConversationHidden class])))) getPeer]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesNotificationsNotificationsActor_OnAppHidden class]]) {
    [self onAppHidden];
  }
  else if ([message isKindOfClass:[ImActorModelModulesNotificationsNotificationsActor_OnAppVisible class]]) {
    [self onAppVisible];
  }
  else if ([message isKindOfClass:[ImActorModelModulesNotificationsNotificationsActor_OnDialogsVisible class]]) {
    [self onDialogsVisible];
  }
  else if ([message isKindOfClass:[ImActorModelModulesNotificationsNotificationsActor_OnDialogsHidden class]]) {
    [self onDialogsHidden];
  }
  else {
    [self dropWithId:message];
  }
}

- (void)copyAllFieldsTo:(ImActorModelModulesNotificationsNotificationsActor *)other {
  [super copyAllFieldsTo:other];
  other->storage_ = storage_;
  other->pendingStorage_ = pendingStorage_;
  other->visiblePeer_ = visiblePeer_;
  other->isAppVisible_ = isAppVisible_;
  other->isDialogsVisible_ = isDialogsVisible_;
}

@end

id<JavaUtilList> ImActorModelModulesNotificationsNotificationsActor_getNotifications(ImActorModelModulesNotificationsNotificationsActor *self) {
  return [((ImActorModelModulesNotificationsEntityPendingStorage *) nil_chk(self->pendingStorage_)) getNotifications];
}

void ImActorModelModulesNotificationsNotificationsActor_saveStorage(ImActorModelModulesNotificationsNotificationsActor *self) {
  [((DKSyncKeyValue *) nil_chk(self->storage_)) putWithLong:0 withByteArray:[((ImActorModelModulesNotificationsEntityPendingStorage *) nil_chk(self->pendingStorage_)) toByteArray]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesNotificationsNotificationsActor)

@implementation ImActorModelModulesNotificationsNotificationsActor_NewMessage

- (instancetype)initWithAMPeer:(AMPeer *)peer
                       withInt:(jint)sender
                      withLong:(jlong)sortDate
      withAMContentDescription:(AMContentDescription *)contentDescription {
  if (self = [super init]) {
    self->peer_ = peer;
    self->sender_ = sender;
    self->sortDate_ = sortDate;
    self->contentDescription_ = contentDescription;
  }
  return self;
}

- (AMPeer *)getPeer {
  return peer_;
}

- (jint)getSender {
  return sender_;
}

- (jlong)getSortDate {
  return sortDate_;
}

- (AMContentDescription *)getContentDescription {
  return contentDescription_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesNotificationsNotificationsActor_NewMessage *)other {
  [super copyAllFieldsTo:other];
  other->peer_ = peer_;
  other->sender_ = sender_;
  other->sortDate_ = sortDate_;
  other->contentDescription_ = contentDescription_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesNotificationsNotificationsActor_NewMessage)

@implementation ImActorModelModulesNotificationsNotificationsActor_MessagesRead

- (instancetype)initWithAMPeer:(AMPeer *)peer
                      withLong:(jlong)fromDate {
  if (self = [super init]) {
    self->peer_ = peer;
    self->fromDate_ = fromDate;
  }
  return self;
}

- (AMPeer *)getPeer {
  return peer_;
}

- (jlong)getFromDate {
  return fromDate_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesNotificationsNotificationsActor_MessagesRead *)other {
  [super copyAllFieldsTo:other];
  other->peer_ = peer_;
  other->fromDate_ = fromDate_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesNotificationsNotificationsActor_MessagesRead)

@implementation ImActorModelModulesNotificationsNotificationsActor_OnConversationVisible

- (instancetype)initWithAMPeer:(AMPeer *)peer {
  if (self = [super init]) {
    self->peer_ = peer;
  }
  return self;
}

- (AMPeer *)getPeer {
  return peer_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesNotificationsNotificationsActor_OnConversationVisible *)other {
  [super copyAllFieldsTo:other];
  other->peer_ = peer_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesNotificationsNotificationsActor_OnConversationVisible)

@implementation ImActorModelModulesNotificationsNotificationsActor_OnConversationHidden

- (instancetype)initWithAMPeer:(AMPeer *)peer {
  if (self = [super init]) {
    self->peer_ = peer;
  }
  return self;
}

- (AMPeer *)getPeer {
  return peer_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesNotificationsNotificationsActor_OnConversationHidden *)other {
  [super copyAllFieldsTo:other];
  other->peer_ = peer_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesNotificationsNotificationsActor_OnConversationHidden)

@implementation ImActorModelModulesNotificationsNotificationsActor_OnAppVisible

- (instancetype)init {
  return [super init];
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesNotificationsNotificationsActor_OnAppVisible)

@implementation ImActorModelModulesNotificationsNotificationsActor_OnAppHidden

- (instancetype)init {
  return [super init];
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesNotificationsNotificationsActor_OnAppHidden)

@implementation ImActorModelModulesNotificationsNotificationsActor_OnDialogsVisible

- (instancetype)init {
  return [super init];
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesNotificationsNotificationsActor_OnDialogsVisible)

@implementation ImActorModelModulesNotificationsNotificationsActor_OnDialogsHidden

- (instancetype)init {
  return [super init];
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesNotificationsNotificationsActor_OnDialogsHidden)
