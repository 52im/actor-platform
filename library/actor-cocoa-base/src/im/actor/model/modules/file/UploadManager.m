//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/modules/file/UploadManager.java
//

#line 1 "/Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/modules/file/UploadManager.java"

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "im/actor/model/Configuration.h"
#include "im/actor/model/droidkit/actors/Actor.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/droidkit/actors/ActorSystem.h"
#include "im/actor/model/droidkit/actors/Environment.h"
#include "im/actor/model/droidkit/actors/Props.h"
#include "im/actor/model/droidkit/actors/messages/PoisonPill.h"
#include "im/actor/model/droidkit/engine/KeyValueEngine.h"
#include "im/actor/model/entity/FileReference.h"
#include "im/actor/model/files/FileSystemReference.h"
#include "im/actor/model/log/Log.h"
#include "im/actor/model/modules/Files.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/file/UploadManager.h"
#include "im/actor/model/modules/file/UploadTask.h"
#include "im/actor/model/modules/file/entity/Downloaded.h"
#include "im/actor/model/modules/utils/ModuleActor.h"
#include "im/actor/model/modules/utils/RandomUtils.h"
#include "im/actor/model/viewmodel/UploadCallback.h"
#include "java/util/ArrayList.h"

__attribute__((unused)) static void ImActorModelModulesFileUploadManager_checkQueue(ImActorModelModulesFileUploadManager *self);
__attribute__((unused)) static ImActorModelModulesFileUploadManager_QueueItem *ImActorModelModulesFileUploadManager_findItemWithLong_(ImActorModelModulesFileUploadManager *self, jlong rid);

@interface ImActorModelModulesFileUploadManager () {
 @public
  jboolean LOG_;
  JavaUtilArrayList *queue_;
}

- (void)checkQueue;

- (ImActorModelModulesFileUploadManager_QueueItem *)findItemWithLong:(jlong)rid;
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager, queue_, JavaUtilArrayList *)

@interface ImActorModelModulesFileUploadManager_QueueItem () {
 @public
  jlong rid_;
  NSString *fileDescriptor_;
  jboolean isStopped_;
  jboolean isStarted_;
  jfloat progress_;
  DKActorRef *taskRef_;
  DKActorRef *requestActor_;
  NSString *fileName_;
  JavaUtilArrayList *callbacks_;
}
- (instancetype)initWithImActorModelModulesFileUploadManager:(ImActorModelModulesFileUploadManager *)outer$
                                                    withLong:(jlong)rid
                                                withNSString:(NSString *)fileDescriptor
                                                withNSString:(NSString *)fileName
                                              withDKActorRef:(DKActorRef *)requestActor;
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_QueueItem, fileDescriptor_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_QueueItem, taskRef_, DKActorRef *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_QueueItem, requestActor_, DKActorRef *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_QueueItem, fileName_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_QueueItem, callbacks_, JavaUtilArrayList *)

@interface ImActorModelModulesFileUploadManager_StartUpload () {
 @public
  jlong rid_;
  NSString *fileDescriptor_;
  NSString *fileName_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_StartUpload, fileDescriptor_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_StartUpload, fileName_, NSString *)

@interface ImActorModelModulesFileUploadManager_BindUpload () {
 @public
  jlong rid_;
  id<AMUploadCallback> callback_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_BindUpload, callback_, id<AMUploadCallback>)

@interface ImActorModelModulesFileUploadManager_UnbindUpload () {
 @public
  jlong rid_;
  id<AMUploadCallback> callback_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_UnbindUpload, callback_, id<AMUploadCallback>)

@interface ImActorModelModulesFileUploadManager_StopUpload () {
 @public
  jlong rid_;
}
@end

@interface ImActorModelModulesFileUploadManager_UploadTaskError () {
 @public
  jlong rid_;
}
@end

@interface ImActorModelModulesFileUploadManager_UploadTaskProgress () {
 @public
  jlong rid_;
  jfloat progress_;
}
@end

@interface ImActorModelModulesFileUploadManager_UploadTaskComplete () {
 @public
  jlong rid_;
  AMFileReference *location_;
  id<AMFileSystemReference> reference_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_UploadTaskComplete, location_, AMFileReference *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_UploadTaskComplete, reference_, id<AMFileSystemReference>)

@interface ImActorModelModulesFileUploadManager_UploadCompleted () {
 @public
  jlong rid_;
  AMFileReference *fileReference_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_UploadCompleted, fileReference_, AMFileReference *)

@interface ImActorModelModulesFileUploadManager_UploadError () {
 @public
  jlong rid_;
}
@end

@interface ImActorModelModulesFileUploadManager_RequestState () {
 @public
  jlong rid_;
  id<AMUploadCallback> callback_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_RequestState, callback_, id<AMUploadCallback>)

@interface ImActorModelModulesFileUploadManager_PauseUpload () {
 @public
  jlong rid_;
}
@end

@interface ImActorModelModulesFileUploadManager_ResumeUpload () {
 @public
  jlong rid_;
}
@end

@interface ImActorModelModulesFileUploadManager_$1 () {
 @public
  id<AMUploadCallback> val$callback_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$1, val$callback_, id<AMUploadCallback>)

@interface ImActorModelModulesFileUploadManager_$2 () {
 @public
  id<AMUploadCallback> val$callback_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$2, val$callback_, id<AMUploadCallback>)

@interface ImActorModelModulesFileUploadManager_$3 () {
 @public
  id<AMUploadCallback> val$callback_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$3, val$callback_, id<AMUploadCallback>)

@interface ImActorModelModulesFileUploadManager_$4 () {
 @public
  id<AMUploadCallback> val$callback_;
  jfloat val$progress_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$4, val$callback_, id<AMUploadCallback>)

@interface ImActorModelModulesFileUploadManager_$5 () {
 @public
  id<AMUploadCallback> val$callback_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$5, val$callback_, id<AMUploadCallback>)

@interface ImActorModelModulesFileUploadManager_$6 () {
 @public
  id<AMUploadCallback> val$callback_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$6, val$callback_, id<AMUploadCallback>)

@interface ImActorModelModulesFileUploadManager_$7 () {
 @public
  id<AMUploadCallback> val$callback_;
  jfloat val$progress_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$7, val$callback_, id<AMUploadCallback>)

@interface ImActorModelModulesFileUploadManager_$8 () {
 @public
  id<AMUploadCallback> val$callback_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$8, val$callback_, id<AMUploadCallback>)

@interface ImActorModelModulesFileUploadManager_$9 () {
 @public
  id<AMUploadCallback> val$callback_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$9, val$callback_, id<AMUploadCallback>)

@interface ImActorModelModulesFileUploadManager_$10 () {
 @public
  id<AMUploadCallback> val$callback_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$10, val$callback_, id<AMUploadCallback>)

@interface ImActorModelModulesFileUploadManager_$11 () {
 @public
  id<AMUploadCallback> val$fileCallback_;
  jfloat val$progress_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$11, val$fileCallback_, id<AMUploadCallback>)

@interface ImActorModelModulesFileUploadManager_$12 () {
 @public
  id<AMUploadCallback> val$fileCallback_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$12, val$fileCallback_, id<AMUploadCallback>)

@interface ImActorModelModulesFileUploadManager_$13 () {
 @public
  ImActorModelModulesFileUploadManager *this$0_;
  ImActorModelModulesFileUploadManager_QueueItem *val$finalPendingQueue_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$13, this$0_, ImActorModelModulesFileUploadManager *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$13, val$finalPendingQueue_, ImActorModelModulesFileUploadManager_QueueItem *)


#line 22
@implementation ImActorModelModulesFileUploadManager

NSString * ImActorModelModulesFileUploadManager_TAG_ = @"UploadManager";


#line 32
- (instancetype)initWithImActorModelModulesModules:(ImActorModelModulesModules *)messenger {
  if (self =
#line 33
  [super initWithImActorModelModulesModules:messenger]) {
    queue_ =
#line 30
    [[JavaUtilArrayList alloc] init];
    
#line 34
    self->LOG_ = [((AMConfiguration *) nil_chk([((ImActorModelModulesModules *) nil_chk(messenger)) getConfiguration])) isEnableFilesLogging];
  }
  return self;
}


#line 39
- (void)startUploadWithLong:(jlong)rid
               withNSString:(NSString *)descriptor
               withNSString:(NSString *)fileName
             withDKActorRef:(DKActorRef *)requestActor {
  
#line 40
  if (LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, JreStrcat("$J$$", @"Starting upload #", rid, @" with descriptor ", descriptor));
  }
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = [[ImActorModelModulesFileUploadManager_QueueItem alloc] initWithImActorModelModulesFileUploadManager:self withLong:rid withNSString:descriptor withNSString:fileName withDKActorRef:requestActor];
  queueItem->isStopped_ = NO;
  [((JavaUtilArrayList *) nil_chk(queue_)) addWithId:queueItem];
  ImActorModelModulesFileUploadManager_checkQueue(self);
}


#line 49
- (void)stopUploadWithLong:(jlong)rid {
  
#line 50
  if (LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, JreStrcat("$J", @"Stopping download #", rid));
  }
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    if (LOG_) {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, @"- Not present in queue");
    }
  }
  else {
    
#line 59
    if (queueItem->isStarted_) {
      if (LOG_) {
        AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, @"- Stopping actor");
      }
      [((DKActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:ImActorModelDroidkitActorsMessagesPoisonPill_get_INSTANCE_()];
      queueItem->taskRef_ = nil;
      queueItem->isStarted_ = NO;
    }
    [((JavaUtilArrayList *) nil_chk(queue_)) removeWithId:queueItem];
    for (id<AMUploadCallback> __strong callback in nil_chk(queueItem->callbacks_)) {
      DKEnvironment_dispatchCallbackWithJavaLangRunnable_([[ImActorModelModulesFileUploadManager_$1 alloc] initWithAMUploadCallback:callback]);
    }
  }
  
#line 77
  ImActorModelModulesFileUploadManager_checkQueue(self);
}


#line 80
- (void)bindUploadWithLong:(jlong)rid
      withAMUploadCallback:(id<AMUploadCallback>)callback {
  
#line 81
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    DKEnvironment_dispatchCallbackWithJavaLangRunnable_([[ImActorModelModulesFileUploadManager_$2 alloc] initWithAMUploadCallback:callback]);
  }
  else {
    
#line 90
    if (queueItem->isStopped_) {
      DKEnvironment_dispatchCallbackWithJavaLangRunnable_([[ImActorModelModulesFileUploadManager_$3 alloc] initWithAMUploadCallback:callback]);
    }
    else {
      
#line 98
      jfloat progress = queueItem->progress_;
      DKEnvironment_dispatchCallbackWithJavaLangRunnable_([[ImActorModelModulesFileUploadManager_$4 alloc] initWithAMUploadCallback:callback withFloat:progress]);
    }
    
#line 106
    [((JavaUtilArrayList *) nil_chk(queueItem->callbacks_)) addWithId:callback];
  }
}


#line 110
- (void)unbindUploadWithLong:(jlong)rid
        withAMUploadCallback:(id<AMUploadCallback>)callback {
  
#line 111
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem != nil) {
    [((JavaUtilArrayList *) nil_chk(queueItem->callbacks_)) removeWithId:callback];
  }
}


#line 117
- (void)requestStateWithLong:(jlong)rid
        withAMUploadCallback:(id<AMUploadCallback>)callback {
  
#line 118
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    DKEnvironment_dispatchCallbackWithJavaLangRunnable_([[ImActorModelModulesFileUploadManager_$5 alloc] initWithAMUploadCallback:callback]);
  }
  else {
    
#line 127
    if (queueItem->isStopped_) {
      DKEnvironment_dispatchCallbackWithJavaLangRunnable_([[ImActorModelModulesFileUploadManager_$6 alloc] initWithAMUploadCallback:callback]);
    }
    else {
      
#line 135
      jfloat progress = queueItem->progress_;
      DKEnvironment_dispatchCallbackWithJavaLangRunnable_([[ImActorModelModulesFileUploadManager_$7 alloc] initWithAMUploadCallback:callback withFloat:progress]);
    }
  }
}


#line 146
- (void)resumeUploadWithLong:(jlong)rid {
  
#line 147
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem != nil) {
    if (queueItem->isStarted_) {
      return;
    }
    if (queueItem->isStopped_) {
      queueItem->isStopped_ = NO;
    }
    queueItem->progress_ = 0;
    for (id<AMUploadCallback> __strong callback in nil_chk(queueItem->callbacks_)) {
      DKEnvironment_dispatchCallbackWithJavaLangRunnable_([[ImActorModelModulesFileUploadManager_$8 alloc] initWithAMUploadCallback:callback]);
    }
    
#line 164
    ImActorModelModulesFileUploadManager_checkQueue(self);
  }
}


#line 168
- (void)pauseUploadWithLong:(jlong)rid {
  
#line 169
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem != nil) {
    if (queueItem->isStarted_) {
      [((DKActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:ImActorModelDroidkitActorsMessagesPoisonPill_get_INSTANCE_()];
      queueItem->taskRef_ = nil;
      queueItem->isStarted_ = NO;
    }
    queueItem->isStopped_ = YES;
    for (id<AMUploadCallback> __strong callback in nil_chk(queueItem->callbacks_)) {
      DKEnvironment_dispatchCallbackWithJavaLangRunnable_([[ImActorModelModulesFileUploadManager_$9 alloc] initWithAMUploadCallback:callback]);
    }
  }
}


#line 190
- (void)onUploadTaskErrorWithLong:(jlong)rid {
  
#line 191
  if (LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, JreStrcat("$J$", @"Upload #", rid, @" error"));
  }
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    if (LOG_) {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, @"- Nothing found");
    }
    return;
  }
  
#line 202
  if (!((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
    return;
  }
  
#line 206
  [((DKActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:ImActorModelDroidkitActorsMessagesPoisonPill_get_INSTANCE_()];
  queueItem->isStopped_ = YES;
  queueItem->isStarted_ = NO;
  
#line 210
  for (id<AMUploadCallback> __strong callback in nil_chk(queueItem->callbacks_)) {
    DKEnvironment_dispatchCallbackWithJavaLangRunnable_([[ImActorModelModulesFileUploadManager_$10 alloc] initWithAMUploadCallback:callback]);
  }
  
#line 219
  [((DKActorRef *) nil_chk(queueItem->requestActor_)) sendWithId:[[ImActorModelModulesFileUploadManager_UploadError alloc] initWithLong:rid]];
  
#line 221
  ImActorModelModulesFileUploadManager_checkQueue(self);
}


#line 224
- (void)onUploadTaskProgressWithLong:(jlong)rid
                           withFloat:(jfloat)progress {
  
#line 225
  if (LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, JreStrcat("$J$F", @"Upload #", rid, @" progress ", progress));
  }
  
#line 229
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    return;
  }
  
#line 234
  if (!((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
    return;
  }
  
#line 238
  queueItem->progress_ = progress;
  
#line 240
  for (id<AMUploadCallback> __strong fileCallback in nil_chk(queueItem->callbacks_)) {
    DKEnvironment_dispatchCallbackWithJavaLangRunnable_([[ImActorModelModulesFileUploadManager_$11 alloc] initWithAMUploadCallback:fileCallback withFloat:progress]);
  }
}


#line 250
- (void)onUploadTaskCompleteWithLong:(jlong)rid
                 withAMFileReference:(AMFileReference *)fileReference
           withAMFileSystemReference:(id<AMFileSystemReference>)reference {
  
#line 251
  if (LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, JreStrcat("$J$", @"Upload #", rid, @" complete"));
  }
  
#line 255
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    return;
  }
  
#line 260
  if (!((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
    return;
  }
  
#line 264
  [((JavaUtilArrayList *) nil_chk(queue_)) removeWithId:queueItem];
  [((DKActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:ImActorModelDroidkitActorsMessagesPoisonPill_get_INSTANCE_()];
  
#line 268
  [((id<DKKeyValueEngine>) nil_chk([((ImActorModelModulesFiles *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getFilesModule])) getDownloadedEngine])) addOrUpdateItemWithDKKeyValueItem:[[ImActorModelModulesFileEntityDownloaded alloc] initWithLong:[((AMFileReference *) nil_chk(fileReference)) getFileId] withInt:
#line 269
  [fileReference getFileSize] withNSString:[((id<AMFileSystemReference>) nil_chk(reference)) getDescriptor]]];
  
#line 271
  for (id<AMUploadCallback> __strong fileCallback in nil_chk(queueItem->callbacks_)) {
    DKEnvironment_dispatchCallbackWithJavaLangRunnable_([[ImActorModelModulesFileUploadManager_$12 alloc] initWithAMUploadCallback:fileCallback]);
  }
  
#line 280
  [((DKActorRef *) nil_chk(queueItem->requestActor_)) sendWithId:[[ImActorModelModulesFileUploadManager_UploadCompleted alloc] initWithLong:rid withAMFileReference:fileReference]];
  
#line 282
  ImActorModelModulesFileUploadManager_checkQueue(self);
}


#line 285
- (void)checkQueue {
  ImActorModelModulesFileUploadManager_checkQueue(self);
}


#line 334
- (ImActorModelModulesFileUploadManager_QueueItem *)findItemWithLong:(jlong)rid {
  return ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
}


#line 365
- (void)onReceiveWithId:(id)message {
  
#line 366
  if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_StartUpload class]]) {
    ImActorModelModulesFileUploadManager_StartUpload *startUpload = (ImActorModelModulesFileUploadManager_StartUpload *) check_class_cast(message, [ImActorModelModulesFileUploadManager_StartUpload class]);
    [self startUploadWithLong:[((ImActorModelModulesFileUploadManager_StartUpload *) nil_chk(startUpload)) getRid] withNSString:[startUpload getFileDescriptor] withNSString:
#line 369
    [startUpload getFileName] withDKActorRef:[self sender]];
  }
  else
#line 370
  if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_StopUpload class]]) {
    ImActorModelModulesFileUploadManager_StopUpload *cancelUpload = (ImActorModelModulesFileUploadManager_StopUpload *) check_class_cast(message, [ImActorModelModulesFileUploadManager_StopUpload class]);
    [self stopUploadWithLong:[((ImActorModelModulesFileUploadManager_StopUpload *) nil_chk(cancelUpload)) getRid]];
  }
  else
#line 373
  if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_UploadTaskError class]]) {
    ImActorModelModulesFileUploadManager_UploadTaskError *uploadTaskError = (ImActorModelModulesFileUploadManager_UploadTaskError *) check_class_cast(message, [ImActorModelModulesFileUploadManager_UploadTaskError class]);
    [self onUploadTaskErrorWithLong:[((ImActorModelModulesFileUploadManager_UploadTaskError *) nil_chk(uploadTaskError)) getRid]];
  }
  else
#line 376
  if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_UploadTaskProgress class]]) {
    ImActorModelModulesFileUploadManager_UploadTaskProgress *taskProgress = (ImActorModelModulesFileUploadManager_UploadTaskProgress *) check_class_cast(message, [ImActorModelModulesFileUploadManager_UploadTaskProgress class]);
    [self onUploadTaskProgressWithLong:[((ImActorModelModulesFileUploadManager_UploadTaskProgress *) nil_chk(taskProgress)) getRid] withFloat:[taskProgress getProgress]];
  }
  else
#line 379
  if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_UploadTaskComplete class]]) {
    ImActorModelModulesFileUploadManager_UploadTaskComplete *taskComplete = (ImActorModelModulesFileUploadManager_UploadTaskComplete *) check_class_cast(message, [ImActorModelModulesFileUploadManager_UploadTaskComplete class]);
    [self onUploadTaskCompleteWithLong:[((ImActorModelModulesFileUploadManager_UploadTaskComplete *) nil_chk(taskComplete)) getRid] withAMFileReference:[taskComplete getLocation] withAMFileSystemReference:
#line 382
    [taskComplete getReference]];
  }
  else
#line 383
  if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_BindUpload class]]) {
    ImActorModelModulesFileUploadManager_BindUpload *bindUpload = (ImActorModelModulesFileUploadManager_BindUpload *) check_class_cast(message, [ImActorModelModulesFileUploadManager_BindUpload class]);
    [self bindUploadWithLong:[((ImActorModelModulesFileUploadManager_BindUpload *) nil_chk(bindUpload)) getRid] withAMUploadCallback:[bindUpload getCallback]];
  }
  else
#line 386
  if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_UnbindUpload class]]) {
    ImActorModelModulesFileUploadManager_UnbindUpload *unbindUpload = (ImActorModelModulesFileUploadManager_UnbindUpload *) check_class_cast(message, [ImActorModelModulesFileUploadManager_UnbindUpload class]);
    [self unbindUploadWithLong:[((ImActorModelModulesFileUploadManager_UnbindUpload *) nil_chk(unbindUpload)) getRid] withAMUploadCallback:[unbindUpload getCallback]];
  }
  else
#line 389
  if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_RequestState class]]) {
    ImActorModelModulesFileUploadManager_RequestState *requestState = (ImActorModelModulesFileUploadManager_RequestState *) check_class_cast(message, [ImActorModelModulesFileUploadManager_RequestState class]);
    [self requestStateWithLong:[((ImActorModelModulesFileUploadManager_RequestState *) nil_chk(requestState)) getRid] withAMUploadCallback:[requestState getCallback]];
  }
  else
#line 392
  if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_PauseUpload class]]) {
    ImActorModelModulesFileUploadManager_PauseUpload *pauseUpload = (ImActorModelModulesFileUploadManager_PauseUpload *) check_class_cast(message, [ImActorModelModulesFileUploadManager_PauseUpload class]);
    [self pauseUploadWithLong:[((ImActorModelModulesFileUploadManager_PauseUpload *) nil_chk(pauseUpload)) getRid]];
  }
  else
#line 395
  if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_ResumeUpload class]]) {
    ImActorModelModulesFileUploadManager_ResumeUpload *resumeUpload = (ImActorModelModulesFileUploadManager_ResumeUpload *) check_class_cast(message, [ImActorModelModulesFileUploadManager_ResumeUpload class]);
    [self resumeUploadWithLong:[((ImActorModelModulesFileUploadManager_ResumeUpload *) nil_chk(resumeUpload)) getRid]];
  }
  else {
    
#line 399
    [self dropWithId:message];
  }
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager *)other {
  [super copyAllFieldsTo:other];
  other->LOG_ = LOG_;
  other->queue_ = queue_;
}

@end

void ImActorModelModulesFileUploadManager_checkQueue(ImActorModelModulesFileUploadManager *self) {
  
#line 286
  if (self->LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, @"- Checking queue");
  }
  
#line 290
  jint activeUploads = 0;
  for (ImActorModelModulesFileUploadManager_QueueItem * __strong queueItem in nil_chk(self->queue_)) {
    if (((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
      activeUploads++;
    }
  }
  
#line 297
  if (activeUploads >= ImActorModelModulesFileUploadManager_SIM_MAX_UPLOADS) {
    if (self->LOG_) {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, @"- Already have max number of simultaneous uploads");
    }
    return;
  }
  
#line 304
  ImActorModelModulesFileUploadManager_QueueItem *pendingQueue = nil;
  for (ImActorModelModulesFileUploadManager_QueueItem * __strong queueItem in self->queue_) {
    if (!((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(queueItem))->isStarted_ && !queueItem->isStopped_) {
      pendingQueue = queueItem;
      break;
    }
  }
  if (pendingQueue == nil) {
    if (self->LOG_) {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, @"- No work for downloading");
    }
    return;
  }
  
#line 318
  if (self->LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, JreStrcat("$$", @"- Starting upload file #", ((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(pendingQueue))->fileDescriptor_));
  }
  
#line 322
  ((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(pendingQueue))->isStarted_ = YES;
  
#line 324
  ImActorModelModulesFileUploadManager_QueueItem *finalPendingQueue = pendingQueue;
  pendingQueue->taskRef_ = [((DKActorSystem *) nil_chk([self system])) actorOfWithDKProps:DKProps_createWithIOSClass_withDKActorCreator_(ImActorModelModulesFileUploadTask_class_(), [[ImActorModelModulesFileUploadManager_$13 alloc] initWithImActorModelModulesFileUploadManager:self withImActorModelModulesFileUploadManager_QueueItem:finalPendingQueue]) withNSString:JreStrcat("$J", @"actor/upload/task_", ImActorModelModulesUtilsRandomUtils_nextRid())];
}

ImActorModelModulesFileUploadManager_QueueItem *ImActorModelModulesFileUploadManager_findItemWithLong_(ImActorModelModulesFileUploadManager *self, jlong rid) {
  
#line 335
  for (ImActorModelModulesFileUploadManager_QueueItem * __strong q in nil_chk(self->queue_)) {
    if (((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(q))->rid_ == rid) {
      return q;
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager)


#line 343
@implementation ImActorModelModulesFileUploadManager_QueueItem


#line 354
- (instancetype)initWithImActorModelModulesFileUploadManager:(ImActorModelModulesFileUploadManager *)outer$
                                                    withLong:(jlong)rid
                                                withNSString:(NSString *)fileDescriptor
                                                withNSString:(NSString *)fileName
                                              withDKActorRef:(DKActorRef *)requestActor {
  if (self = [super init]) {
    callbacks_ =
#line 352
    [[JavaUtilArrayList alloc] init];
    
#line 355
    self->rid_ = rid;
    
#line 356
    self->fileDescriptor_ = fileDescriptor;
    
#line 357
    self->requestActor_ = requestActor;
    
#line 358
    self->fileName_ = fileName;
  }
  return self;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_QueueItem *)other {
  [super copyAllFieldsTo:other];
  other->rid_ = rid_;
  other->fileDescriptor_ = fileDescriptor_;
  other->isStopped_ = isStopped_;
  other->isStarted_ = isStarted_;
  other->progress_ = progress_;
  other->taskRef_ = taskRef_;
  other->requestActor_ = requestActor_;
  other->fileName_ = fileName_;
  other->callbacks_ = callbacks_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_QueueItem)


#line 403
@implementation ImActorModelModulesFileUploadManager_StartUpload


#line 408
- (instancetype)initWithLong:(jlong)rid
                withNSString:(NSString *)fileDescriptor
                withNSString:(NSString *)fileName {
  if (self = [super init]) {
    
#line 409
    self->rid_ = rid;
    
#line 410
    self->fileDescriptor_ = fileDescriptor;
    
#line 411
    self->fileName_ = fileName;
  }
  return self;
}


#line 414
- (jlong)getRid {
  
#line 415
  return rid_;
}


#line 418
- (NSString *)getFileDescriptor {
  
#line 419
  return fileDescriptor_;
}


#line 422
- (NSString *)getFileName {
  
#line 423
  return fileName_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_StartUpload *)other {
  [super copyAllFieldsTo:other];
  other->rid_ = rid_;
  other->fileDescriptor_ = fileDescriptor_;
  other->fileName_ = fileName_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_StartUpload)


#line 427
@implementation ImActorModelModulesFileUploadManager_BindUpload


#line 431
- (instancetype)initWithLong:(jlong)rid
        withAMUploadCallback:(id<AMUploadCallback>)callback {
  if (self = [super init]) {
    
#line 432
    self->rid_ = rid;
    
#line 433
    self->callback_ = callback;
  }
  return self;
}


#line 436
- (jlong)getRid {
  
#line 437
  return rid_;
}


#line 440
- (id<AMUploadCallback>)getCallback {
  
#line 441
  return callback_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_BindUpload *)other {
  [super copyAllFieldsTo:other];
  other->rid_ = rid_;
  other->callback_ = callback_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_BindUpload)


#line 445
@implementation ImActorModelModulesFileUploadManager_UnbindUpload


#line 449
- (instancetype)initWithLong:(jlong)rid
        withAMUploadCallback:(id<AMUploadCallback>)callback {
  if (self = [super init]) {
    
#line 450
    self->rid_ = rid;
    
#line 451
    self->callback_ = callback;
  }
  return self;
}


#line 454
- (jlong)getRid {
  
#line 455
  return rid_;
}


#line 458
- (id<AMUploadCallback>)getCallback {
  
#line 459
  return callback_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_UnbindUpload *)other {
  [super copyAllFieldsTo:other];
  other->rid_ = rid_;
  other->callback_ = callback_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_UnbindUpload)


#line 463
@implementation ImActorModelModulesFileUploadManager_StopUpload


#line 466
- (instancetype)initWithLong:(jlong)rid {
  if (self = [super init]) {
    
#line 467
    self->rid_ = rid;
  }
  return self;
}


#line 470
- (jlong)getRid {
  
#line 471
  return rid_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_StopUpload *)other {
  [super copyAllFieldsTo:other];
  other->rid_ = rid_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_StopUpload)


#line 475
@implementation ImActorModelModulesFileUploadManager_UploadTaskError


#line 478
- (instancetype)initWithLong:(jlong)rid {
  if (self = [super init]) {
    
#line 479
    self->rid_ = rid;
  }
  return self;
}


#line 482
- (jlong)getRid {
  
#line 483
  return rid_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_UploadTaskError *)other {
  [super copyAllFieldsTo:other];
  other->rid_ = rid_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_UploadTaskError)


#line 487
@implementation ImActorModelModulesFileUploadManager_UploadTaskProgress


#line 491
- (instancetype)initWithLong:(jlong)rid
                   withFloat:(jfloat)progress {
  if (self = [super init]) {
    
#line 492
    self->rid_ = rid;
    
#line 493
    self->progress_ = progress;
  }
  return self;
}


#line 496
- (jlong)getRid {
  
#line 497
  return rid_;
}


#line 500
- (jfloat)getProgress {
  
#line 501
  return progress_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_UploadTaskProgress *)other {
  [super copyAllFieldsTo:other];
  other->rid_ = rid_;
  other->progress_ = progress_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_UploadTaskProgress)


#line 505
@implementation ImActorModelModulesFileUploadManager_UploadTaskComplete


#line 510
- (instancetype)initWithLong:(jlong)rid
         withAMFileReference:(AMFileReference *)location
   withAMFileSystemReference:(id<AMFileSystemReference>)reference {
  if (self = [super init]) {
    
#line 511
    self->rid_ = rid;
    
#line 512
    self->location_ = location;
    
#line 513
    self->reference_ = reference;
  }
  return self;
}


#line 516
- (jlong)getRid {
  
#line 517
  return rid_;
}


#line 520
- (id<AMFileSystemReference>)getReference {
  
#line 521
  return reference_;
}


#line 524
- (AMFileReference *)getLocation {
  
#line 525
  return location_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_UploadTaskComplete *)other {
  [super copyAllFieldsTo:other];
  other->rid_ = rid_;
  other->location_ = location_;
  other->reference_ = reference_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_UploadTaskComplete)


#line 529
@implementation ImActorModelModulesFileUploadManager_UploadCompleted


#line 533
- (instancetype)initWithLong:(jlong)rid
         withAMFileReference:(AMFileReference *)fileReference {
  if (self = [super init]) {
    
#line 534
    self->rid_ = rid;
    
#line 535
    self->fileReference_ = fileReference;
  }
  return self;
}


#line 538
- (jlong)getRid {
  
#line 539
  return rid_;
}


#line 542
- (AMFileReference *)getFileReference {
  
#line 543
  return fileReference_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_UploadCompleted *)other {
  [super copyAllFieldsTo:other];
  other->rid_ = rid_;
  other->fileReference_ = fileReference_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_UploadCompleted)


#line 547
@implementation ImActorModelModulesFileUploadManager_UploadError


#line 550
- (instancetype)initWithLong:(jlong)rid {
  if (self = [super init]) {
    
#line 551
    self->rid_ = rid;
  }
  return self;
}


#line 554
- (jlong)getRid {
  
#line 555
  return rid_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_UploadError *)other {
  [super copyAllFieldsTo:other];
  other->rid_ = rid_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_UploadError)


#line 559
@implementation ImActorModelModulesFileUploadManager_RequestState


#line 563
- (instancetype)initWithLong:(jlong)rid
        withAMUploadCallback:(id<AMUploadCallback>)callback {
  if (self = [super init]) {
    
#line 564
    self->rid_ = rid;
    
#line 565
    self->callback_ = callback;
  }
  return self;
}


#line 568
- (jlong)getRid {
  
#line 569
  return rid_;
}


#line 572
- (id<AMUploadCallback>)getCallback {
  
#line 573
  return callback_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_RequestState *)other {
  [super copyAllFieldsTo:other];
  other->rid_ = rid_;
  other->callback_ = callback_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_RequestState)


#line 577
@implementation ImActorModelModulesFileUploadManager_PauseUpload


#line 580
- (instancetype)initWithLong:(jlong)rid {
  if (self = [super init]) {
    
#line 581
    self->rid_ = rid;
  }
  return self;
}


#line 584
- (jlong)getRid {
  
#line 585
  return rid_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_PauseUpload *)other {
  [super copyAllFieldsTo:other];
  other->rid_ = rid_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_PauseUpload)


#line 589
@implementation ImActorModelModulesFileUploadManager_ResumeUpload


#line 592
- (instancetype)initWithLong:(jlong)rid {
  if (self = [super init]) {
    
#line 593
    self->rid_ = rid;
  }
  return self;
}


#line 596
- (jlong)getRid {
  
#line 597
  return rid_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_ResumeUpload *)other {
  [super copyAllFieldsTo:other];
  other->rid_ = rid_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_ResumeUpload)

@implementation ImActorModelModulesFileUploadManager_$1


#line 71
- (void)run {
  
#line 72
  [((id<AMUploadCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithAMUploadCallback:(id<AMUploadCallback>)capture$0 {
  val$callback_ = capture$0;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_$1 *)other {
  [super copyAllFieldsTo:other];
  other->val$callback_ = val$callback_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$1)

@implementation ImActorModelModulesFileUploadManager_$2


#line 85
- (void)run {
  
#line 86
  [((id<AMUploadCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithAMUploadCallback:(id<AMUploadCallback>)capture$0 {
  val$callback_ = capture$0;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_$2 *)other {
  [super copyAllFieldsTo:other];
  other->val$callback_ = val$callback_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$2)

@implementation ImActorModelModulesFileUploadManager_$3


#line 93
- (void)run {
  
#line 94
  [((id<AMUploadCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithAMUploadCallback:(id<AMUploadCallback>)capture$0 {
  val$callback_ = capture$0;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_$3 *)other {
  [super copyAllFieldsTo:other];
  other->val$callback_ = val$callback_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$3)

@implementation ImActorModelModulesFileUploadManager_$4


#line 101
- (void)run {
  
#line 102
  [((id<AMUploadCallback>) nil_chk(val$callback_)) onUploadingWithFloat:val$progress_];
}

- (instancetype)initWithAMUploadCallback:(id<AMUploadCallback>)capture$0
                               withFloat:(jfloat)capture$1 {
  val$callback_ = capture$0;
  val$progress_ = capture$1;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_$4 *)other {
  [super copyAllFieldsTo:other];
  other->val$callback_ = val$callback_;
  other->val$progress_ = val$progress_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$4)

@implementation ImActorModelModulesFileUploadManager_$5


#line 122
- (void)run {
  
#line 123
  [((id<AMUploadCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithAMUploadCallback:(id<AMUploadCallback>)capture$0 {
  val$callback_ = capture$0;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_$5 *)other {
  [super copyAllFieldsTo:other];
  other->val$callback_ = val$callback_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$5)

@implementation ImActorModelModulesFileUploadManager_$6


#line 130
- (void)run {
  
#line 131
  [((id<AMUploadCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithAMUploadCallback:(id<AMUploadCallback>)capture$0 {
  val$callback_ = capture$0;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_$6 *)other {
  [super copyAllFieldsTo:other];
  other->val$callback_ = val$callback_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$6)

@implementation ImActorModelModulesFileUploadManager_$7


#line 138
- (void)run {
  
#line 139
  [((id<AMUploadCallback>) nil_chk(val$callback_)) onUploadingWithFloat:val$progress_];
}

- (instancetype)initWithAMUploadCallback:(id<AMUploadCallback>)capture$0
                               withFloat:(jfloat)capture$1 {
  val$callback_ = capture$0;
  val$progress_ = capture$1;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_$7 *)other {
  [super copyAllFieldsTo:other];
  other->val$callback_ = val$callback_;
  other->val$progress_ = val$progress_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$7)

@implementation ImActorModelModulesFileUploadManager_$8


#line 159
- (void)run {
  
#line 160
  [((id<AMUploadCallback>) nil_chk(val$callback_)) onUploadingWithFloat:0];
}

- (instancetype)initWithAMUploadCallback:(id<AMUploadCallback>)capture$0 {
  val$callback_ = capture$0;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_$8 *)other {
  [super copyAllFieldsTo:other];
  other->val$callback_ = val$callback_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$8)

@implementation ImActorModelModulesFileUploadManager_$9


#line 180
- (void)run {
  [((id<AMUploadCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithAMUploadCallback:(id<AMUploadCallback>)capture$0 {
  val$callback_ = capture$0;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_$9 *)other {
  [super copyAllFieldsTo:other];
  other->val$callback_ = val$callback_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$9)

@implementation ImActorModelModulesFileUploadManager_$10


#line 213
- (void)run {
  
#line 214
  [((id<AMUploadCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithAMUploadCallback:(id<AMUploadCallback>)capture$0 {
  val$callback_ = capture$0;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_$10 *)other {
  [super copyAllFieldsTo:other];
  other->val$callback_ = val$callback_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$10)

@implementation ImActorModelModulesFileUploadManager_$11


#line 243
- (void)run {
  
#line 244
  [((id<AMUploadCallback>) nil_chk(val$fileCallback_)) onUploadingWithFloat:val$progress_];
}

- (instancetype)initWithAMUploadCallback:(id<AMUploadCallback>)capture$0
                               withFloat:(jfloat)capture$1 {
  val$fileCallback_ = capture$0;
  val$progress_ = capture$1;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_$11 *)other {
  [super copyAllFieldsTo:other];
  other->val$fileCallback_ = val$fileCallback_;
  other->val$progress_ = val$progress_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$11)

@implementation ImActorModelModulesFileUploadManager_$12


#line 274
- (void)run {
  
#line 275
  [((id<AMUploadCallback>) nil_chk(val$fileCallback_)) onUploaded];
}

- (instancetype)initWithAMUploadCallback:(id<AMUploadCallback>)capture$0 {
  val$fileCallback_ = capture$0;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_$12 *)other {
  [super copyAllFieldsTo:other];
  other->val$fileCallback_ = val$fileCallback_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$12)

@implementation ImActorModelModulesFileUploadManager_$13


#line 327
- (ImActorModelModulesFileUploadTask *)create {
  
#line 328
  return [[ImActorModelModulesFileUploadTask alloc] initWithLong:((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(val$finalPendingQueue_))->rid_ withNSString:val$finalPendingQueue_->fileDescriptor_ withNSString:
#line 329
  val$finalPendingQueue_->fileName_ withDKActorRef:[this$0_ self__] withImActorModelModulesModules:[this$0_ modules]];
}

- (instancetype)initWithImActorModelModulesFileUploadManager:(ImActorModelModulesFileUploadManager *)outer$
          withImActorModelModulesFileUploadManager_QueueItem:(ImActorModelModulesFileUploadManager_QueueItem *)capture$0 {
  this$0_ = outer$;
  val$finalPendingQueue_ = capture$0;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadManager_$13 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
  other->val$finalPendingQueue_ = val$finalPendingQueue_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$13)
