//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/modules/messages/SenderActor.java
//

#line 1 "/Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/modules/messages/SenderActor.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/Configuration.h"
#include "im/actor/model/FileSystemProvider.h"
#include "im/actor/model/api/DocumentEx.h"
#include "im/actor/model/api/DocumentExPhoto.h"
#include "im/actor/model/api/DocumentExVideo.h"
#include "im/actor/model/api/DocumentMessage.h"
#include "im/actor/model/api/FastThumb.h"
#include "im/actor/model/api/Message.h"
#include "im/actor/model/api/OutPeer.h"
#include "im/actor/model/api/Peer.h"
#include "im/actor/model/api/TextMessage.h"
#include "im/actor/model/api/base/SeqUpdate.h"
#include "im/actor/model/api/rpc/RequestSendMessage.h"
#include "im/actor/model/api/rpc/ResponseSeqDate.h"
#include "im/actor/model/api/updates/UpdateMessageSent.h"
#include "im/actor/model/droidkit/actors/Actor.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/droidkit/actors/Environment.h"
#include "im/actor/model/droidkit/engine/PreferencesStorage.h"
#include "im/actor/model/entity/FileReference.h"
#include "im/actor/model/entity/Message.h"
#include "im/actor/model/entity/MessageState.h"
#include "im/actor/model/entity/Peer.h"
#include "im/actor/model/entity/content/AbsContent.h"
#include "im/actor/model/entity/content/DocumentContent.h"
#include "im/actor/model/entity/content/FastThumb.h"
#include "im/actor/model/entity/content/FileLocalSource.h"
#include "im/actor/model/entity/content/FileRemoteSource.h"
#include "im/actor/model/entity/content/FileSource.h"
#include "im/actor/model/entity/content/PhotoContent.h"
#include "im/actor/model/entity/content/TextContent.h"
#include "im/actor/model/entity/content/VideoContent.h"
#include "im/actor/model/modules/Files.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/Updates.h"
#include "im/actor/model/modules/file/UploadManager.h"
#include "im/actor/model/modules/messages/ConversationActor.h"
#include "im/actor/model/modules/messages/SenderActor.h"
#include "im/actor/model/modules/messages/entity/PendingMessage.h"
#include "im/actor/model/modules/messages/entity/PendingMessagesStorage.h"
#include "im/actor/model/modules/utils/ModuleActor.h"
#include "im/actor/model/modules/utils/RandomUtils.h"
#include "im/actor/model/network/RpcException.h"
#include "java/io/IOException.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_performUploadFileWithLong_withNSString_withNSString_(ImActorModelModulesMessagesSenderActor *self, jlong rid, NSString *descriptor, NSString *fileName);
__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_onFileUploadedWithLong_withAMFileReference_(ImActorModelModulesMessagesSenderActor *self, jlong rid, AMFileReference *fileReference);
__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_onFileUploadErrorWithLong_(ImActorModelModulesMessagesSenderActor *self, jlong rid);
__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_performSendContentWithAMPeer_withLong_withAMAbsContent_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid, AMAbsContent *content);
__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_onSentWithAMPeer_withLong_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid);
__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_onErrorWithAMPeer_withLong_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid);
__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_savePending(ImActorModelModulesMessagesSenderActor *self);
__attribute__((unused)) static ImActorModelModulesMessagesEntityPendingMessage *ImActorModelModulesMessagesSenderActor_findPendingWithLong_(ImActorModelModulesMessagesSenderActor *self, jlong rid);

@interface ImActorModelModulesMessagesSenderActor () {
 @public
  ImActorModelModulesMessagesEntityPendingMessagesStorage *pendingMessages_;
}

- (void)performUploadFileWithLong:(jlong)rid
                     withNSString:(NSString *)descriptor
                     withNSString:(NSString *)fileName;

- (void)onFileUploadedWithLong:(jlong)rid
           withAMFileReference:(AMFileReference *)fileReference;

- (void)onFileUploadErrorWithLong:(jlong)rid;

- (void)performSendContentWithAMPeer:(AMPeer *)peer
                            withLong:(jlong)rid
                    withAMAbsContent:(AMAbsContent *)content;

- (void)onSentWithAMPeer:(AMPeer *)peer
                withLong:(jlong)rid;

- (void)onErrorWithAMPeer:(AMPeer *)peer
                 withLong:(jlong)rid;

- (void)savePending;

- (ImActorModelModulesMessagesEntityPendingMessage *)findPendingWithLong:(jlong)rid;
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor, pendingMessages_, ImActorModelModulesMessagesEntityPendingMessagesStorage *)

@interface ImActorModelModulesMessagesSenderActor_SendDocument () {
 @public
  AMPeer *peer_;
  AMFastThumb *fastThumb_;
  NSString *descriptor_;
  NSString *fileName_;
  NSString *mimeType_;
  jint fileSize_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendDocument, peer_, AMPeer *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendDocument, fastThumb_, AMFastThumb *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendDocument, descriptor_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendDocument, fileName_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendDocument, mimeType_, NSString *)

@interface ImActorModelModulesMessagesSenderActor_SendPhoto () {
 @public
  AMPeer *peer_;
  AMFastThumb *fastThumb_;
  NSString *descriptor_;
  NSString *fileName_;
  jint fileSize_;
  jint w_;
  jint h_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendPhoto, peer_, AMPeer *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendPhoto, fastThumb_, AMFastThumb *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendPhoto, descriptor_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendPhoto, fileName_, NSString *)

@interface ImActorModelModulesMessagesSenderActor_SendVideo () {
 @public
  AMPeer *peer_;
  NSString *fileName_;
  jint w_;
  jint h_;
  jint duration_;
  AMFastThumb *fastThumb_;
  NSString *descriptor_;
  jint fileSize_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendVideo, peer_, AMPeer *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendVideo, fileName_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendVideo, fastThumb_, AMFastThumb *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendVideo, descriptor_, NSString *)

@interface ImActorModelModulesMessagesSenderActor_SendText () {
 @public
  AMPeer *peer_;
  NSString *text_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendText, peer_, AMPeer *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendText, text_, NSString *)

@interface ImActorModelModulesMessagesSenderActor_MessageSent () {
 @public
  AMPeer *peer_;
  jlong rid_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_MessageSent, peer_, AMPeer *)

@interface ImActorModelModulesMessagesSenderActor_MessageError () {
 @public
  AMPeer *peer_;
  jlong rid_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_MessageError, peer_, AMPeer *)

@interface ImActorModelModulesMessagesSenderActor_$1 () {
 @public
  ImActorModelModulesMessagesSenderActor *this$0_;
  AMPeer *val$peer_;
  jlong val$rid_;
  ImActorModelApiPeer *val$apiPeer_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_$1, this$0_, ImActorModelModulesMessagesSenderActor *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_$1, val$peer_, AMPeer *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_$1, val$apiPeer_, ImActorModelApiPeer *)


#line 42
@implementation ImActorModelModulesMessagesSenderActor

NSString * ImActorModelModulesMessagesSenderActor_PREFERENCES_ = @"sender_pending";


#line 48
- (instancetype)initWithImActorModelModulesModules:(ImActorModelModulesModules *)messenger {
  return
#line 49
  [super initWithImActorModelModulesModules:messenger];
}


#line 53
- (void)preStart {
  pendingMessages_ = [[ImActorModelModulesMessagesEntityPendingMessagesStorage alloc] init];
  IOSByteArray *p = [((id<DKPreferencesStorage>) nil_chk([self preferences])) getBytes:ImActorModelModulesMessagesSenderActor_PREFERENCES_];
  if (p != nil) {
    @try {
      pendingMessages_ = ImActorModelModulesMessagesEntityPendingMessagesStorage_fromBytesWithByteArray_(p);
    }
    @catch (
#line 59
    JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
  }
  
#line 64
  jboolean isChanged = NO;
  {
    IOSObjectArray *a__ =
#line 65
    [((JavaUtilArrayList *) nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:ImActorModelModulesMessagesEntityPendingMessage_class_()]];
    ImActorModelModulesMessagesEntityPendingMessage * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ImActorModelModulesMessagesEntityPendingMessage * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ImActorModelModulesMessagesEntityPendingMessage *pending = *b__++;
      
#line 66
      if ([[((ImActorModelModulesMessagesEntityPendingMessage *) nil_chk(pending)) getContent] isKindOfClass:[AMTextContent class]]) {
        ImActorModelModulesMessagesSenderActor_performSendContentWithAMPeer_withLong_withAMAbsContent_(self, [pending getPeer], [pending getRid], [pending getContent]);
      }
      else
#line 68
      if ([[pending getContent] isKindOfClass:[AMDocumentContent class]]) {
        AMDocumentContent *documentContent = (AMDocumentContent *) check_class_cast([pending getContent], [AMDocumentContent class]);
        if ([[((AMDocumentContent *) nil_chk(documentContent)) getSource] isKindOfClass:[AMFileLocalSource class]]) {
          if ([((AMConfiguration *) nil_chk([self config])) getFileSystemProvider] != nil &&
#line 72
          [((id<AMFileSystemProvider>) nil_chk([((AMConfiguration *) nil_chk([self config])) getFileSystemProvider])) isFsPersistent]) {
            ImActorModelModulesMessagesSenderActor_performUploadFileWithLong_withNSString_withNSString_(self, [pending getRid],
#line 74
            [((AMFileLocalSource *) nil_chk(((AMFileLocalSource *) check_class_cast([documentContent getSource], [AMFileLocalSource class])))) getFileDescriptor],
#line 75
            [((AMFileLocalSource *) nil_chk(((AMFileLocalSource *) check_class_cast([documentContent getSource], [AMFileLocalSource class])))) getFileName]);
          }
          else {
            
#line 77
            id<JavaUtilList> rids = [[JavaUtilArrayList alloc] init];
            [rids addWithId:JavaLangLong_valueOfWithLong_([pending getRid])];
            [((DKActorRef *) nil_chk([self getConversationActorWithAMPeer:[pending getPeer]])) sendWithId:[[ImActorModelModulesMessagesConversationActor_MessagesDeleted alloc] initWithJavaUtilList:rids]];
            [((JavaUtilArrayList *) nil_chk([pendingMessages_ getPendingMessages])) removeWithId:pending];
            isChanged = YES;
          }
        }
        else {
          
#line 84
          ImActorModelModulesMessagesSenderActor_performSendContentWithAMPeer_withLong_withAMAbsContent_(self, [pending getPeer], [pending getRid],
#line 85
          [pending getContent]);
        }
      }
    }
  }
  if (isChanged) {
    ImActorModelModulesMessagesSenderActor_savePending(self);
  }
}


#line 97
- (void)doSendTextWithAMPeer:(AMPeer *)peer
                withNSString:(NSString *)text {
  
#line 98
  jlong rid = ImActorModelModulesUtilsRandomUtils_nextRid();
  jlong date = DKEnvironment_getCurrentTime();
  
#line 101
  AMMessage *message = [[AMMessage alloc] initWithLong:rid withLong:date withLong:date withInt:[self myUid] withAMMessageStateEnum:AMMessageStateEnum_get_PENDING() withAMAbsContent:[[AMTextContent alloc] initWithNSString:text]];
  [((DKActorRef *) nil_chk([self getConversationActorWithAMPeer:peer])) sendWithId:message];
  
#line 104
  [((JavaUtilArrayList *) nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages])) addWithId:[[ImActorModelModulesMessagesEntityPendingMessage alloc] initWithAMPeer:peer withLong:rid withAMAbsContent:[[AMTextContent alloc] initWithNSString:text]]];
  
#line 106
  ImActorModelModulesMessagesSenderActor_performSendContentWithAMPeer_withLong_withAMAbsContent_(self, peer, rid, [[AMTextContent alloc] initWithNSString:text]);
}


#line 111
- (void)doSendDocumentWithAMPeer:(AMPeer *)peer
                    withNSString:(NSString *)fileName
                    withNSString:(NSString *)mimeType
                         withInt:(jint)fileSize
                 withAMFastThumb:(AMFastThumb *)fastThumb
                    withNSString:(NSString *)descriptor {
  
#line 113
  jlong rid = ImActorModelModulesUtilsRandomUtils_nextRid();
  jlong date = DKEnvironment_getCurrentTime();
  AMDocumentContent *documentContent = [[AMDocumentContent alloc] initWithAMFileSource:
#line 116
  [[AMFileLocalSource alloc] initWithNSString:fileName withInt:fileSize withNSString:descriptor] withNSString:
#line 117
  mimeType withNSString:fileName withAMFastThumb:fastThumb];
  AMMessage *message = [[AMMessage alloc] initWithLong:rid withLong:date withLong:date withInt:[self myUid] withAMMessageStateEnum:AMMessageStateEnum_get_PENDING() withAMAbsContent:documentContent];
  [((DKActorRef *) nil_chk([self getConversationActorWithAMPeer:peer])) sendWithId:message];
  
#line 121
  [((JavaUtilArrayList *) nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages])) addWithId:[[ImActorModelModulesMessagesEntityPendingMessage alloc] initWithAMPeer:peer withLong:rid withAMAbsContent:documentContent]];
  ImActorModelModulesMessagesSenderActor_savePending(self);
  
#line 124
  ImActorModelModulesMessagesSenderActor_performUploadFileWithLong_withNSString_withNSString_(self, rid, descriptor, fileName);
}


#line 127
- (void)doSendPhotoWithAMPeer:(AMPeer *)peer
              withAMFastThumb:(AMFastThumb *)fastThumb
                 withNSString:(NSString *)descriptor
                 withNSString:(NSString *)fileName
                      withInt:(jint)fileSize
                      withInt:(jint)w
                      withInt:(jint)h {
  
#line 129
  jlong rid = ImActorModelModulesUtilsRandomUtils_nextRid();
  jlong date = DKEnvironment_getCurrentTime();
  AMPhotoContent *photoContent = [[AMPhotoContent alloc] initWithAMFileSource:
#line 132
  [[AMFileLocalSource alloc] initWithNSString:fileName withInt:fileSize withNSString:descriptor] withNSString:@"image/jpeg" withNSString:fileName withAMFastThumb:
#line 133
  fastThumb withInt:w withInt:h];
  
#line 135
  AMMessage *message = [[AMMessage alloc] initWithLong:rid withLong:date withLong:date withInt:[self myUid] withAMMessageStateEnum:AMMessageStateEnum_get_PENDING() withAMAbsContent:photoContent];
  [((DKActorRef *) nil_chk([self getConversationActorWithAMPeer:peer])) sendWithId:message];
  
#line 138
  [((JavaUtilArrayList *) nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages])) addWithId:[[ImActorModelModulesMessagesEntityPendingMessage alloc] initWithAMPeer:peer withLong:rid withAMAbsContent:photoContent]];
  ImActorModelModulesMessagesSenderActor_savePending(self);
  
#line 141
  ImActorModelModulesMessagesSenderActor_performUploadFileWithLong_withNSString_withNSString_(self, rid, descriptor, fileName);
}


#line 144
- (void)doSendVideoWithAMPeer:(AMPeer *)peer
                 withNSString:(NSString *)fileName
                      withInt:(jint)w
                      withInt:(jint)h
                      withInt:(jint)duration
              withAMFastThumb:(AMFastThumb *)fastThumb
                 withNSString:(NSString *)descriptor
                      withInt:(jint)fileSize {
  
#line 146
  jlong rid = ImActorModelModulesUtilsRandomUtils_nextRid();
  jlong date = DKEnvironment_getCurrentTime();
  AMVideoContent *videoContent = [[AMVideoContent alloc] initWithAMFileSource:
#line 149
  [[AMFileLocalSource alloc] initWithNSString:fileName withInt:fileSize withNSString:descriptor] withNSString:@"video/mp4" withNSString:fileName withAMFastThumb:
#line 150
  fastThumb withInt:duration withInt:w withInt:h];
  
#line 152
  AMMessage *message = [[AMMessage alloc] initWithLong:rid withLong:date withLong:date withInt:[self myUid] withAMMessageStateEnum:AMMessageStateEnum_get_PENDING() withAMAbsContent:videoContent];
  [((DKActorRef *) nil_chk([self getConversationActorWithAMPeer:peer])) sendWithId:message];
  
#line 155
  [((JavaUtilArrayList *) nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages])) addWithId:[[ImActorModelModulesMessagesEntityPendingMessage alloc] initWithAMPeer:peer withLong:rid withAMAbsContent:videoContent]];
  ImActorModelModulesMessagesSenderActor_savePending(self);
  
#line 158
  ImActorModelModulesMessagesSenderActor_performUploadFileWithLong_withNSString_withNSString_(self, rid, descriptor, fileName);
}


#line 161
- (void)performUploadFileWithLong:(jlong)rid
                     withNSString:(NSString *)descriptor
                     withNSString:(NSString *)fileName {
  ImActorModelModulesMessagesSenderActor_performUploadFileWithLong_withNSString_withNSString_(self, rid, descriptor, fileName);
}


#line 165
- (void)onFileUploadedWithLong:(jlong)rid
           withAMFileReference:(AMFileReference *)fileReference {
  ImActorModelModulesMessagesSenderActor_onFileUploadedWithLong_withAMFileReference_(self, rid, fileReference);
}


#line 198
- (void)onFileUploadErrorWithLong:(jlong)rid {
  ImActorModelModulesMessagesSenderActor_onFileUploadErrorWithLong_(self, rid);
}


#line 209
- (void)performSendContentWithAMPeer:(AMPeer *)peer
                            withLong:(jlong)rid
                    withAMAbsContent:(AMAbsContent *)content {
  ImActorModelModulesMessagesSenderActor_performSendContentWithAMPeer_withLong_withAMAbsContent_(self, peer, rid, content);
}


#line 271
- (void)onSentWithAMPeer:(AMPeer *)peer
                withLong:(jlong)rid {
  ImActorModelModulesMessagesSenderActor_onSentWithAMPeer_withLong_(self, peer, rid);
}


#line 281
- (void)onErrorWithAMPeer:(AMPeer *)peer
                 withLong:(jlong)rid {
  ImActorModelModulesMessagesSenderActor_onErrorWithAMPeer_withLong_(self, peer, rid);
}


#line 292
- (void)savePending {
  ImActorModelModulesMessagesSenderActor_savePending(self);
}

- (ImActorModelModulesMessagesEntityPendingMessage *)findPendingWithLong:(jlong)rid {
  return ImActorModelModulesMessagesSenderActor_findPendingWithLong_(self, rid);
}


#line 308
- (void)onReceiveWithId:(id)message {
  
#line 309
  if ([message isKindOfClass:[ImActorModelModulesMessagesSenderActor_SendText class]]) {
    ImActorModelModulesMessagesSenderActor_SendText *sendText = (ImActorModelModulesMessagesSenderActor_SendText *) check_class_cast(message, [ImActorModelModulesMessagesSenderActor_SendText class]);
    [self doSendTextWithAMPeer:[((ImActorModelModulesMessagesSenderActor_SendText *) nil_chk(sendText)) getPeer] withNSString:[sendText getText]];
  }
  else
#line 312
  if ([message isKindOfClass:[ImActorModelModulesMessagesSenderActor_MessageSent class]]) {
    ImActorModelModulesMessagesSenderActor_MessageSent *messageSent = (ImActorModelModulesMessagesSenderActor_MessageSent *) check_class_cast(message, [ImActorModelModulesMessagesSenderActor_MessageSent class]);
    ImActorModelModulesMessagesSenderActor_onSentWithAMPeer_withLong_(self, [((ImActorModelModulesMessagesSenderActor_MessageSent *) nil_chk(messageSent)) getPeer], [messageSent getRid]);
  }
  else
#line 315
  if ([message isKindOfClass:[ImActorModelModulesMessagesSenderActor_MessageError class]]) {
    ImActorModelModulesMessagesSenderActor_MessageError *messageError = (ImActorModelModulesMessagesSenderActor_MessageError *) check_class_cast(message, [ImActorModelModulesMessagesSenderActor_MessageError class]);
    ImActorModelModulesMessagesSenderActor_onErrorWithAMPeer_withLong_(self, [((ImActorModelModulesMessagesSenderActor_MessageError *) nil_chk(messageError)) getPeer], [messageError getRid]);
  }
  else
#line 318
  if ([message isKindOfClass:[ImActorModelModulesMessagesSenderActor_SendDocument class]]) {
    ImActorModelModulesMessagesSenderActor_SendDocument *sendDocument = (ImActorModelModulesMessagesSenderActor_SendDocument *) check_class_cast(message, [ImActorModelModulesMessagesSenderActor_SendDocument class]);
    [self doSendDocumentWithAMPeer:[((ImActorModelModulesMessagesSenderActor_SendDocument *) nil_chk(sendDocument)) getPeer] withNSString:[sendDocument getFileName] withNSString:[sendDocument getMimeType] withInt:
#line 321
    [sendDocument getFileSize] withAMFastThumb:[sendDocument getFastThumb] withNSString:[sendDocument getDescriptor]];
  }
  else
#line 322
  if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_UploadCompleted class]]) {
    ImActorModelModulesFileUploadManager_UploadCompleted *uploadCompleted = (ImActorModelModulesFileUploadManager_UploadCompleted *) check_class_cast(message, [ImActorModelModulesFileUploadManager_UploadCompleted class]);
    ImActorModelModulesMessagesSenderActor_onFileUploadedWithLong_withAMFileReference_(self, [((ImActorModelModulesFileUploadManager_UploadCompleted *) nil_chk(uploadCompleted)) getRid], [uploadCompleted getFileReference]);
  }
  else
#line 325
  if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_UploadError class]]) {
    ImActorModelModulesFileUploadManager_UploadError *uploadError = (ImActorModelModulesFileUploadManager_UploadError *) check_class_cast(message, [ImActorModelModulesFileUploadManager_UploadError class]);
    ImActorModelModulesMessagesSenderActor_onFileUploadErrorWithLong_(self, [((ImActorModelModulesFileUploadManager_UploadError *) nil_chk(uploadError)) getRid]);
  }
  else
#line 328
  if ([message isKindOfClass:[ImActorModelModulesMessagesSenderActor_SendPhoto class]]) {
    ImActorModelModulesMessagesSenderActor_SendPhoto *sendPhoto = (ImActorModelModulesMessagesSenderActor_SendPhoto *) check_class_cast(message, [ImActorModelModulesMessagesSenderActor_SendPhoto class]);
    [self doSendPhotoWithAMPeer:[((ImActorModelModulesMessagesSenderActor_SendPhoto *) nil_chk(sendPhoto)) getPeer] withAMFastThumb:[sendPhoto getFastThumb] withNSString:
#line 331
    [sendPhoto getDescriptor] withNSString:[sendPhoto getFileName] withInt:[sendPhoto getFileSize] withInt:
#line 332
    [sendPhoto getW] withInt:[sendPhoto getH]];
  }
  else
#line 333
  if ([message isKindOfClass:[ImActorModelModulesMessagesSenderActor_SendVideo class]]) {
    ImActorModelModulesMessagesSenderActor_SendVideo *sendVideo = (ImActorModelModulesMessagesSenderActor_SendVideo *) check_class_cast(message, [ImActorModelModulesMessagesSenderActor_SendVideo class]);
    [self doSendVideoWithAMPeer:[((ImActorModelModulesMessagesSenderActor_SendVideo *) nil_chk(sendVideo)) getPeer] withNSString:[sendVideo getFileName] withInt:
#line 336
    [sendVideo getW] withInt:[sendVideo getH] withInt:[sendVideo getDuration] withAMFastThumb:
#line 337
    [sendVideo getFastThumb] withNSString:[sendVideo getDescriptor] withInt:[sendVideo getFileSize]];
  }
  else {
    
#line 339
    [self dropWithId:message];
  }
}

- (void)copyAllFieldsTo:(ImActorModelModulesMessagesSenderActor *)other {
  [super copyAllFieldsTo:other];
  other->pendingMessages_ = pendingMessages_;
}

@end

void ImActorModelModulesMessagesSenderActor_performUploadFileWithLong_withNSString_withNSString_(ImActorModelModulesMessagesSenderActor *self, jlong rid, NSString *descriptor, NSString *fileName) {
  
#line 162
  [((ImActorModelModulesFiles *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getFilesModule])) requestUploadWithLong:rid withNSString:descriptor withNSString:fileName withDKActorRef:[self self__]];
}

void ImActorModelModulesMessagesSenderActor_onFileUploadedWithLong_withAMFileReference_(ImActorModelModulesMessagesSenderActor *self, jlong rid, AMFileReference *fileReference) {
  
#line 166
  ImActorModelModulesMessagesEntityPendingMessage *msg = ImActorModelModulesMessagesSenderActor_findPendingWithLong_(self, rid);
  if (msg == nil) {
    return;
  }
  
#line 171
  [((JavaUtilArrayList *) nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(self->pendingMessages_)) getPendingMessages])) removeWithId:msg];
  
#line 173
  AMAbsContent *nContent;
  if ([[((ImActorModelModulesMessagesEntityPendingMessage *) nil_chk(msg)) getContent] isKindOfClass:[AMPhotoContent class]]) {
    AMPhotoContent *basePhotoContent = (AMPhotoContent *) check_class_cast([msg getContent], [AMPhotoContent class]);
    nContent = [[AMPhotoContent alloc] initWithAMFileSource:[[AMFileRemoteSource alloc] initWithAMFileReference:fileReference] withNSString:[((AMPhotoContent *) nil_chk(basePhotoContent)) getMimetype] withNSString:
#line 177
    [basePhotoContent getName] withAMFastThumb:[basePhotoContent getFastThumb] withInt:[basePhotoContent getW] withInt:
#line 178
    [basePhotoContent getH]];
  }
  else
#line 179
  if ([[msg getContent] isKindOfClass:[AMVideoContent class]]) {
    AMVideoContent *baseVideoContent = (AMVideoContent *) check_class_cast([msg getContent], [AMVideoContent class]);
    nContent = [[AMVideoContent alloc] initWithAMFileSource:[[AMFileRemoteSource alloc] initWithAMFileReference:fileReference] withNSString:[((AMVideoContent *) nil_chk(baseVideoContent)) getMimetype] withNSString:
#line 182
    [baseVideoContent getName] withAMFastThumb:[baseVideoContent getFastThumb] withInt:[baseVideoContent getDuration] withInt:
#line 183
    [baseVideoContent getW] withInt:[baseVideoContent getH]];
  }
  else
#line 184
  if ([[msg getContent] isKindOfClass:[AMDocumentContent class]]) {
    AMDocumentContent *baseDocContent = (AMDocumentContent *) check_class_cast([msg getContent], [AMDocumentContent class]);
    nContent = [[AMDocumentContent alloc] initWithAMFileSource:[[AMFileRemoteSource alloc] initWithAMFileReference:fileReference] withNSString:[((AMDocumentContent *) nil_chk(baseDocContent)) getMimetype] withNSString:
#line 187
    [baseDocContent getName] withAMFastThumb:[baseDocContent getFastThumb]];
  }
  else {
    
#line 189
    return;
  }
  
#line 192
  [((JavaUtilArrayList *) nil_chk([self->pendingMessages_ getPendingMessages])) addWithId:[[ImActorModelModulesMessagesEntityPendingMessage alloc] initWithAMPeer:[msg getPeer] withLong:[msg getRid] withAMAbsContent:nContent]];
  [((DKActorRef *) nil_chk([self getConversationActorWithAMPeer:[msg getPeer]])) sendWithId:[[ImActorModelModulesMessagesConversationActor_MessageContentUpdated alloc] initWithLong:[msg getRid] withAMAbsContent:nContent]];
  
#line 195
  ImActorModelModulesMessagesSenderActor_performSendContentWithAMPeer_withLong_withAMAbsContent_(self, [msg getPeer], rid, nContent);
}

void ImActorModelModulesMessagesSenderActor_onFileUploadErrorWithLong_(ImActorModelModulesMessagesSenderActor *self, jlong rid) {
  
#line 199
  ImActorModelModulesMessagesEntityPendingMessage *msg = ImActorModelModulesMessagesSenderActor_findPendingWithLong_(self, rid);
  if (msg == nil) {
    return;
  }
  
#line 204
  [((DKActorRef *) nil_chk([self self__])) sendWithId:[[ImActorModelModulesMessagesSenderActor_MessageError alloc] initWithAMPeer:[((ImActorModelModulesMessagesEntityPendingMessage *) nil_chk(msg)) getPeer] withLong:[msg getRid]]];
}

void ImActorModelModulesMessagesSenderActor_performSendContentWithAMPeer_withLong_withAMAbsContent_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid, AMAbsContent *content) {
  
#line 210
  ImActorModelApiOutPeer *outPeer = [self buidOutPeerWithAMPeer:peer];
  ImActorModelApiPeer *apiPeer = [self buildApiPeerWithAMPeer:peer];
  if (outPeer == nil || apiPeer == nil) {
    return;
  }
  
#line 216
  ImActorModelApiMessage *message;
  if ([content isKindOfClass:[AMTextContent class]]) {
    message = [[ImActorModelApiTextMessage alloc] initWithNSString:[((AMTextContent *) nil_chk(((AMTextContent *) check_class_cast(content, [AMTextContent class])))) getText] withImActorModelApiTextMessageEx:nil];
  }
  else
#line 219
  if ([content isKindOfClass:[AMDocumentContent class]]) {
    AMDocumentContent *documentContent = (AMDocumentContent *) check_class_cast(content, [AMDocumentContent class]);
    
#line 222
    AMFileRemoteSource *source = (AMFileRemoteSource *) check_class_cast([((AMDocumentContent *) nil_chk(documentContent)) getSource], [AMFileRemoteSource class]);
    
#line 224
    ImActorModelApiDocumentEx *documentEx = nil;
    
#line 226
    if ([content isKindOfClass:[AMPhotoContent class]]) {
      AMPhotoContent *photoContent = (AMPhotoContent *) check_class_cast(content, [AMPhotoContent class]);
      documentEx = [[ImActorModelApiDocumentExPhoto alloc] initWithInt:[((AMPhotoContent *) nil_chk(photoContent)) getW] withInt:[photoContent getH]];
    }
    else
#line 229
    if ([content isKindOfClass:[AMVideoContent class]]) {
      AMVideoContent *videoContent = (AMVideoContent *) check_class_cast(content, [AMVideoContent class]);
      documentEx = [[ImActorModelApiDocumentExVideo alloc] initWithInt:[((AMVideoContent *) nil_chk(videoContent)) getW] withInt:[videoContent getH] withInt:[videoContent getDuration]];
    }
    
#line 234
    ImActorModelApiFastThumb *fastThumb = nil;
    if ([documentContent getFastThumb] != nil) {
      fastThumb = [[ImActorModelApiFastThumb alloc] initWithInt:
#line 237
      [((AMFastThumb *) nil_chk([documentContent getFastThumb])) getW] withInt:
#line 238
      [((AMFastThumb *) nil_chk([documentContent getFastThumb])) getH] withByteArray:
#line 239
      [((AMFastThumb *) nil_chk([documentContent getFastThumb])) getImage]];
    }
    
#line 242
    message = [[ImActorModelApiDocumentMessage alloc] initWithLong:[((AMFileReference *) nil_chk([((AMFileRemoteSource *) nil_chk(source)) getFileReference])) getFileId] withLong:
#line 243
    [((AMFileReference *) nil_chk([source getFileReference])) getAccessHash] withInt:
#line 244
    [((AMFileReference *) nil_chk([source getFileReference])) getFileSize] withImActorModelApiEncryptionTypeEnum:
#line 245
    nil withByteArray:nil withJavaLangInteger:nil withNSString:
#line 246
    [((AMFileReference *) nil_chk([source getFileReference])) getFileName] withNSString:
#line 247
    [documentContent getMimetype] withImActorModelApiFastThumb:
#line 248
    fastThumb withImActorModelApiDocumentEx:documentEx];
  }
  else {
    
#line 250
    return;
  }
  
#line 253
  [self requestWithImActorModelNetworkParserRequest:[[ImActorModelApiRpcRequestSendMessage alloc] initWithImActorModelApiOutPeer:outPeer withLong:rid withImActorModelApiMessage:message] withAMRpcCallback:
#line 254
  [[ImActorModelModulesMessagesSenderActor_$1 alloc] initWithImActorModelModulesMessagesSenderActor:self withAMPeer:peer withLong:rid withImActorModelApiPeer:apiPeer]];
}

void ImActorModelModulesMessagesSenderActor_onSentWithAMPeer_withLong_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid) {
  
#line 272
  for (ImActorModelModulesMessagesEntityPendingMessage * __strong pending in nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(self->pendingMessages_)) getPendingMessages])) {
    if ([((ImActorModelModulesMessagesEntityPendingMessage *) nil_chk(pending)) getRid] == rid && [((AMPeer *) nil_chk([pending getPeer])) isEqual:peer]) {
      [((JavaUtilArrayList *) nil_chk([self->pendingMessages_ getPendingMessages])) removeWithId:pending];
      break;
    }
  }
  ImActorModelModulesMessagesSenderActor_savePending(self);
}

void ImActorModelModulesMessagesSenderActor_onErrorWithAMPeer_withLong_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid) {
  
#line 282
  for (ImActorModelModulesMessagesEntityPendingMessage * __strong pending in nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(self->pendingMessages_)) getPendingMessages])) {
    if ([((ImActorModelModulesMessagesEntityPendingMessage *) nil_chk(pending)) getRid] == rid && [((AMPeer *) nil_chk([pending getPeer])) isEqual:peer]) {
      [((JavaUtilArrayList *) nil_chk([self->pendingMessages_ getPendingMessages])) removeWithId:pending];
      break;
    }
  }
  ImActorModelModulesMessagesSenderActor_savePending(self);
  [((DKActorRef *) nil_chk([self getConversationActorWithAMPeer:peer])) sendWithId:[[ImActorModelModulesMessagesConversationActor_MessageError alloc] initWithLong:rid]];
}

void ImActorModelModulesMessagesSenderActor_savePending(ImActorModelModulesMessagesSenderActor *self) {
  
#line 293
  [((id<DKPreferencesStorage>) nil_chk([self preferences])) putBytes:ImActorModelModulesMessagesSenderActor_PREFERENCES_ withValue:[((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(self->pendingMessages_)) toByteArray]];
}

ImActorModelModulesMessagesEntityPendingMessage *ImActorModelModulesMessagesSenderActor_findPendingWithLong_(ImActorModelModulesMessagesSenderActor *self, jlong rid) {
  
#line 297
  for (ImActorModelModulesMessagesEntityPendingMessage * __strong message in nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(self->pendingMessages_)) getPendingMessages])) {
    if ([((ImActorModelModulesMessagesEntityPendingMessage *) nil_chk(message)) getRid] == rid) {
      return message;
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor)


#line 343
@implementation ImActorModelModulesMessagesSenderActor_SendDocument


#line 351
- (instancetype)initWithAMPeer:(AMPeer *)peer
                  withNSString:(NSString *)fileName
                  withNSString:(NSString *)mimeType
                       withInt:(jint)fileSize
                  withNSString:(NSString *)descriptor
               withAMFastThumb:(AMFastThumb *)fastThumb {
  if (self = [super init]) {
    
#line 353
    self->peer_ = peer;
    
#line 354
    self->fastThumb_ = fastThumb;
    
#line 355
    self->descriptor_ = descriptor;
    
#line 356
    self->fileName_ = fileName;
    
#line 357
    self->mimeType_ = mimeType;
    
#line 358
    self->fileSize_ = fileSize;
  }
  return self;
}


#line 361
- (AMFastThumb *)getFastThumb {
  
#line 362
  return fastThumb_;
}


#line 365
- (jint)getFileSize {
  
#line 366
  return fileSize_;
}


#line 369
- (NSString *)getFileName {
  
#line 370
  return fileName_;
}


#line 373
- (NSString *)getMimeType {
  
#line 374
  return mimeType_;
}


#line 377
- (AMPeer *)getPeer {
  
#line 378
  return peer_;
}


#line 381
- (NSString *)getDescriptor {
  
#line 382
  return descriptor_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesMessagesSenderActor_SendDocument *)other {
  [super copyAllFieldsTo:other];
  other->peer_ = peer_;
  other->fastThumb_ = fastThumb_;
  other->descriptor_ = descriptor_;
  other->fileName_ = fileName_;
  other->mimeType_ = mimeType_;
  other->fileSize_ = fileSize_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_SendDocument)


#line 386
@implementation ImActorModelModulesMessagesSenderActor_SendPhoto


#line 395
- (instancetype)initWithAMPeer:(AMPeer *)peer
               withAMFastThumb:(AMFastThumb *)fastThumb
                  withNSString:(NSString *)descriptor
                  withNSString:(NSString *)fileName
                       withInt:(jint)fileSize
                       withInt:(jint)w
                       withInt:(jint)h {
  if (self = [super init]) {
    
#line 397
    self->peer_ = peer;
    
#line 398
    self->fastThumb_ = fastThumb;
    
#line 399
    self->descriptor_ = descriptor;
    
#line 400
    self->fileName_ = fileName;
    
#line 401
    self->fileSize_ = fileSize;
    
#line 402
    self->w_ = w;
    
#line 403
    self->h_ = h;
  }
  return self;
}


#line 406
- (AMPeer *)getPeer {
  
#line 407
  return peer_;
}


#line 410
- (AMFastThumb *)getFastThumb {
  
#line 411
  return fastThumb_;
}


#line 414
- (NSString *)getDescriptor {
  
#line 415
  return descriptor_;
}


#line 418
- (NSString *)getFileName {
  
#line 419
  return fileName_;
}


#line 422
- (jint)getFileSize {
  
#line 423
  return fileSize_;
}


#line 426
- (jint)getW {
  
#line 427
  return w_;
}


#line 430
- (jint)getH {
  
#line 431
  return h_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesMessagesSenderActor_SendPhoto *)other {
  [super copyAllFieldsTo:other];
  other->peer_ = peer_;
  other->fastThumb_ = fastThumb_;
  other->descriptor_ = descriptor_;
  other->fileName_ = fileName_;
  other->fileSize_ = fileSize_;
  other->w_ = w_;
  other->h_ = h_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_SendPhoto)


#line 435
@implementation ImActorModelModulesMessagesSenderActor_SendVideo


#line 445
- (instancetype)initWithAMPeer:(AMPeer *)peer
                  withNSString:(NSString *)fileName
                       withInt:(jint)w
                       withInt:(jint)h
                       withInt:(jint)duration
               withAMFastThumb:(AMFastThumb *)fastThumb
                  withNSString:(NSString *)descriptor
                       withInt:(jint)fileSize {
  if (self = [super init]) {
    
#line 447
    self->peer_ = peer;
    
#line 448
    self->fileName_ = fileName;
    
#line 449
    self->w_ = w;
    
#line 450
    self->h_ = h;
    
#line 451
    self->duration_ = duration;
    
#line 452
    self->fastThumb_ = fastThumb;
    
#line 453
    self->descriptor_ = descriptor;
    
#line 454
    self->fileSize_ = fileSize;
  }
  return self;
}


#line 457
- (AMPeer *)getPeer {
  
#line 458
  return peer_;
}


#line 461
- (NSString *)getFileName {
  
#line 462
  return fileName_;
}


#line 465
- (jint)getW {
  
#line 466
  return w_;
}


#line 469
- (jint)getH {
  
#line 470
  return h_;
}


#line 473
- (jint)getDuration {
  
#line 474
  return duration_;
}


#line 477
- (AMFastThumb *)getFastThumb {
  
#line 478
  return fastThumb_;
}


#line 481
- (NSString *)getDescriptor {
  
#line 482
  return descriptor_;
}


#line 485
- (jint)getFileSize {
  
#line 486
  return fileSize_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesMessagesSenderActor_SendVideo *)other {
  [super copyAllFieldsTo:other];
  other->peer_ = peer_;
  other->fileName_ = fileName_;
  other->w_ = w_;
  other->h_ = h_;
  other->duration_ = duration_;
  other->fastThumb_ = fastThumb_;
  other->descriptor_ = descriptor_;
  other->fileSize_ = fileSize_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_SendVideo)


#line 490
@implementation ImActorModelModulesMessagesSenderActor_SendText


#line 494
- (instancetype)initWithAMPeer:(AMPeer *)peer
                  withNSString:(NSString *)text {
  if (self = [super init]) {
    
#line 495
    self->peer_ = peer;
    
#line 496
    self->text_ = text;
  }
  return self;
}


#line 499
- (AMPeer *)getPeer {
  
#line 500
  return peer_;
}


#line 503
- (NSString *)getText {
  
#line 504
  return text_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesMessagesSenderActor_SendText *)other {
  [super copyAllFieldsTo:other];
  other->peer_ = peer_;
  other->text_ = text_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_SendText)


#line 508
@implementation ImActorModelModulesMessagesSenderActor_MessageSent


#line 512
- (instancetype)initWithAMPeer:(AMPeer *)peer
                      withLong:(jlong)rid {
  if (self = [super init]) {
    
#line 513
    self->peer_ = peer;
    
#line 514
    self->rid_ = rid;
  }
  return self;
}


#line 517
- (AMPeer *)getPeer {
  
#line 518
  return peer_;
}


#line 521
- (jlong)getRid {
  
#line 522
  return rid_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesMessagesSenderActor_MessageSent *)other {
  [super copyAllFieldsTo:other];
  other->peer_ = peer_;
  other->rid_ = rid_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_MessageSent)


#line 526
@implementation ImActorModelModulesMessagesSenderActor_MessageError


#line 530
- (instancetype)initWithAMPeer:(AMPeer *)peer
                      withLong:(jlong)rid {
  if (self = [super init]) {
    
#line 531
    self->peer_ = peer;
    
#line 532
    self->rid_ = rid;
  }
  return self;
}


#line 535
- (AMPeer *)getPeer {
  
#line 536
  return peer_;
}


#line 539
- (jlong)getRid {
  
#line 540
  return rid_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesMessagesSenderActor_MessageError *)other {
  [super copyAllFieldsTo:other];
  other->peer_ = peer_;
  other->rid_ = rid_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_MessageError)

@implementation ImActorModelModulesMessagesSenderActor_$1


#line 256
- (void)onResultWithImActorModelNetworkParserResponse:(ImActorModelApiRpcResponseSeqDate *)response {
  
#line 257
  [((DKActorRef *) nil_chk([this$0_ self__])) sendWithId:[[ImActorModelModulesMessagesSenderActor_MessageSent alloc] initWithAMPeer:val$peer_ withLong:val$rid_]];
  [((ImActorModelModulesUpdates *) nil_chk([this$0_ updates])) onUpdateReceivedWithId:[[ImActorModelApiBaseSeqUpdate alloc] initWithInt:[((ImActorModelApiRpcResponseSeqDate *) nil_chk(response)) getSeq] withByteArray:
#line 259
  [response getState] withInt:
#line 260
  ImActorModelApiUpdatesUpdateMessageSent_HEADER withByteArray:
#line 261
  [((ImActorModelApiUpdatesUpdateMessageSent *) [[ImActorModelApiUpdatesUpdateMessageSent alloc] initWithImActorModelApiPeer:val$apiPeer_ withLong:val$rid_ withLong:[response getDate]]) toByteArray]]];
}


#line 265
- (void)onErrorWithAMRpcException:(AMRpcException *)e {
  
#line 266
  [((DKActorRef *) nil_chk([this$0_ self__])) sendWithId:[[ImActorModelModulesMessagesSenderActor_MessageError alloc] initWithAMPeer:val$peer_ withLong:val$rid_]];
}

- (instancetype)initWithImActorModelModulesMessagesSenderActor:(ImActorModelModulesMessagesSenderActor *)outer$
                                                    withAMPeer:(AMPeer *)capture$0
                                                      withLong:(jlong)capture$1
                                       withImActorModelApiPeer:(ImActorModelApiPeer *)capture$2 {
  this$0_ = outer$;
  val$peer_ = capture$0;
  val$rid_ = capture$1;
  val$apiPeer_ = capture$2;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesMessagesSenderActor_$1 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
  other->val$peer_ = val$peer_;
  other->val$rid_ = val$rid_;
  other->val$apiPeer_ = val$apiPeer_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_$1)
