//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/droidkit/bser/BserParser.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/bser/BserParser.h"
#include "im/actor/model/droidkit/bser/DataInput.h"
#include "im/actor/model/droidkit/bser/WireTypes.h"
#include "im/actor/model/droidkit/bser/util/SparseArray.h"
#include "java/io/IOException.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

__attribute__((unused)) static void BSBserParser_putWithInt_withId_withImActorModelDroidkitBserUtilSparseArray_(jint id_, id res, ImActorModelDroidkitBserUtilSparseArray *hashMap);

@interface BSBserParser ()

+ (void)putWithInt:(jint)id_
            withId:(id)res
withImActorModelDroidkitBserUtilSparseArray:(ImActorModelDroidkitBserUtilSparseArray *)hashMap;
- (instancetype)init;
@end

@implementation BSBserParser

+ (ImActorModelDroidkitBserUtilSparseArray *)deserializeWithBSDataInput:(BSDataInput *)is {
  return BSBserParser_deserializeWithBSDataInput_(is);
}

+ (void)putWithInt:(jint)id_
            withId:(id)res
withImActorModelDroidkitBserUtilSparseArray:(ImActorModelDroidkitBserUtilSparseArray *)hashMap {
  BSBserParser_putWithInt_withId_withImActorModelDroidkitBserUtilSparseArray_(id_, res, hashMap);
}

- (instancetype)init {
  return [super init];
}

@end

ImActorModelDroidkitBserUtilSparseArray *BSBserParser_deserializeWithBSDataInput_(BSDataInput *is) {
  BSBserParser_init();
  ImActorModelDroidkitBserUtilSparseArray *hashMap = [[ImActorModelDroidkitBserUtilSparseArray alloc] init];
  while (![((BSDataInput *) nil_chk(is)) isEOF]) {
    jint currentTag = (jint) [is readByte];
    jint id_ = RShift32(currentTag, 3);
    jint type = currentTag & (jint) 0x7;
    if (type == BSWireTypes_TYPE_VARINT) {
      BSBserParser_putWithInt_withId_withImActorModelDroidkitBserUtilSparseArray_(id_, JavaLangLong_valueOfWithLong_([is readVarInt]), hashMap);
    }
    else if (type == BSWireTypes_TYPE_LENGTH_DELIMITED) {
      jint size = (jint) [is readVarInt];
      BSBserParser_putWithInt_withId_withImActorModelDroidkitBserUtilSparseArray_(id_, [is readBytesWithInt:size], hashMap);
    }
    else if (type == BSWireTypes_TYPE_64BIT) {
      BSBserParser_putWithInt_withId_withImActorModelDroidkitBserUtilSparseArray_(id_, JavaLangLong_valueOfWithLong_([is readLong]), hashMap);
    }
    else if (type == BSWireTypes_TYPE_32BIT) {
      BSBserParser_putWithInt_withId_withImActorModelDroidkitBserUtilSparseArray_(id_, JavaLangLong_valueOfWithLong_([is readUInt]), hashMap);
    }
    else {
      @throw [[JavaIoIOException alloc] initWithNSString:JreStrcat("$I", @"Unknown Wire Type #", type)];
    }
  }
  return hashMap;
}

void BSBserParser_putWithInt_withId_withImActorModelDroidkitBserUtilSparseArray_(jint id_, id res, ImActorModelDroidkitBserUtilSparseArray *hashMap) {
  BSBserParser_init();
  if ([((ImActorModelDroidkitBserUtilSparseArray *) nil_chk(hashMap)) getWithInt:id_] != nil) {
    if ([JavaUtilList_class_() isInstance:[hashMap getWithInt:id_]]) {
      [((id<JavaUtilList>) nil_chk(((id<JavaUtilList>) check_protocol_cast([hashMap getWithInt:id_], @protocol(JavaUtilList))))) addWithId:res];
    }
    else {
      JavaUtilArrayList *list = [[JavaUtilArrayList alloc] init];
      [list addWithId:[hashMap getWithInt:id_]];
      [list addWithId:res];
      [hashMap putWithInt:id_ withId:list];
    }
  }
  else {
    [hashMap putWithInt:id_ withId:res];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(BSBserParser)
