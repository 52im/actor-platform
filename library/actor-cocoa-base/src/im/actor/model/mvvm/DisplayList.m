//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/mvvm/DisplayList.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/actors/Actor.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/droidkit/actors/ActorSystem.h"
#include "im/actor/model/droidkit/actors/Props.h"
#include "im/actor/model/mvvm/DisplayList.h"
#include "im/actor/model/mvvm/MVVMEngine.h"
#include "java/lang/Runnable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"

__attribute__((unused)) static void AMDisplayList_ListSwitcher_requestListSwitchWithAMDisplayList_ModificationHolderArray_(AMDisplayList_ListSwitcher *self, IOSObjectArray *modifications);

@interface AMDisplayList () {
 @public
  jint DISPLAY_LIST_ID_;
  id<AMDisplayList_Hook> hook_;
  DKActorRef *executor_;
  IOSObjectArray *lists_;
  jint currentList_;
  JavaUtilConcurrentCopyOnWriteArrayList *listeners_;
}
@end

J2OBJC_FIELD_SETTER(AMDisplayList, hook_, id<AMDisplayList_Hook>)
J2OBJC_FIELD_SETTER(AMDisplayList, executor_, DKActorRef *)
J2OBJC_FIELD_SETTER(AMDisplayList, lists_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AMDisplayList, listeners_, JavaUtilConcurrentCopyOnWriteArrayList *)

@interface AMDisplayList_ListSwitcher () {
 @public
  JavaUtilArrayList *pending_;
  jboolean isLocked_;
  AMDisplayList *displayList_;
}
- (instancetype)initWithAMDisplayList:(AMDisplayList *)displayList;

- (void)requestListSwitchWithAMDisplayList_ModificationHolderArray:(IOSObjectArray *)modifications;
@end

J2OBJC_FIELD_SETTER(AMDisplayList_ListSwitcher, pending_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(AMDisplayList_ListSwitcher, displayList_, AMDisplayList *)

@interface AMDisplayList_ListSwitcher_$1 () {
 @public
  AMDisplayList_ListSwitcher *this$0_;
  IOSObjectArray *val$modifications_;
}
@end

J2OBJC_FIELD_SETTER(AMDisplayList_ListSwitcher_$1, this$0_, AMDisplayList_ListSwitcher *)
J2OBJC_FIELD_SETTER(AMDisplayList_ListSwitcher_$1, val$modifications_, IOSObjectArray *)

@interface AMDisplayList_ListSwitched () {
 @public
  IOSObjectArray *modifications_;
}
- (instancetype)initWithAMDisplayList_ModificationHolderArray:(IOSObjectArray *)modifications;
@end

J2OBJC_FIELD_SETTER(AMDisplayList_ListSwitched, modifications_, IOSObjectArray *)

@interface AMDisplayList_EditList () {
 @public
  id<AMDisplayList_Modification> modification_;
  id<JavaLangRunnable> executeAfter_;
}
- (instancetype)initWithAMDisplayList_Modification:(id<AMDisplayList_Modification>)modification
                              withJavaLangRunnable:(id<JavaLangRunnable>)executeAfter;
@end

J2OBJC_FIELD_SETTER(AMDisplayList_EditList, modification_, id<AMDisplayList_Modification>)
J2OBJC_FIELD_SETTER(AMDisplayList_EditList, executeAfter_, id<JavaLangRunnable>)

@interface AMDisplayList_ModificationHolder () {
 @public
  id<AMDisplayList_Modification> modification_;
  id<JavaLangRunnable> executeAfter_;
}
- (instancetype)initWithAMDisplayList_Modification:(id<AMDisplayList_Modification>)modification
                              withJavaLangRunnable:(id<JavaLangRunnable>)executeAfter;
@end

J2OBJC_FIELD_SETTER(AMDisplayList_ModificationHolder, modification_, id<AMDisplayList_Modification>)
J2OBJC_FIELD_SETTER(AMDisplayList_ModificationHolder, executeAfter_, id<JavaLangRunnable>)

@interface AMDisplayList_$1 () {
 @public
  AMDisplayList *this$0_;
}
@end

J2OBJC_FIELD_SETTER(AMDisplayList_$1, this$0_, AMDisplayList *)

@implementation AMDisplayList

jint AMDisplayList_NEXT_ID_ = 0;

- (instancetype)init {
  return [self initAMDisplayListWithAMDisplayList_Hook:nil withJavaUtilList:[[JavaUtilArrayList alloc] init]];
}

- (instancetype)initWithAMDisplayList_Hook:(id<AMDisplayList_Hook>)hook {
  return [self initAMDisplayListWithAMDisplayList_Hook:hook withJavaUtilList:[[JavaUtilArrayList alloc] init]];
}

- (instancetype)initAMDisplayListWithAMDisplayList_Hook:(id<AMDisplayList_Hook>)hook
                                       withJavaUtilList:(id<JavaUtilList>)defaultValues {
  if (self = [super init]) {
    listeners_ = [[JavaUtilConcurrentCopyOnWriteArrayList alloc] init];
    self->DISPLAY_LIST_ID_ = AMDisplayList_NEXT_ID_++;
    self->hook_ = hook;
    self->executor_ = [((DKActorSystem *) nil_chk(DKActorSystem_system())) actorOfWithDKProps:DKProps_createWithIOSClass_withDKActorCreator_(AMDisplayList_ListSwitcher_class_(), [[AMDisplayList_$1 alloc] initWithAMDisplayList:self]) withNSString:JreStrcat("$I", @"display_lists/", DISPLAY_LIST_ID_)];
    self->lists_ = [IOSObjectArray newArrayWithLength:2 type:JavaUtilArrayList_class_()];
    self->currentList_ = 0;
    IOSObjectArray_SetAndConsume(self->lists_, 0, [[JavaUtilArrayList alloc] initWithJavaUtilCollection:defaultValues]);
    IOSObjectArray_SetAndConsume(self->lists_, 1, [[JavaUtilArrayList alloc] initWithJavaUtilCollection:defaultValues]);
    if (hook != nil) {
      [hook beforeDisplayWithJavaUtilList:IOSObjectArray_Get(lists_, 0)];
    }
  }
  return self;
}

- (instancetype)initWithAMDisplayList_Hook:(id<AMDisplayList_Hook>)hook
                          withJavaUtilList:(id<JavaUtilList>)defaultValues {
  return [self initAMDisplayListWithAMDisplayList_Hook:hook withJavaUtilList:defaultValues];
}

- (jint)getSize {
  AMMVVMEngine_checkMainThread();
  return [((JavaUtilArrayList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), currentList_))) size];
}

- (id)getItemWithInt:(jint)index {
  AMMVVMEngine_checkMainThread();
  return [((JavaUtilArrayList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), currentList_))) getWithInt:index];
}

- (void)editListWithAMDisplayList_Modification:(id<AMDisplayList_Modification>)mod {
  [self editListWithAMDisplayList_Modification:mod withJavaLangRunnable:nil];
}

- (void)editListWithAMDisplayList_Modification:(id<AMDisplayList_Modification>)mod
                          withJavaLangRunnable:(id<JavaLangRunnable>)executeAfter {
  [((DKActorRef *) nil_chk(self->executor_)) sendWithId:[[AMDisplayList_EditList alloc] initWithAMDisplayList_Modification:mod withJavaLangRunnable:executeAfter]];
}

- (void)addListenerWithAMDisplayList_Listener:(id<AMDisplayList_Listener>)listener {
  AMMVVMEngine_checkMainThread();
  if (![((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(listeners_)) containsWithId:listener]) {
    [listeners_ addWithId:listener];
  }
}

- (void)removeListenerWithAMDisplayList_Listener:(id<AMDisplayList_Listener>)listener {
  AMMVVMEngine_checkMainThread();
  [((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(listeners_)) removeWithId:listener];
}

- (void)copyAllFieldsTo:(AMDisplayList *)other {
  [super copyAllFieldsTo:other];
  other->DISPLAY_LIST_ID_ = DISPLAY_LIST_ID_;
  other->hook_ = hook_;
  other->executor_ = executor_;
  other->lists_ = lists_;
  other->currentList_ = currentList_;
  other->listeners_ = listeners_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMDisplayList)

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AMDisplayList_Modification)

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AMDisplayList_Hook)

@implementation AMDisplayList_ListSwitcher

- (instancetype)initWithAMDisplayList:(AMDisplayList *)displayList {
  if (self = [super init]) {
    pending_ = [[JavaUtilArrayList alloc] init];
    self->displayList_ = displayList;
  }
  return self;
}

- (void)onEditListWithAMDisplayList_Modification:(id<AMDisplayList_Modification>)modification
                            withJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  AMDisplayList_ModificationHolder *holder = [[AMDisplayList_ModificationHolder alloc] initWithAMDisplayList_Modification:modification withJavaLangRunnable:runnable];
  if (isLocked_) {
    [((JavaUtilArrayList *) nil_chk(pending_)) addWithId:holder];
    return;
  }
  JavaUtilArrayList *backgroundList = IOSObjectArray_Get(nil_chk(((AMDisplayList *) nil_chk(displayList_))->lists_), (displayList_->currentList_ + 1) % 2);
  [((id<AMDisplayList_Modification>) nil_chk(modification)) modifyWithJavaUtilList:backgroundList];
  if (displayList_->hook_ != nil) {
    [displayList_->hook_ beforeDisplayWithJavaUtilList:backgroundList];
  }
  AMDisplayList_ListSwitcher_requestListSwitchWithAMDisplayList_ModificationHolderArray_(self, [IOSObjectArray newArrayWithObjects:(id[]){ holder } count:1 type:AMDisplayList_ModificationHolder_class_()]);
}

- (void)requestListSwitchWithAMDisplayList_ModificationHolderArray:(IOSObjectArray *)modifications {
  AMDisplayList_ListSwitcher_requestListSwitchWithAMDisplayList_ModificationHolderArray_(self, modifications);
}

- (void)onListSwitchedWithAMDisplayList_ModificationHolderArray:(IOSObjectArray *)modifications {
  isLocked_ = NO;
  JavaUtilArrayList *backgroundList = IOSObjectArray_Get(nil_chk(((AMDisplayList *) nil_chk(displayList_))->lists_), (displayList_->currentList_ + 1) % 2);
  {
    IOSObjectArray *a__ = modifications;
    AMDisplayList_ModificationHolder * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    AMDisplayList_ModificationHolder * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      AMDisplayList_ModificationHolder *m = *b__++;
      [((id<AMDisplayList_Modification>) nil_chk(((AMDisplayList_ModificationHolder *) nil_chk(m))->modification_)) modifyWithJavaUtilList:backgroundList];
    }
  }
  if ([((JavaUtilArrayList *) nil_chk(pending_)) size] > 0) {
    IOSObjectArray *dest = [pending_ toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[pending_ size] type:AMDisplayList_ModificationHolder_class_()]];
    [pending_ clear];
    {
      IOSObjectArray *a__ = dest;
      AMDisplayList_ModificationHolder * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      AMDisplayList_ModificationHolder * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        AMDisplayList_ModificationHolder *m = *b__++;
        [((id<AMDisplayList_Modification>) nil_chk(((AMDisplayList_ModificationHolder *) nil_chk(m))->modification_)) modifyWithJavaUtilList:backgroundList];
      }
    }
    if (displayList_->hook_ != nil) {
      [displayList_->hook_ beforeDisplayWithJavaUtilList:backgroundList];
    }
    AMDisplayList_ListSwitcher_requestListSwitchWithAMDisplayList_ModificationHolderArray_(self, dest);
  }
}

- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[AMDisplayList_ListSwitched class]]) {
    [self onListSwitchedWithAMDisplayList_ModificationHolderArray:((AMDisplayList_ListSwitched *) nil_chk(((AMDisplayList_ListSwitched *) check_class_cast(message, [AMDisplayList_ListSwitched class]))))->modifications_];
  }
  else if ([message isKindOfClass:[AMDisplayList_EditList class]]) {
    [self onEditListWithAMDisplayList_Modification:((AMDisplayList_EditList *) nil_chk(((AMDisplayList_EditList *) check_class_cast(message, [AMDisplayList_EditList class]))))->modification_ withJavaLangRunnable:((AMDisplayList_EditList *) nil_chk(((AMDisplayList_EditList *) check_class_cast(message, [AMDisplayList_EditList class]))))->executeAfter_];
  }
  else {
    [self dropWithId:message];
  }
}

- (void)copyAllFieldsTo:(AMDisplayList_ListSwitcher *)other {
  [super copyAllFieldsTo:other];
  other->pending_ = pending_;
  other->isLocked_ = isLocked_;
  other->displayList_ = displayList_;
}

@end

void AMDisplayList_ListSwitcher_requestListSwitchWithAMDisplayList_ModificationHolderArray_(AMDisplayList_ListSwitcher *self, IOSObjectArray *modifications) {
  self->isLocked_ = YES;
  AMMVVMEngine_runOnUiThreadWithJavaLangRunnable_([[AMDisplayList_ListSwitcher_$1 alloc] initWithAMDisplayList_ListSwitcher:self withAMDisplayList_ModificationHolderArray:modifications]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMDisplayList_ListSwitcher)

@implementation AMDisplayList_ListSwitcher_$1

- (void)run {
  ((AMDisplayList *) nil_chk(this$0_->displayList_))->currentList_ = (this$0_->displayList_->currentList_ + 1) % 2;
  for (id<AMDisplayList_Listener> __strong l in nil_chk(this$0_->displayList_->listeners_)) {
    [((id<AMDisplayList_Listener>) nil_chk(l)) onCollectionChanged];
  }
  {
    IOSObjectArray *a__ = val$modifications_;
    AMDisplayList_ModificationHolder * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    AMDisplayList_ModificationHolder * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      AMDisplayList_ModificationHolder *m = *b__++;
      if (((AMDisplayList_ModificationHolder *) nil_chk(m))->executeAfter_ != nil) {
        [m->executeAfter_ run];
      }
    }
  }
  [((DKActorRef *) nil_chk([this$0_ self__])) sendWithId:[[AMDisplayList_ListSwitched alloc] initWithAMDisplayList_ModificationHolderArray:val$modifications_]];
}

- (instancetype)initWithAMDisplayList_ListSwitcher:(AMDisplayList_ListSwitcher *)outer$
         withAMDisplayList_ModificationHolderArray:(IOSObjectArray *)capture$0 {
  this$0_ = outer$;
  val$modifications_ = capture$0;
  return [super init];
}

- (void)copyAllFieldsTo:(AMDisplayList_ListSwitcher_$1 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
  other->val$modifications_ = val$modifications_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMDisplayList_ListSwitcher_$1)

@implementation AMDisplayList_ListSwitched

- (instancetype)initWithAMDisplayList_ModificationHolderArray:(IOSObjectArray *)modifications {
  if (self = [super init]) {
    self->modifications_ = modifications;
  }
  return self;
}

- (void)copyAllFieldsTo:(AMDisplayList_ListSwitched *)other {
  [super copyAllFieldsTo:other];
  other->modifications_ = modifications_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMDisplayList_ListSwitched)

@implementation AMDisplayList_EditList

- (instancetype)initWithAMDisplayList_Modification:(id<AMDisplayList_Modification>)modification
                              withJavaLangRunnable:(id<JavaLangRunnable>)executeAfter {
  if (self = [super init]) {
    self->modification_ = modification;
    self->executeAfter_ = executeAfter;
  }
  return self;
}

- (void)copyAllFieldsTo:(AMDisplayList_EditList *)other {
  [super copyAllFieldsTo:other];
  other->modification_ = modification_;
  other->executeAfter_ = executeAfter_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMDisplayList_EditList)

@implementation AMDisplayList_ModificationHolder

- (instancetype)initWithAMDisplayList_Modification:(id<AMDisplayList_Modification>)modification
                              withJavaLangRunnable:(id<JavaLangRunnable>)executeAfter {
  if (self = [super init]) {
    self->modification_ = modification;
    self->executeAfter_ = executeAfter;
  }
  return self;
}

- (void)copyAllFieldsTo:(AMDisplayList_ModificationHolder *)other {
  [super copyAllFieldsTo:other];
  other->modification_ = modification_;
  other->executeAfter_ = executeAfter_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMDisplayList_ModificationHolder)

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(AMDisplayList_Listener)

@implementation AMDisplayList_$1

- (AMDisplayList_ListSwitcher *)create {
  return [[AMDisplayList_ListSwitcher alloc] initWithAMDisplayList:this$0_];
}

- (instancetype)initWithAMDisplayList:(AMDisplayList *)outer$ {
  this$0_ = outer$;
  return [super init];
}

- (void)copyAllFieldsTo:(AMDisplayList_$1 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMDisplayList_$1)
