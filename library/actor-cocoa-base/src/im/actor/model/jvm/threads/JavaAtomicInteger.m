//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/jvm/threads/JavaAtomicInteger.java
//

#include "J2ObjC_source.h"
#include "im/actor/model/jvm/threads/JavaAtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@interface ImActorModelJvmThreadsJavaAtomicInteger () {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *atomicInteger_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelJvmThreadsJavaAtomicInteger, atomicInteger_, JavaUtilConcurrentAtomicAtomicInteger *)

@implementation ImActorModelJvmThreadsJavaAtomicInteger

- (instancetype)initWithInt:(jint)value {
  if (self = [super init]) {
    atomicInteger_ = [[JavaUtilConcurrentAtomicAtomicInteger alloc] initWithInt:value];
  }
  return self;
}

- (jint)get {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(atomicInteger_)) get];
}

- (jint)incrementAndGet {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(atomicInteger_)) incrementAndGet];
}

- (jint)getAndIncrement {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(atomicInteger_)) getAndIncrement];
}

- (void)compareAndSetWithInt:(jint)exp
                     withInt:(jint)v {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(atomicInteger_)) compareAndSetWithInt:exp withInt:v];
}

- (void)setWithInt:(jint)v {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(atomicInteger_)) setWithInt:v];
}

- (void)copyAllFieldsTo:(ImActorModelJvmThreadsJavaAtomicInteger *)other {
  [super copyAllFieldsTo:other];
  other->atomicInteger_ = atomicInteger_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelJvmThreadsJavaAtomicInteger)
