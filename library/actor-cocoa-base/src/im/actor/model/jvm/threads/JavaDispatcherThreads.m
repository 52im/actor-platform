//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/jvm/threads/JavaDispatcherThreads.java
//

#line 1 "/Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/jvm/threads/JavaDispatcherThreads.java"

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/actors/ActorTime.h"
#include "im/actor/model/droidkit/actors/ThreadPriority.h"
#include "im/actor/model/droidkit/actors/dispatch/AbstractDispatchQueue.h"
#include "im/actor/model/droidkit/actors/dispatch/Dispatch.h"
#include "im/actor/model/droidkit/actors/dispatch/DispatchResult.h"
#include "im/actor/model/jvm/threads/JavaDispatcherThreads.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@interface ImActorModelJvmThreadsJavaDispatcherThreads () {
 @public
  IOSObjectArray *threads_;
  jint count_;
  DKThreadPriorityEnum *priority_;
  jboolean isClosed_;
  jint id__;
  NSString *name_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelJvmThreadsJavaDispatcherThreads, threads_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ImActorModelJvmThreadsJavaDispatcherThreads, priority_, DKThreadPriorityEnum *)
J2OBJC_FIELD_SETTER(ImActorModelJvmThreadsJavaDispatcherThreads, name_, NSString *)

@interface ImActorModelJvmThreadsJavaDispatcherThreads_DispatcherThread () {
 @public
  ImActorModelJvmThreadsJavaDispatcherThreads *this$0_;
  jboolean isChanged__;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelJvmThreadsJavaDispatcherThreads_DispatcherThread, this$0_, ImActorModelJvmThreadsJavaDispatcherThreads *)

BOOL ImActorModelJvmThreadsJavaDispatcherThreads_initialized = NO;


#line 19
@implementation ImActorModelJvmThreadsJavaDispatcherThreads

JavaUtilConcurrentAtomicAtomicInteger * ImActorModelJvmThreadsJavaDispatcherThreads_INDEX_;


#line 43
- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)count
        withDKThreadPriorityEnum:(DKThreadPriorityEnum *)priority
     withDKAbstractDispatchQueue:(DKAbstractDispatchQueue *)queue
                  withDKDispatch:(id<DKDispatch>)dispatch
                     withBoolean:(jboolean)createThreads {
  if (self =
#line 44
  [super initWithDKAbstractDispatchQueue:queue withDKDispatch:dispatch]) {
    isClosed_ =
#line 28
    NO;
    
#line 46
    self->id__ = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(ImActorModelJvmThreadsJavaDispatcherThreads_INDEX_)) getAndIncrement];
    
#line 47
    self->name_ = name;
    
#line 48
    self->count_ = count;
    
#line 49
    self->priority_ = priority;
    
#line 51
    if (createThreads) {
      [self startPool];
    }
  }
  return self;
}


#line 56
- (void)startPool {
  
#line 57
  if (self->threads_ != nil) {
    return;
  }
  self->threads_ = [IOSObjectArray newArrayWithLength:count_ type:JavaLangThread_class_()];
  for (jint i = 0; i < count_; i++) {
    IOSObjectArray_SetAndConsume(self->threads_, i, [[ImActorModelJvmThreadsJavaDispatcherThreads_DispatcherThread alloc] initWithImActorModelJvmThreadsJavaDispatcherThreads:self]);
    [((JavaLangThread *) nil_chk(IOSObjectArray_Get(self->threads_, i))) setNameWithNSString:JreStrcat("$$CI", @"Pool_", name_, '_', i)];
    switch ([priority_ ordinal]) {
      case DKThreadPriority_HIGH:
      [((JavaLangThread *) nil_chk(IOSObjectArray_Get(self->threads_, i))) setPriorityWithInt:JavaLangThread_MAX_PRIORITY];
      break;
      case DKThreadPriority_LOW:
      [((JavaLangThread *) nil_chk(IOSObjectArray_Get(self->threads_, i))) setPriorityWithInt:JavaLangThread_MIN_PRIORITY];
      break;
      default:
      case DKThreadPriority_NORMAL:
      [((JavaLangThread *) nil_chk(IOSObjectArray_Get(self->threads_, i))) setPriorityWithInt:JavaLangThread_NORM_PRIORITY];
      break;
    }
    [((JavaLangThread *) nil_chk(IOSObjectArray_Get(self->threads_, i))) start];
  }
}


#line 83
- (void)close {
  
#line 84
  isClosed_ = YES;
  [self notifyDispatcher];
}


#line 92
- (void)notifyDispatcher {
  
#line 93
  if (threads_ != nil) {
    @synchronized(threads_) {
      [threads_ notifyAll];
      {
        IOSObjectArray *a__ =
#line 96
        threads_;
        JavaLangThread * const *b__ = a__->buffer_;
        JavaLangThread * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          JavaLangThread *thread = *b__++;
          
#line 97
          [((ImActorModelJvmThreadsJavaDispatcherThreads_DispatcherThread *) nil_chk(((ImActorModelJvmThreadsJavaDispatcherThreads_DispatcherThread *) check_class_cast(thread, [ImActorModelJvmThreadsJavaDispatcherThreads_DispatcherThread class])))) setChangedWithBoolean:YES];
        }
      }
    }
  }
}

- (void)copyAllFieldsTo:(ImActorModelJvmThreadsJavaDispatcherThreads *)other {
  [super copyAllFieldsTo:other];
  other->threads_ = threads_;
  other->count_ = count_;
  other->priority_ = priority_;
  other->isClosed_ = isClosed_;
  other->id__ = id__;
  other->name_ = name_;
}

+ (void)initialize {
  if (self == [ImActorModelJvmThreadsJavaDispatcherThreads class]) {
    ImActorModelJvmThreadsJavaDispatcherThreads_INDEX_ =
#line 21
    [[JavaUtilConcurrentAtomicAtomicInteger alloc] initWithInt:1];
    J2OBJC_SET_INITIALIZED(ImActorModelJvmThreadsJavaDispatcherThreads)
  }
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelJvmThreadsJavaDispatcherThreads)


#line 106
@implementation ImActorModelJvmThreadsJavaDispatcherThreads_DispatcherThread


#line 110
- (jboolean)isChanged {
  
#line 111
  return isChanged__;
}


#line 114
- (void)setChangedWithBoolean:(jboolean)isChanged {
  
#line 115
  self->isChanged__ = isChanged;
}


#line 119
- (void)run {
  while (!this$0_->isClosed_) {
    jlong time = DKActorTime_currentTime();
    
#line 123
    @synchronized(this$0_->threads_) {
      isChanged__ = NO;
    }
    
#line 127
    DKDispatchResult *action = [((DKAbstractDispatchQueue *) nil_chk([this$0_ getQueue])) dispatchWithLong:time];
    
#line 129
    if (![((DKDispatchResult *) nil_chk(action)) isResult]) {
      if (isChanged__) {
        continue;
      }
      
#line 134
      @synchronized(this$0_->threads_) {
        jlong delay = [action getDelay];
        [action recycle];
        
#line 138
        @try {
          if (delay > 0) {
            [((IOSObjectArray *) nil_chk(this$0_->threads_)) waitWithLong:delay];
          }
          continue;
        }
        @catch (
#line 143
        JavaLangInterruptedException *e) {
          [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
          return;
        }
      }
    }
    
#line 150
    @try {
      id actiondData = (id) [action getRes];
      [action recycle];
      [this$0_ dispatchMessageWithId:actiondData];
    }
    @catch (
#line 154
    JavaLangThrowable *t) {
      
#line 158
      [((JavaLangThrowable *) nil_chk(t)) printStackTrace];
    }
  }
}

- (instancetype)initWithImActorModelJvmThreadsJavaDispatcherThreads:(ImActorModelJvmThreadsJavaDispatcherThreads *)outer$ {
  this$0_ = outer$;
  if (self = [super init]) {
    isChanged__ =
#line 108
    NO;
  }
  return self;
}

- (void)copyAllFieldsTo:(ImActorModelJvmThreadsJavaDispatcherThreads_DispatcherThread *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
  other->isChanged__ = isChanged__;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelJvmThreadsJavaDispatcherThreads_DispatcherThread)
