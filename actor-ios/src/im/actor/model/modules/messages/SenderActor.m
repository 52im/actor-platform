//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/im/actor/model/modules/messages/SenderActor.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/api/MessageContent.h"
#include "im/actor/model/api/OutPeer.h"
#include "im/actor/model/api/Peer.h"
#include "im/actor/model/api/PeerType.h"
#include "im/actor/model/api/TextMessage.h"
#include "im/actor/model/api/base/SeqUpdate.h"
#include "im/actor/model/api/rpc/RequestSendMessage.h"
#include "im/actor/model/api/rpc/ResponseSeqDate.h"
#include "im/actor/model/api/updates/UpdateMessageSent.h"
#include "im/actor/model/droidkit/actors/Actor.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/entity/Group.h"
#include "im/actor/model/entity/Message.h"
#include "im/actor/model/entity/MessageState.h"
#include "im/actor/model/entity/Peer.h"
#include "im/actor/model/entity/PeerType.h"
#include "im/actor/model/entity/User.h"
#include "im/actor/model/entity/content/AbsContent.h"
#include "im/actor/model/entity/content/TextContent.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/Updates.h"
#include "im/actor/model/modules/messages/ConversationActor.h"
#include "im/actor/model/modules/messages/SenderActor.h"
#include "im/actor/model/modules/messages/entity/PendingMessage.h"
#include "im/actor/model/modules/messages/entity/PendingMessagesStorage.h"
#include "im/actor/model/modules/utils/ModuleActor.h"
#include "im/actor/model/modules/utils/RandomUtils.h"
#include "im/actor/model/network/RpcException.h"
#include "im/actor/model/storage/PreferencesStorage.h"
#include "java/io/IOException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"

__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_performTextSendWithAMPeer_withLong_withNSString_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid, NSString *text);
__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_onSentWithAMPeer_withLong_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid);
__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_onErrorWithAMPeer_withLong_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid);
__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_savePending(ImActorModelModulesMessagesSenderActor *self);

@interface ImActorModelModulesMessagesSenderActor () {
 @public
  ImActorModelModulesMessagesEntityPendingMessagesStorage *pendingMessages_;
}

- (void)performTextSendWithAMPeer:(AMPeer *)peer
                         withLong:(jlong)rid
                     withNSString:(NSString *)text;

- (void)onSentWithAMPeer:(AMPeer *)peer
                withLong:(jlong)rid;

- (void)onErrorWithAMPeer:(AMPeer *)peer
                 withLong:(jlong)rid;

- (void)savePending;
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor, pendingMessages_, ImActorModelModulesMessagesEntityPendingMessagesStorage *)

@interface ImActorModelModulesMessagesSenderActor_SendText () {
 @public
  AMPeer *peer_;
  NSString *text_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendText, peer_, AMPeer *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendText, text_, NSString *)

@interface ImActorModelModulesMessagesSenderActor_MessageSent () {
 @public
  AMPeer *peer_;
  jlong rid_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_MessageSent, peer_, AMPeer *)

@interface ImActorModelModulesMessagesSenderActor_MessageError () {
 @public
  AMPeer *peer_;
  jlong rid_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_MessageError, peer_, AMPeer *)

@interface ImActorModelModulesMessagesSenderActor_$1 () {
 @public
  ImActorModelModulesMessagesSenderActor *this$0_;
  AMPeer *val$peer_;
  jlong val$rid_;
  ImActorModelApiPeer *val$apiPeer_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_$1, this$0_, ImActorModelModulesMessagesSenderActor *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_$1, val$peer_, AMPeer *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_$1, val$apiPeer_, ImActorModelApiPeer *)

@implementation ImActorModelModulesMessagesSenderActor

NSString * ImActorModelModulesMessagesSenderActor_PREFERENCES_ = @"sender_pending";

- (instancetype)initWithImActorModelModulesModules:(ImActorModelModulesModules *)messenger {
  return [super initWithImActorModelModulesModules:messenger];
}

- (void)preStart {
  pendingMessages_ = [[ImActorModelModulesMessagesEntityPendingMessagesStorage alloc] init];
  IOSByteArray *p = [((id<AMPreferencesStorage>) nil_chk([self preferences])) getBytesWithNSString:ImActorModelModulesMessagesSenderActor_PREFERENCES_];
  if (p != nil) {
    @try {
      pendingMessages_ = ImActorModelModulesMessagesEntityPendingMessagesStorage_fromBytesWithByteArray_(p);
    }
    @catch (JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
  }
  for (ImActorModelModulesMessagesEntityPendingMessage * __strong pending in nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages])) {
    if ([[((ImActorModelModulesMessagesEntityPendingMessage *) nil_chk(pending)) getContent] isKindOfClass:[ImActorModelEntityContentTextContent class]]) {
      ImActorModelModulesMessagesSenderActor_performTextSendWithAMPeer_withLong_withNSString_(self, [pending getPeer], [pending getRid], [((ImActorModelEntityContentTextContent *) nil_chk(((ImActorModelEntityContentTextContent *) check_class_cast([pending getContent], [ImActorModelEntityContentTextContent class])))) getText]);
    }
    else {
    }
  }
}

- (void)doSendTextWithAMPeer:(AMPeer *)peer
                withNSString:(NSString *)text {
  jlong rid = ImActorModelModulesUtilsRandomUtils_nextRid();
  jlong date = JavaLangSystem_currentTimeMillis();
  AMMessage *message = [[AMMessage alloc] initWithLong:rid withLong:date withLong:date withInt:[self myUid] withAMMessageStateEnum:AMMessageStateEnum_get_PENDING() withImActorModelEntityContentAbsContent:[[ImActorModelEntityContentTextContent alloc] initWithNSString:text]];
  [((DKActorRef *) nil_chk([self getConversationActorWithAMPeer:peer])) sendWithId:message];
  [((JavaUtilArrayList *) nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages])) addWithId:[[ImActorModelModulesMessagesEntityPendingMessage alloc] initWithAMPeer:peer withLong:rid withImActorModelEntityContentAbsContent:[[ImActorModelEntityContentTextContent alloc] initWithNSString:text]]];
  ImActorModelModulesMessagesSenderActor_performTextSendWithAMPeer_withLong_withNSString_(self, peer, rid, text);
}

- (void)performTextSendWithAMPeer:(AMPeer *)peer
                         withLong:(jlong)rid
                     withNSString:(NSString *)text {
  ImActorModelModulesMessagesSenderActor_performTextSendWithAMPeer_withLong_withNSString_(self, peer, rid, text);
}

- (void)onSentWithAMPeer:(AMPeer *)peer
                withLong:(jlong)rid {
  ImActorModelModulesMessagesSenderActor_onSentWithAMPeer_withLong_(self, peer, rid);
}

- (void)onErrorWithAMPeer:(AMPeer *)peer
                 withLong:(jlong)rid {
  ImActorModelModulesMessagesSenderActor_onErrorWithAMPeer_withLong_(self, peer, rid);
}

- (void)savePending {
  ImActorModelModulesMessagesSenderActor_savePending(self);
}

- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[ImActorModelModulesMessagesSenderActor_SendText class]]) {
    ImActorModelModulesMessagesSenderActor_SendText *sendText = (ImActorModelModulesMessagesSenderActor_SendText *) check_class_cast(message, [ImActorModelModulesMessagesSenderActor_SendText class]);
    [self doSendTextWithAMPeer:[((ImActorModelModulesMessagesSenderActor_SendText *) nil_chk(sendText)) getPeer] withNSString:[sendText getText]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesSenderActor_MessageSent class]]) {
    ImActorModelModulesMessagesSenderActor_MessageSent *messageSent = (ImActorModelModulesMessagesSenderActor_MessageSent *) check_class_cast(message, [ImActorModelModulesMessagesSenderActor_MessageSent class]);
    ImActorModelModulesMessagesSenderActor_onSentWithAMPeer_withLong_(self, [((ImActorModelModulesMessagesSenderActor_MessageSent *) nil_chk(messageSent)) getPeer], [messageSent getRid]);
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesSenderActor_MessageError class]]) {
    ImActorModelModulesMessagesSenderActor_MessageError *messageError = (ImActorModelModulesMessagesSenderActor_MessageError *) check_class_cast(message, [ImActorModelModulesMessagesSenderActor_MessageError class]);
    ImActorModelModulesMessagesSenderActor_onErrorWithAMPeer_withLong_(self, [((ImActorModelModulesMessagesSenderActor_MessageError *) nil_chk(messageError)) getPeer], [messageError getRid]);
  }
  else {
    [self dropWithId:message];
  }
}

- (void)copyAllFieldsTo:(ImActorModelModulesMessagesSenderActor *)other {
  [super copyAllFieldsTo:other];
  other->pendingMessages_ = pendingMessages_;
}

@end

void ImActorModelModulesMessagesSenderActor_performTextSendWithAMPeer_withLong_withNSString_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid, NSString *text) {
  ImActorModelApiOutPeer *outPeer;
  ImActorModelApiPeer *apiPeer;
  if ([((AMPeer *) nil_chk(peer)) getPeerType] == AMPeerTypeEnum_get_PRIVATE()) {
    AMUser *user = [self getUserWithInt:[peer getPeerId]];
    if (user == nil) {
      return;
    }
    outPeer = [[ImActorModelApiOutPeer alloc] initWithImActorModelApiPeerTypeEnum:ImActorModelApiPeerTypeEnum_get_PRIVATE() withInt:[((AMUser *) nil_chk(user)) getUid] withLong:[user getAccessHash]];
    apiPeer = [[ImActorModelApiPeer alloc] initWithImActorModelApiPeerTypeEnum:ImActorModelApiPeerTypeEnum_get_PRIVATE() withInt:[user getUid]];
  }
  else if ([peer getPeerType] == AMPeerTypeEnum_get_GROUP()) {
    AMGroup *group = [self getGroupWithInt:[peer getPeerId]];
    if (group == nil) {
      return;
    }
    outPeer = [[ImActorModelApiOutPeer alloc] initWithImActorModelApiPeerTypeEnum:ImActorModelApiPeerTypeEnum_get_GROUP() withInt:[((AMGroup *) nil_chk(group)) getGroupId] withLong:[group getAccessHash]];
    apiPeer = [[ImActorModelApiPeer alloc] initWithImActorModelApiPeerTypeEnum:ImActorModelApiPeerTypeEnum_get_GROUP() withInt:[group getGroupId]];
  }
  else {
    return;
  }
  [self requestWithImActorModelNetworkParserRequest:[[ImActorModelApiRpcRequestSendMessage alloc] initWithImActorModelApiOutPeer:outPeer withLong:rid withImActorModelApiMessageContent:[[ImActorModelApiMessageContent alloc] initWithInt:(jint) 0x01 withByteArray:[((ImActorModelApiTextMessage *) [[ImActorModelApiTextMessage alloc] initWithNSString:text withInt:0 withByteArray:[IOSByteArray newArrayWithLength:0]]) toByteArray]]] withAMRpcCallback:[[ImActorModelModulesMessagesSenderActor_$1 alloc] initWithImActorModelModulesMessagesSenderActor:self withAMPeer:peer withLong:rid withImActorModelApiPeer:apiPeer]];
}

void ImActorModelModulesMessagesSenderActor_onSentWithAMPeer_withLong_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid) {
  for (ImActorModelModulesMessagesEntityPendingMessage * __strong pending in nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(self->pendingMessages_)) getPendingMessages])) {
    if ([((ImActorModelModulesMessagesEntityPendingMessage *) nil_chk(pending)) getRid] == rid && [((AMPeer *) nil_chk([pending getPeer])) isEqual:peer]) {
      [((JavaUtilArrayList *) nil_chk([self->pendingMessages_ getPendingMessages])) removeWithId:pending];
      break;
    }
  }
  ImActorModelModulesMessagesSenderActor_savePending(self);
}

void ImActorModelModulesMessagesSenderActor_onErrorWithAMPeer_withLong_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid) {
  for (ImActorModelModulesMessagesEntityPendingMessage * __strong pending in nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(self->pendingMessages_)) getPendingMessages])) {
    if ([((ImActorModelModulesMessagesEntityPendingMessage *) nil_chk(pending)) getRid] == rid && [((AMPeer *) nil_chk([pending getPeer])) isEqual:peer]) {
      [((JavaUtilArrayList *) nil_chk([self->pendingMessages_ getPendingMessages])) removeWithId:pending];
      break;
    }
  }
  ImActorModelModulesMessagesSenderActor_savePending(self);
}

void ImActorModelModulesMessagesSenderActor_savePending(ImActorModelModulesMessagesSenderActor *self) {
  [((id<AMPreferencesStorage>) nil_chk([self preferences])) putBytesWithNSString:ImActorModelModulesMessagesSenderActor_PREFERENCES_ withByteArray:[((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(self->pendingMessages_)) toByteArray]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor)

@implementation ImActorModelModulesMessagesSenderActor_SendText

- (instancetype)initWithAMPeer:(AMPeer *)peer
                  withNSString:(NSString *)text {
  if (self = [super init]) {
    self->peer_ = peer;
    self->text_ = text;
  }
  return self;
}

- (AMPeer *)getPeer {
  return peer_;
}

- (NSString *)getText {
  return text_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesMessagesSenderActor_SendText *)other {
  [super copyAllFieldsTo:other];
  other->peer_ = peer_;
  other->text_ = text_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_SendText)

@implementation ImActorModelModulesMessagesSenderActor_MessageSent

- (instancetype)initWithAMPeer:(AMPeer *)peer
                      withLong:(jlong)rid {
  if (self = [super init]) {
    self->peer_ = peer;
    self->rid_ = rid;
  }
  return self;
}

- (AMPeer *)getPeer {
  return peer_;
}

- (jlong)getRid {
  return rid_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesMessagesSenderActor_MessageSent *)other {
  [super copyAllFieldsTo:other];
  other->peer_ = peer_;
  other->rid_ = rid_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_MessageSent)

@implementation ImActorModelModulesMessagesSenderActor_MessageError

- (instancetype)initWithAMPeer:(AMPeer *)peer
                      withLong:(jlong)rid {
  if (self = [super init]) {
    self->peer_ = peer;
    self->rid_ = rid;
  }
  return self;
}

- (AMPeer *)getPeer {
  return peer_;
}

- (jlong)getRid {
  return rid_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesMessagesSenderActor_MessageError *)other {
  [super copyAllFieldsTo:other];
  other->peer_ = peer_;
  other->rid_ = rid_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_MessageError)

@implementation ImActorModelModulesMessagesSenderActor_$1

- (void)onResultWithImActorModelNetworkParserResponse:(ImActorModelApiRpcResponseSeqDate *)response {
  [((DKActorRef *) nil_chk([this$0_ self__])) sendWithId:[[ImActorModelModulesMessagesSenderActor_MessageSent alloc] initWithAMPeer:val$peer_ withLong:val$rid_]];
  [((ImActorModelModulesUpdates *) nil_chk([this$0_ updates])) onUpdateReceivedWithId:[[ImActorModelApiBaseSeqUpdate alloc] initWithInt:[((ImActorModelApiRpcResponseSeqDate *) nil_chk(response)) getSeq] withByteArray:[response getState] withInt:ImActorModelApiUpdatesUpdateMessageSent_HEADER withByteArray:[((ImActorModelApiUpdatesUpdateMessageSent *) [[ImActorModelApiUpdatesUpdateMessageSent alloc] initWithImActorModelApiPeer:val$apiPeer_ withLong:val$rid_ withLong:[response getDate]]) toByteArray]]];
}

- (void)onErrorWithAMRpcException:(AMRpcException *)e {
  [((DKActorRef *) nil_chk([this$0_ self__])) sendWithId:[[ImActorModelModulesMessagesSenderActor_MessageError alloc] initWithAMPeer:val$peer_ withLong:val$rid_]];
  [((DKActorRef *) nil_chk([this$0_ getConversationActorWithAMPeer:val$peer_])) sendWithId:[[ImActorModelModulesMessagesConversationActor_MessageError alloc] initWithLong:val$rid_]];
}

- (instancetype)initWithImActorModelModulesMessagesSenderActor:(ImActorModelModulesMessagesSenderActor *)outer$
                                                    withAMPeer:(AMPeer *)capture$0
                                                      withLong:(jlong)capture$1
                                       withImActorModelApiPeer:(ImActorModelApiPeer *)capture$2 {
  this$0_ = outer$;
  val$peer_ = capture$0;
  val$rid_ = capture$1;
  val$apiPeer_ = capture$2;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesMessagesSenderActor_$1 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
  other->val$peer_ = val$peer_;
  other->val$rid_ = val$rid_;
  other->val$apiPeer_ = val$apiPeer_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_$1)
