//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/im/actor/model/modules/file/DownloadTask.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/Configuration.h"
#include "im/actor/model/FileSystemProvider.h"
#include "im/actor/model/api/FileLocation.h"
#include "im/actor/model/api/rpc/RequestGetFile.h"
#include "im/actor/model/api/rpc/ResponseGetFile.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/entity/FileReference.h"
#include "im/actor/model/files/FileReference.h"
#include "im/actor/model/files/OutputFile.h"
#include "im/actor/model/log/Log.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/file/DownloadManager.h"
#include "im/actor/model/modules/file/DownloadTask.h"
#include "im/actor/model/modules/utils/ModuleActor.h"
#include "im/actor/model/network/RpcException.h"

__attribute__((unused)) static void ImActorModelModulesFileDownloadTask_startDownload(ImActorModelModulesFileDownloadTask *self);
__attribute__((unused)) static void ImActorModelModulesFileDownloadTask_completeDownload(ImActorModelModulesFileDownloadTask *self);
__attribute__((unused)) static void ImActorModelModulesFileDownloadTask_checkQueue(ImActorModelModulesFileDownloadTask *self);
__attribute__((unused)) static void ImActorModelModulesFileDownloadTask_downloadPartWithInt_withInt_(ImActorModelModulesFileDownloadTask *self, jint blockIndex, jint fileOffset);
__attribute__((unused)) static void ImActorModelModulesFileDownloadTask_reportError(ImActorModelModulesFileDownloadTask *self);
__attribute__((unused)) static void ImActorModelModulesFileDownloadTask_reportProgressWithFloat_(ImActorModelModulesFileDownloadTask *self, jfloat progress);
__attribute__((unused)) static void ImActorModelModulesFileDownloadTask_reportCompleteWithImActorModelFilesFileReference_(ImActorModelModulesFileDownloadTask *self, id<ImActorModelFilesFileReference> reference);

@interface ImActorModelModulesFileDownloadTask () {
 @public
  NSString *TAG_;
  AMFileReference *fileReference_;
  DKActorRef *manager_;
  id<AMFileSystemProvider> fileSystemProvider_;
  id<ImActorModelFilesFileReference> destReference_;
  id<ImActorModelFilesOutputFile> outputFile_;
  jboolean isCompleted_;
  jint blockSize_;
  jint blocksCount_;
  jint nextBlock_;
  jint currentDownloads_;
  jint downloaded_;
}

- (void)startDownload;

- (void)completeDownload;

- (void)checkQueue;

- (void)downloadPartWithInt:(jint)blockIndex
                    withInt:(jint)fileOffset;

- (void)reportError;

- (void)reportProgressWithFloat:(jfloat)progress;

- (void)reportCompleteWithImActorModelFilesFileReference:(id<ImActorModelFilesFileReference>)reference;
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadTask, TAG_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadTask, fileReference_, AMFileReference *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadTask, manager_, DKActorRef *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadTask, fileSystemProvider_, id<AMFileSystemProvider>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadTask, destReference_, id<ImActorModelFilesFileReference>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadTask, outputFile_, id<ImActorModelFilesOutputFile>)

@interface ImActorModelModulesFileDownloadTask_$1 () {
 @public
  ImActorModelModulesFileDownloadTask *this$0_;
  jint val$blockIndex_;
  jint val$fileOffset_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadTask_$1, this$0_, ImActorModelModulesFileDownloadTask *)

@implementation ImActorModelModulesFileDownloadTask

- (instancetype)initWithAMFileReference:(AMFileReference *)fileReference
                         withDKActorRef:(DKActorRef *)manager
         withImActorModelModulesModules:(ImActorModelModulesModules *)messenger {
  if (self = [super initWithImActorModelModulesModules:messenger]) {
    blockSize_ = 8 * 1024;
    nextBlock_ = 0;
    currentDownloads_ = 0;
    downloaded_ = 0;
    self->TAG_ = JreStrcat("$JC", @"DownloadTask{", [((AMFileReference *) nil_chk(fileReference)) getFileId], '}');
    self->fileReference_ = fileReference;
    self->manager_ = manager;
  }
  return self;
}

- (void)preStart {
  AMLog_dWithNSString_withNSString_(TAG_, @"Creating file...");
  fileSystemProvider_ = [((AMConfiguration *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getConfiguration])) getFileSystemProvider];
  if (fileSystemProvider_ == nil) {
    ImActorModelModulesFileDownloadTask_reportError(self);
    AMLog_dWithNSString_withNSString_(TAG_, @"No FileSystem available");
    return;
  }
  destReference_ = [((id<AMFileSystemProvider>) nil_chk(fileSystemProvider_)) createTempFile];
  if (destReference_ == nil) {
    ImActorModelModulesFileDownloadTask_reportError(self);
    AMLog_dWithNSString_withNSString_(TAG_, @"Unable to create reference");
    return;
  }
  outputFile_ = [((id<ImActorModelFilesFileReference>) nil_chk(destReference_)) openWriteWithInt:[((AMFileReference *) nil_chk(fileReference_)) getFileSize]];
  if (outputFile_ == nil) {
    ImActorModelModulesFileDownloadTask_reportError(self);
    AMLog_dWithNSString_withNSString_(TAG_, @"Unable to write wile");
    return;
  }
  ImActorModelModulesFileDownloadTask_startDownload(self);
}

- (void)startDownload {
  ImActorModelModulesFileDownloadTask_startDownload(self);
}

- (void)completeDownload {
  ImActorModelModulesFileDownloadTask_completeDownload(self);
}

- (void)checkQueue {
  ImActorModelModulesFileDownloadTask_checkQueue(self);
}

- (void)downloadPartWithInt:(jint)blockIndex
                    withInt:(jint)fileOffset {
  ImActorModelModulesFileDownloadTask_downloadPartWithInt_withInt_(self, blockIndex, fileOffset);
}

- (void)reportError {
  ImActorModelModulesFileDownloadTask_reportError(self);
}

- (void)reportProgressWithFloat:(jfloat)progress {
  ImActorModelModulesFileDownloadTask_reportProgressWithFloat_(self, progress);
}

- (void)reportCompleteWithImActorModelFilesFileReference:(id<ImActorModelFilesFileReference>)reference {
  ImActorModelModulesFileDownloadTask_reportCompleteWithImActorModelFilesFileReference_(self, reference);
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileDownloadTask *)other {
  [super copyAllFieldsTo:other];
  other->TAG_ = TAG_;
  other->fileReference_ = fileReference_;
  other->manager_ = manager_;
  other->fileSystemProvider_ = fileSystemProvider_;
  other->destReference_ = destReference_;
  other->outputFile_ = outputFile_;
  other->isCompleted_ = isCompleted_;
  other->blockSize_ = blockSize_;
  other->blocksCount_ = blocksCount_;
  other->nextBlock_ = nextBlock_;
  other->currentDownloads_ = currentDownloads_;
  other->downloaded_ = downloaded_;
}

@end

void ImActorModelModulesFileDownloadTask_startDownload(ImActorModelModulesFileDownloadTask *self) {
  self->blocksCount_ = [((AMFileReference *) nil_chk(self->fileReference_)) getFileSize] / self->blockSize_;
  if ([self->fileReference_ getFileSize] % self->blockSize_ != 0) {
    self->blocksCount_++;
  }
  AMLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$I$", @"Starting downloading ", self->blocksCount_, @" blocks"));
  ImActorModelModulesFileDownloadTask_checkQueue(self);
}

void ImActorModelModulesFileDownloadTask_completeDownload(ImActorModelModulesFileDownloadTask *self) {
  if (self->isCompleted_) {
    return;
  }
  AMLog_dWithNSString_withNSString_(self->TAG_, @"Closing file...");
  if (![((id<ImActorModelFilesOutputFile>) nil_chk(self->outputFile_)) close]) {
    ImActorModelModulesFileDownloadTask_reportError(self);
    return;
  }
  id<ImActorModelFilesFileReference> reference = [((id<AMFileSystemProvider>) nil_chk(self->fileSystemProvider_)) commitTempFileWithImActorModelFilesFileReference:self->destReference_ withAMFileReference:self->fileReference_];
  if (reference == nil) {
    ImActorModelModulesFileDownloadTask_reportError(self);
    return;
  }
  AMLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$$C", @"Complete download {", [((id<ImActorModelFilesFileReference>) nil_chk(reference)) getDescriptor], '}'));
  ImActorModelModulesFileDownloadTask_reportCompleteWithImActorModelFilesFileReference_(self, reference);
}

void ImActorModelModulesFileDownloadTask_checkQueue(ImActorModelModulesFileDownloadTask *self) {
  if (self->isCompleted_) {
    return;
  }
  AMLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$ICI", @"checkQueue ", self->currentDownloads_, '/', self->nextBlock_));
  if (self->currentDownloads_ == 0 && self->nextBlock_ >= self->blocksCount_) {
    ImActorModelModulesFileDownloadTask_completeDownload(self);
  }
  else if (self->currentDownloads_ < ImActorModelModulesFileDownloadTask_SIM_BLOCKS_COUNT && self->nextBlock_ < self->blocksCount_) {
    self->currentDownloads_++;
    jint blockIndex = self->nextBlock_++;
    jint offset = blockIndex * self->blockSize_;
    AMLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$I$", @"Starting part #", blockIndex, @" download"));
    ImActorModelModulesFileDownloadTask_downloadPartWithInt_withInt_(self, blockIndex, offset);
    ImActorModelModulesFileDownloadTask_checkQueue(self);
  }
  else {
    AMLog_dWithNSString_withNSString_(self->TAG_, @"Task queue is full");
  }
}

void ImActorModelModulesFileDownloadTask_downloadPartWithInt_withInt_(ImActorModelModulesFileDownloadTask *self, jint blockIndex, jint fileOffset) {
  [self requestWithImActorModelNetworkParserRequest:[[ImActorModelApiRpcRequestGetFile alloc] initWithImActorModelApiFileLocation:[[ImActorModelApiFileLocation alloc] initWithLong:[((AMFileReference *) nil_chk(self->fileReference_)) getFileId] withLong:[self->fileReference_ getAccessHash]] withInt:fileOffset withInt:self->blockSize_] withAMRpcCallback:[[ImActorModelModulesFileDownloadTask_$1 alloc] initWithImActorModelModulesFileDownloadTask:self withInt:blockIndex withInt:fileOffset]];
}

void ImActorModelModulesFileDownloadTask_reportError(ImActorModelModulesFileDownloadTask *self) {
  if (self->isCompleted_) {
    return;
  }
  self->isCompleted_ = YES;
  [((DKActorRef *) nil_chk(self->manager_)) sendWithId:[[ImActorModelModulesFileDownloadManager_OnDownloadedError alloc] initWithLong:[((AMFileReference *) nil_chk(self->fileReference_)) getFileId]]];
}

void ImActorModelModulesFileDownloadTask_reportProgressWithFloat_(ImActorModelModulesFileDownloadTask *self, jfloat progress) {
  if (self->isCompleted_) {
    return;
  }
  [((DKActorRef *) nil_chk(self->manager_)) sendWithId:[[ImActorModelModulesFileDownloadManager_OnDownloadProgress alloc] initWithLong:[((AMFileReference *) nil_chk(self->fileReference_)) getFileId] withFloat:progress]];
}

void ImActorModelModulesFileDownloadTask_reportCompleteWithImActorModelFilesFileReference_(ImActorModelModulesFileDownloadTask *self, id<ImActorModelFilesFileReference> reference) {
  if (self->isCompleted_) {
    return;
  }
  self->isCompleted_ = YES;
  [((DKActorRef *) nil_chk(self->manager_)) sendWithId:[[ImActorModelModulesFileDownloadManager_OnDownloaded alloc] initWithLong:[((AMFileReference *) nil_chk(self->fileReference_)) getFileId] withImActorModelFilesFileReference:reference]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileDownloadTask)

@implementation ImActorModelModulesFileDownloadTask_$1

- (void)onResultWithImActorModelNetworkParserResponse:(ImActorModelApiRpcResponseGetFile *)response {
  this$0_->downloaded_++;
  AMLog_dWithNSString_withNSString_(this$0_->TAG_, JreStrcat("$I$", @"Download part #", val$blockIndex_, @" completed"));
  if (![((id<ImActorModelFilesOutputFile>) nil_chk(this$0_->outputFile_)) writeWithInt:val$fileOffset_ withByteArray:[((ImActorModelApiRpcResponseGetFile *) nil_chk(response)) getPayload] withInt:0 withInt:((IOSByteArray *) nil_chk([response getPayload]))->size_]) {
    ImActorModelModulesFileDownloadTask_reportError(this$0_);
    return;
  }
  this$0_->currentDownloads_--;
  ImActorModelModulesFileDownloadTask_reportProgressWithFloat_(this$0_, this$0_->downloaded_ / (jfloat) this$0_->blocksCount_);
  ImActorModelModulesFileDownloadTask_checkQueue(this$0_);
}

- (void)onErrorWithAMRpcException:(AMRpcException *)e {
  AMLog_dWithNSString_withNSString_(this$0_->TAG_, JreStrcat("$I$", @"Download part #", val$blockIndex_, @" failure"));
  ImActorModelModulesFileDownloadTask_reportError(this$0_);
}

- (instancetype)initWithImActorModelModulesFileDownloadTask:(ImActorModelModulesFileDownloadTask *)outer$
                                                    withInt:(jint)capture$0
                                                    withInt:(jint)capture$1 {
  this$0_ = outer$;
  val$blockIndex_ = capture$0;
  val$fileOffset_ = capture$1;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileDownloadTask_$1 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
  other->val$blockIndex_ = val$blockIndex_;
  other->val$fileOffset_ = val$fileOffset_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileDownloadTask_$1)
