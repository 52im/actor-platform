//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/im/actor/model/modules/file/DownloadManager.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "im/actor/model/Configuration.h"
#include "im/actor/model/FileSystemProvider.h"
#include "im/actor/model/droidkit/actors/Actor.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/droidkit/actors/ActorSystem.h"
#include "im/actor/model/droidkit/actors/Props.h"
#include "im/actor/model/droidkit/actors/messages/PoisonPill.h"
#include "im/actor/model/droidkit/engine/KeyValueEngine.h"
#include "im/actor/model/entity/FileReference.h"
#include "im/actor/model/files/FileSystemReference.h"
#include "im/actor/model/log/Log.h"
#include "im/actor/model/modules/Files.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/file/DownloadCallback.h"
#include "im/actor/model/modules/file/DownloadManager.h"
#include "im/actor/model/modules/file/DownloadTask.h"
#include "im/actor/model/modules/file/Downloaded.h"
#include "im/actor/model/modules/utils/ModuleActor.h"
#include "im/actor/model/modules/utils/RandomUtils.h"
#include "java/util/ArrayList.h"

__attribute__((unused)) static void ImActorModelModulesFileDownloadManager_checkQueue(ImActorModelModulesFileDownloadManager *self);
__attribute__((unused)) static ImActorModelModulesFileDownloadManager_QueueItem *ImActorModelModulesFileDownloadManager_findItemWithLong_(ImActorModelModulesFileDownloadManager *self, jlong id_);
__attribute__((unused)) static void ImActorModelModulesFileDownloadManager_promoteWithLong_(ImActorModelModulesFileDownloadManager *self, jlong id_);

@interface ImActorModelModulesFileDownloadManager () {
 @public
  JavaUtilArrayList *queue_;
  id<DKKeyValueEngine> downloaded_;
}

- (void)checkQueue;

- (ImActorModelModulesFileDownloadManager_QueueItem *)findItemWithLong:(jlong)id_;

- (void)promoteWithLong:(jlong)id_;
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadManager, queue_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadManager, downloaded_, id<DKKeyValueEngine>)

@interface ImActorModelModulesFileDownloadManager_QueueItem () {
 @public
  AMFileReference *fileReference_;
  jboolean isStopped_;
  JavaUtilArrayList *callbacks_;
  jboolean isStarted_;
  jfloat progress_;
  DKActorRef *taskRef_;
}
- (instancetype)initWithImActorModelModulesFileDownloadManager:(ImActorModelModulesFileDownloadManager *)outer$
                                           withAMFileReference:(AMFileReference *)fileReference;
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadManager_QueueItem, fileReference_, AMFileReference *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadManager_QueueItem, callbacks_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadManager_QueueItem, taskRef_, DKActorRef *)

@interface ImActorModelModulesFileDownloadManager_RequestState () {
 @public
  jlong fileId_;
  id<ImActorModelModulesFileDownloadCallback> callback_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadManager_RequestState, callback_, id<ImActorModelModulesFileDownloadCallback>)

@interface ImActorModelModulesFileDownloadManager_BindDownload () {
 @public
  AMFileReference *fileReference_;
  jboolean isAutostart__;
  id<ImActorModelModulesFileDownloadCallback> callback_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadManager_BindDownload, fileReference_, AMFileReference *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadManager_BindDownload, callback_, id<ImActorModelModulesFileDownloadCallback>)

@interface ImActorModelModulesFileDownloadManager_StartDownload () {
 @public
  AMFileReference *fileReference_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadManager_StartDownload, fileReference_, AMFileReference *)

@interface ImActorModelModulesFileDownloadManager_CancelDownload () {
 @public
  jlong fileId_;
}
@end

@interface ImActorModelModulesFileDownloadManager_UnbindDownload () {
 @public
  jlong fileId_;
  jboolean isAutocancel__;
  id<ImActorModelModulesFileDownloadCallback> callback_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadManager_UnbindDownload, callback_, id<ImActorModelModulesFileDownloadCallback>)

@interface ImActorModelModulesFileDownloadManager_OnDownloadProgress () {
 @public
  jlong fileId_;
  jfloat progress_;
}
@end

@interface ImActorModelModulesFileDownloadManager_OnDownloaded () {
 @public
  jlong fileId_;
  id<AMFileSystemReference> reference_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadManager_OnDownloaded, reference_, id<AMFileSystemReference>)

@interface ImActorModelModulesFileDownloadManager_OnDownloadedError () {
 @public
  jlong fileId_;
}
@end

@interface ImActorModelModulesFileDownloadManager_$1 () {
 @public
  ImActorModelModulesFileDownloadManager *this$0_;
  ImActorModelModulesFileDownloadManager_QueueItem *val$finalPendingQueue_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadManager_$1, this$0_, ImActorModelModulesFileDownloadManager *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileDownloadManager_$1, val$finalPendingQueue_, ImActorModelModulesFileDownloadManager_QueueItem *)

@implementation ImActorModelModulesFileDownloadManager

NSString * ImActorModelModulesFileDownloadManager_TAG_ = @"DownloadManager";

- (instancetype)initWithImActorModelModulesModules:(ImActorModelModulesModules *)messenger {
  if (self = [super initWithImActorModelModulesModules:messenger]) {
    queue_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)preStart {
  [super preStart];
  downloaded_ = [((ImActorModelModulesFiles *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getFilesModule])) getDownloadedEngine];
}

- (void)requestStateWithLong:(jlong)fileId
withImActorModelModulesFileDownloadCallback:(id<ImActorModelModulesFileDownloadCallback>)callback {
  AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, JreStrcat("$J", @"Requesting state file #", fileId));
  ImActorModelModulesFileDownloaded *downloaded1 = [((id<DKKeyValueEngine>) nil_chk(downloaded_)) getValueWithLong:fileId];
  if (downloaded1 != nil) {
    id<AMFileSystemProvider> provider = [((AMConfiguration *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getConfiguration])) getFileSystemProvider];
    id<AMFileSystemReference> reference = [((id<AMFileSystemProvider>) nil_chk(provider)) fileFromDescriptor:[downloaded1 getDescriptor]];
    jboolean isExist = [((id<AMFileSystemReference>) nil_chk(reference)) isExist];
    jint fileSize = [reference getSize];
    if (isExist && fileSize == [downloaded1 getFileSize]) {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- Downloaded");
      [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(callback)) onDownloadedWithAMFileSystemReference:[((id<AMFileSystemProvider>) nil_chk([((AMConfiguration *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getConfiguration])) getFileSystemProvider])) fileFromDescriptor:[downloaded1 getDescriptor]]];
      return;
    }
    else {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- File is corrupted");
      if (!isExist) {
        AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- File not found");
      }
      if (fileSize != [downloaded1 getFileSize]) {
        AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, JreStrcat("$I$I", @"- Incorrect file size. Expected: ", [downloaded1 getFileSize], @", got: ", fileSize));
      }
      [downloaded_ removeItemWithLong:[downloaded1 getFileId]];
    }
  }
  ImActorModelModulesFileDownloadManager_QueueItem *queueItem = ImActorModelModulesFileDownloadManager_findItemWithLong_(self, fileId);
  if (queueItem == nil) {
    [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(callback)) onNotDownloaded];
  }
  else {
    if (queueItem->isStarted_) {
      [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(callback)) onDownloadingWithFloat:queueItem->progress_];
    }
    else if (queueItem->isStopped_) {
      [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(callback)) onNotDownloaded];
    }
    else {
      [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(callback)) onDownloadingWithFloat:0];
    }
  }
}

- (void)bindDownloadWithAMFileReference:(AMFileReference *)fileReference
                            withBoolean:(jboolean)autoStart
withImActorModelModulesFileDownloadCallback:(id<ImActorModelModulesFileDownloadCallback>)callback {
  AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, JreStrcat("$J", @"Binding file #", [((AMFileReference *) nil_chk(fileReference)) getFileId]));
  ImActorModelModulesFileDownloaded *downloaded1 = [((id<DKKeyValueEngine>) nil_chk(downloaded_)) getValueWithLong:[fileReference getFileId]];
  if (downloaded1 != nil) {
    id<AMFileSystemProvider> provider = [((AMConfiguration *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getConfiguration])) getFileSystemProvider];
    id<AMFileSystemReference> reference = [((id<AMFileSystemProvider>) nil_chk(provider)) fileFromDescriptor:[downloaded1 getDescriptor]];
    if ([((id<AMFileSystemReference>) nil_chk(reference)) isExist] && [reference getSize] == [downloaded1 getFileSize]) {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- Downloaded");
      [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(callback)) onDownloadedWithAMFileSystemReference:[((id<AMFileSystemProvider>) nil_chk([((AMConfiguration *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getConfiguration])) getFileSystemProvider])) fileFromDescriptor:[downloaded1 getDescriptor]]];
      return;
    }
    else {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- File is corrupted");
      [downloaded_ removeItemWithLong:[downloaded1 getFileId]];
    }
  }
  ImActorModelModulesFileDownloadManager_QueueItem *queueItem = ImActorModelModulesFileDownloadManager_findItemWithLong_(self, [fileReference getFileId]);
  if (queueItem == nil) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- Adding to queue");
    queueItem = [[ImActorModelModulesFileDownloadManager_QueueItem alloc] initWithImActorModelModulesFileDownloadManager:self withAMFileReference:fileReference];
    [((JavaUtilArrayList *) nil_chk(queueItem->callbacks_)) addWithId:callback];
    if (autoStart) {
      queueItem->isStopped_ = NO;
      [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(callback)) onDownloadingWithFloat:0];
    }
    else {
      queueItem->isStopped_ = YES;
      [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(callback)) onNotDownloaded];
    }
    [((JavaUtilArrayList *) nil_chk(queue_)) addWithInt:0 withId:queueItem];
  }
  else {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- Promoting in queue");
    ImActorModelModulesFileDownloadManager_promoteWithLong_(self, [fileReference getFileId]);
    if (![((JavaUtilArrayList *) nil_chk(queueItem->callbacks_)) containsWithId:callback]) {
      [queueItem->callbacks_ addWithId:callback];
    }
    if (queueItem->isStopped_) {
      [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(callback)) onNotDownloaded];
    }
    else {
      if (queueItem->isStarted_) {
        [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(callback)) onDownloadingWithFloat:queueItem->progress_];
      }
      else {
        [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(callback)) onDownloadingWithFloat:0];
      }
    }
  }
  ImActorModelModulesFileDownloadManager_checkQueue(self);
}

- (void)startDownloadWithAMFileReference:(AMFileReference *)fileReference {
  AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, JreStrcat("$J", @"Starting download #", [((AMFileReference *) nil_chk(fileReference)) getFileId]));
  ImActorModelModulesFileDownloadManager_QueueItem *queueItem = ImActorModelModulesFileDownloadManager_findItemWithLong_(self, [fileReference getFileId]);
  if (queueItem == nil) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- Adding to queue");
    queueItem = [[ImActorModelModulesFileDownloadManager_QueueItem alloc] initWithImActorModelModulesFileDownloadManager:self withAMFileReference:fileReference];
    queueItem->isStopped_ = NO;
    [((JavaUtilArrayList *) nil_chk(queue_)) addWithInt:0 withId:queueItem];
  }
  else {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- Promoting in queue");
    if (queueItem->isStopped_) {
      queueItem->isStopped_ = NO;
      for (id<ImActorModelModulesFileDownloadCallback> __strong callback in nil_chk(queueItem->callbacks_)) {
        [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(callback)) onDownloadingWithFloat:0];
      }
    }
    ImActorModelModulesFileDownloadManager_promoteWithLong_(self, [fileReference getFileId]);
  }
  ImActorModelModulesFileDownloadManager_checkQueue(self);
}

- (void)cancelDownloadWithLong:(jlong)fileId {
  AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, JreStrcat("$J", @"Stopping download #", fileId));
  ImActorModelModulesFileDownloadManager_QueueItem *queueItem = ImActorModelModulesFileDownloadManager_findItemWithLong_(self, fileId);
  if (queueItem == nil) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- Not present in queue");
  }
  else {
    if (queueItem->isStarted_) {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- Stopping actor");
      [((DKActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:ImActorModelDroidkitActorsMessagesPoisonPill_get_INSTANCE_()];
      queueItem->taskRef_ = nil;
      queueItem->isStarted_ = NO;
    }
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- Marking as stopped");
    queueItem->isStopped_ = YES;
    for (id<ImActorModelModulesFileDownloadCallback> __strong callback in nil_chk(queueItem->callbacks_)) {
      [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(callback)) onNotDownloaded];
    }
  }
  ImActorModelModulesFileDownloadManager_checkQueue(self);
}

- (void)unbindDownloadWithLong:(jlong)fileId
                   withBoolean:(jboolean)autoCancel
withImActorModelModulesFileDownloadCallback:(id<ImActorModelModulesFileDownloadCallback>)callback {
  AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, JreStrcat("$J", @"Unbind file #", fileId));
  ImActorModelModulesFileDownloadManager_QueueItem *queueItem = ImActorModelModulesFileDownloadManager_findItemWithLong_(self, fileId);
  if (queueItem == nil) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- Not present in queue");
  }
  else {
    if (autoCancel) {
      if (queueItem->isStarted_) {
        AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- Stopping actor");
        [((DKActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:ImActorModelDroidkitActorsMessagesPoisonPill_get_INSTANCE_()];
        queueItem->taskRef_ = nil;
        queueItem->isStarted_ = NO;
      }
      if (!queueItem->isStopped_) {
        AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- Marking as stopped");
        queueItem->isStopped_ = YES;
        for (id<ImActorModelModulesFileDownloadCallback> __strong c in nil_chk(queueItem->callbacks_)) {
          if (c != callback) {
            [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(c)) onNotDownloaded];
          }
        }
      }
      [((JavaUtilArrayList *) nil_chk(queue_)) removeWithId:queueItem];
    }
    else {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- Removing callback");
      [((JavaUtilArrayList *) nil_chk(queueItem->callbacks_)) removeWithId:callback];
    }
  }
  ImActorModelModulesFileDownloadManager_checkQueue(self);
}

- (void)checkQueue {
  ImActorModelModulesFileDownloadManager_checkQueue(self);
}

- (void)onDownloadProgressWithLong:(jlong)fileId
                         withFloat:(jfloat)progress {
  AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, JreStrcat("$JCF", @"onDownloadProgress file #", fileId, ' ', progress));
  ImActorModelModulesFileDownloadManager_QueueItem *queueItem = ImActorModelModulesFileDownloadManager_findItemWithLong_(self, fileId);
  if (queueItem == nil) {
    return;
  }
  if (!((ImActorModelModulesFileDownloadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
    return;
  }
  queueItem->progress_ = progress;
  for (id<ImActorModelModulesFileDownloadCallback> __strong fileCallback in nil_chk(queueItem->callbacks_)) {
    [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(fileCallback)) onDownloadingWithFloat:progress];
  }
}

- (void)onDownloadedWithLong:(jlong)fileId
   withAMFileSystemReference:(id<AMFileSystemReference>)reference {
  AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, JreStrcat("$J", @"onDownloaded file #", fileId));
  ImActorModelModulesFileDownloadManager_QueueItem *queueItem = ImActorModelModulesFileDownloadManager_findItemWithLong_(self, fileId);
  if (queueItem == nil) {
    return;
  }
  if (!((ImActorModelModulesFileDownloadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
    return;
  }
  [((id<DKKeyValueEngine>) nil_chk(downloaded_)) addOrUpdateItemWithDKKeyValueItem:[[ImActorModelModulesFileDownloaded alloc] initWithLong:[((AMFileReference *) nil_chk(queueItem->fileReference_)) getFileId] withInt:[queueItem->fileReference_ getFileSize] withNSString:[((id<AMFileSystemReference>) nil_chk(reference)) getDescriptor]]];
  [((JavaUtilArrayList *) nil_chk(queue_)) removeWithId:queueItem];
  [((DKActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:ImActorModelDroidkitActorsMessagesPoisonPill_get_INSTANCE_()];
  for (id<ImActorModelModulesFileDownloadCallback> __strong fileCallback in nil_chk(queueItem->callbacks_)) {
    [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(fileCallback)) onDownloadedWithAMFileSystemReference:reference];
  }
  ImActorModelModulesFileDownloadManager_checkQueue(self);
}

- (void)onDownloadErrorWithLong:(jlong)fileId {
  AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, JreStrcat("$J", @"onDownloadError file #", fileId));
  ImActorModelModulesFileDownloadManager_QueueItem *queueItem = ImActorModelModulesFileDownloadManager_findItemWithLong_(self, fileId);
  if (queueItem == nil) {
    return;
  }
  if (!((ImActorModelModulesFileDownloadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
    return;
  }
  [((DKActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:ImActorModelDroidkitActorsMessagesPoisonPill_get_INSTANCE_()];
  queueItem->isStopped_ = YES;
  queueItem->isStarted_ = NO;
  for (id<ImActorModelModulesFileDownloadCallback> __strong fileCallback in nil_chk(queueItem->callbacks_)) {
    [((id<ImActorModelModulesFileDownloadCallback>) nil_chk(fileCallback)) onNotDownloaded];
  }
  ImActorModelModulesFileDownloadManager_checkQueue(self);
}

- (ImActorModelModulesFileDownloadManager_QueueItem *)findItemWithLong:(jlong)id_ {
  return ImActorModelModulesFileDownloadManager_findItemWithLong_(self, id_);
}

- (void)promoteWithLong:(jlong)id_ {
  ImActorModelModulesFileDownloadManager_promoteWithLong_(self, id_);
}

- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[ImActorModelModulesFileDownloadManager_BindDownload class]]) {
    ImActorModelModulesFileDownloadManager_BindDownload *requestDownload = (ImActorModelModulesFileDownloadManager_BindDownload *) check_class_cast(message, [ImActorModelModulesFileDownloadManager_BindDownload class]);
    [self bindDownloadWithAMFileReference:[((ImActorModelModulesFileDownloadManager_BindDownload *) nil_chk(requestDownload)) getFileReference] withBoolean:[requestDownload isAutostart] withImActorModelModulesFileDownloadCallback:[requestDownload getCallback]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileDownloadManager_CancelDownload class]]) {
    ImActorModelModulesFileDownloadManager_CancelDownload *cancelDownload = (ImActorModelModulesFileDownloadManager_CancelDownload *) check_class_cast(message, [ImActorModelModulesFileDownloadManager_CancelDownload class]);
    [self cancelDownloadWithLong:[((ImActorModelModulesFileDownloadManager_CancelDownload *) nil_chk(cancelDownload)) getFileId]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileDownloadManager_UnbindDownload class]]) {
    ImActorModelModulesFileDownloadManager_UnbindDownload *unbindDownload = (ImActorModelModulesFileDownloadManager_UnbindDownload *) check_class_cast(message, [ImActorModelModulesFileDownloadManager_UnbindDownload class]);
    [self unbindDownloadWithLong:[((ImActorModelModulesFileDownloadManager_UnbindDownload *) nil_chk(unbindDownload)) getFileId] withBoolean:[unbindDownload isAutocancel] withImActorModelModulesFileDownloadCallback:[unbindDownload getCallback]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileDownloadManager_StartDownload class]]) {
    ImActorModelModulesFileDownloadManager_StartDownload *startDownload = (ImActorModelModulesFileDownloadManager_StartDownload *) check_class_cast(message, [ImActorModelModulesFileDownloadManager_StartDownload class]);
    [self startDownloadWithAMFileReference:[((ImActorModelModulesFileDownloadManager_StartDownload *) nil_chk(startDownload)) getFileReference]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileDownloadManager_OnDownloadProgress class]]) {
    ImActorModelModulesFileDownloadManager_OnDownloadProgress *downloadProgress = (ImActorModelModulesFileDownloadManager_OnDownloadProgress *) check_class_cast(message, [ImActorModelModulesFileDownloadManager_OnDownloadProgress class]);
    [self onDownloadProgressWithLong:[((ImActorModelModulesFileDownloadManager_OnDownloadProgress *) nil_chk(downloadProgress)) getFileId] withFloat:[downloadProgress getProgress]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileDownloadManager_OnDownloaded class]]) {
    ImActorModelModulesFileDownloadManager_OnDownloaded *onDownloaded = (ImActorModelModulesFileDownloadManager_OnDownloaded *) check_class_cast(message, [ImActorModelModulesFileDownloadManager_OnDownloaded class]);
    [self onDownloadedWithLong:[((ImActorModelModulesFileDownloadManager_OnDownloaded *) nil_chk(onDownloaded)) getFileId] withAMFileSystemReference:[onDownloaded getReference]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileDownloadManager_OnDownloadedError class]]) {
    ImActorModelModulesFileDownloadManager_OnDownloadedError *error = (ImActorModelModulesFileDownloadManager_OnDownloadedError *) check_class_cast(message, [ImActorModelModulesFileDownloadManager_OnDownloadedError class]);
    [self onDownloadErrorWithLong:[((ImActorModelModulesFileDownloadManager_OnDownloadedError *) nil_chk(error)) getFileId]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileDownloadManager_RequestState class]]) {
    ImActorModelModulesFileDownloadManager_RequestState *requestState = (ImActorModelModulesFileDownloadManager_RequestState *) check_class_cast(message, [ImActorModelModulesFileDownloadManager_RequestState class]);
    [self requestStateWithLong:[((ImActorModelModulesFileDownloadManager_RequestState *) nil_chk(requestState)) getFileId] withImActorModelModulesFileDownloadCallback:[requestState getCallback]];
  }
  else {
    [self dropWithId:message];
  }
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileDownloadManager *)other {
  [super copyAllFieldsTo:other];
  other->queue_ = queue_;
  other->downloaded_ = downloaded_;
}

@end

void ImActorModelModulesFileDownloadManager_checkQueue(ImActorModelModulesFileDownloadManager *self) {
  AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- Checking queue");
  jint activeDownloads = 0;
  for (ImActorModelModulesFileDownloadManager_QueueItem * __strong queueItem in nil_chk(self->queue_)) {
    if (((ImActorModelModulesFileDownloadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
      activeDownloads++;
    }
  }
  if (activeDownloads >= ImActorModelModulesFileDownloadManager_SIM_MAX_DOWNLOADS) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- Already have max number of simultaneous downloads");
    return;
  }
  ImActorModelModulesFileDownloadManager_QueueItem *pendingQueue = nil;
  for (ImActorModelModulesFileDownloadManager_QueueItem * __strong queueItem in self->queue_) {
    if (!((ImActorModelModulesFileDownloadManager_QueueItem *) nil_chk(queueItem))->isStarted_ && !queueItem->isStopped_) {
      pendingQueue = queueItem;
      break;
    }
  }
  if (pendingQueue == nil) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, @"- No work for downloading");
    return;
  }
  AMLog_dWithNSString_withNSString_(ImActorModelModulesFileDownloadManager_TAG_, JreStrcat("$J", @"- Starting download file #", [((AMFileReference *) nil_chk(((ImActorModelModulesFileDownloadManager_QueueItem *) nil_chk(pendingQueue))->fileReference_)) getFileId]));
  pendingQueue->isStarted_ = YES;
  ImActorModelModulesFileDownloadManager_QueueItem *finalPendingQueue = pendingQueue;
  pendingQueue->taskRef_ = [((DKActorSystem *) nil_chk([self system])) actorOfWithDKProps:DKProps_createWithIOSClass_withDKActorCreator_(ImActorModelModulesFileDownloadTask_class_(), [[ImActorModelModulesFileDownloadManager_$1 alloc] initWithImActorModelModulesFileDownloadManager:self withImActorModelModulesFileDownloadManager_QueueItem:finalPendingQueue]) withNSString:JreStrcat("$J", @"actor/download/task_", ImActorModelModulesUtilsRandomUtils_nextRid())];
}

ImActorModelModulesFileDownloadManager_QueueItem *ImActorModelModulesFileDownloadManager_findItemWithLong_(ImActorModelModulesFileDownloadManager *self, jlong id_) {
  for (ImActorModelModulesFileDownloadManager_QueueItem * __strong q in nil_chk(self->queue_)) {
    if ([((AMFileReference *) nil_chk(((ImActorModelModulesFileDownloadManager_QueueItem *) nil_chk(q))->fileReference_)) getFileId] == id_) {
      return q;
    }
  }
  return nil;
}

void ImActorModelModulesFileDownloadManager_promoteWithLong_(ImActorModelModulesFileDownloadManager *self, jlong id_) {
  for (ImActorModelModulesFileDownloadManager_QueueItem * __strong q in nil_chk(self->queue_)) {
    if ([((AMFileReference *) nil_chk(((ImActorModelModulesFileDownloadManager_QueueItem *) nil_chk(q))->fileReference_)) getFileId] == id_) {
      if (!q->isStarted_) {
        [self->queue_ removeWithId:q];
        [self->queue_ addWithInt:0 withId:q];
      }
      return;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileDownloadManager)

@implementation ImActorModelModulesFileDownloadManager_QueueItem

- (instancetype)initWithImActorModelModulesFileDownloadManager:(ImActorModelModulesFileDownloadManager *)outer$
                                           withAMFileReference:(AMFileReference *)fileReference {
  if (self = [super init]) {
    callbacks_ = [[JavaUtilArrayList alloc] init];
    self->fileReference_ = fileReference;
  }
  return self;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileDownloadManager_QueueItem *)other {
  [super copyAllFieldsTo:other];
  other->fileReference_ = fileReference_;
  other->isStopped_ = isStopped_;
  other->callbacks_ = callbacks_;
  other->isStarted_ = isStarted_;
  other->progress_ = progress_;
  other->taskRef_ = taskRef_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileDownloadManager_QueueItem)

@implementation ImActorModelModulesFileDownloadManager_RequestState

- (instancetype)initWithLong:(jlong)fileId
withImActorModelModulesFileDownloadCallback:(id<ImActorModelModulesFileDownloadCallback>)callback {
  if (self = [super init]) {
    self->fileId_ = fileId;
    self->callback_ = callback;
  }
  return self;
}

- (jlong)getFileId {
  return fileId_;
}

- (id<ImActorModelModulesFileDownloadCallback>)getCallback {
  return callback_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileDownloadManager_RequestState *)other {
  [super copyAllFieldsTo:other];
  other->fileId_ = fileId_;
  other->callback_ = callback_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileDownloadManager_RequestState)

@implementation ImActorModelModulesFileDownloadManager_BindDownload

- (instancetype)initWithAMFileReference:(AMFileReference *)fileReference
                            withBoolean:(jboolean)isAutostart
withImActorModelModulesFileDownloadCallback:(id<ImActorModelModulesFileDownloadCallback>)callback {
  if (self = [super init]) {
    self->fileReference_ = fileReference;
    self->isAutostart__ = isAutostart;
    self->callback_ = callback;
  }
  return self;
}

- (AMFileReference *)getFileReference {
  return fileReference_;
}

- (jboolean)isAutostart {
  return isAutostart__;
}

- (id<ImActorModelModulesFileDownloadCallback>)getCallback {
  return callback_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileDownloadManager_BindDownload *)other {
  [super copyAllFieldsTo:other];
  other->fileReference_ = fileReference_;
  other->isAutostart__ = isAutostart__;
  other->callback_ = callback_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileDownloadManager_BindDownload)

@implementation ImActorModelModulesFileDownloadManager_StartDownload

- (instancetype)initWithAMFileReference:(AMFileReference *)fileReference {
  if (self = [super init]) {
    self->fileReference_ = fileReference;
  }
  return self;
}

- (AMFileReference *)getFileReference {
  return fileReference_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileDownloadManager_StartDownload *)other {
  [super copyAllFieldsTo:other];
  other->fileReference_ = fileReference_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileDownloadManager_StartDownload)

@implementation ImActorModelModulesFileDownloadManager_CancelDownload

- (instancetype)initWithLong:(jlong)fileId {
  if (self = [super init]) {
    self->fileId_ = fileId;
  }
  return self;
}

- (jlong)getFileId {
  return fileId_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileDownloadManager_CancelDownload *)other {
  [super copyAllFieldsTo:other];
  other->fileId_ = fileId_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileDownloadManager_CancelDownload)

@implementation ImActorModelModulesFileDownloadManager_UnbindDownload

- (instancetype)initWithLong:(jlong)fileId
                 withBoolean:(jboolean)isAutocancel
withImActorModelModulesFileDownloadCallback:(id<ImActorModelModulesFileDownloadCallback>)callback {
  if (self = [super init]) {
    self->fileId_ = fileId;
    self->isAutocancel__ = isAutocancel;
    self->callback_ = callback;
  }
  return self;
}

- (jlong)getFileId {
  return fileId_;
}

- (id<ImActorModelModulesFileDownloadCallback>)getCallback {
  return callback_;
}

- (jboolean)isAutocancel {
  return isAutocancel__;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileDownloadManager_UnbindDownload *)other {
  [super copyAllFieldsTo:other];
  other->fileId_ = fileId_;
  other->isAutocancel__ = isAutocancel__;
  other->callback_ = callback_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileDownloadManager_UnbindDownload)

@implementation ImActorModelModulesFileDownloadManager_OnDownloadProgress

- (instancetype)initWithLong:(jlong)fileId
                   withFloat:(jfloat)progress {
  if (self = [super init]) {
    self->fileId_ = fileId;
    self->progress_ = progress;
  }
  return self;
}

- (jlong)getFileId {
  return fileId_;
}

- (jfloat)getProgress {
  return progress_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileDownloadManager_OnDownloadProgress *)other {
  [super copyAllFieldsTo:other];
  other->fileId_ = fileId_;
  other->progress_ = progress_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileDownloadManager_OnDownloadProgress)

@implementation ImActorModelModulesFileDownloadManager_OnDownloaded

- (instancetype)initWithLong:(jlong)fileId
   withAMFileSystemReference:(id<AMFileSystemReference>)reference {
  if (self = [super init]) {
    self->fileId_ = fileId;
    self->reference_ = reference;
  }
  return self;
}

- (jlong)getFileId {
  return fileId_;
}

- (id<AMFileSystemReference>)getReference {
  return reference_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileDownloadManager_OnDownloaded *)other {
  [super copyAllFieldsTo:other];
  other->fileId_ = fileId_;
  other->reference_ = reference_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileDownloadManager_OnDownloaded)

@implementation ImActorModelModulesFileDownloadManager_OnDownloadedError

- (instancetype)initWithLong:(jlong)fileId {
  if (self = [super init]) {
    self->fileId_ = fileId;
  }
  return self;
}

- (jlong)getFileId {
  return fileId_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileDownloadManager_OnDownloadedError *)other {
  [super copyAllFieldsTo:other];
  other->fileId_ = fileId_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileDownloadManager_OnDownloadedError)

@implementation ImActorModelModulesFileDownloadManager_$1

- (ImActorModelModulesFileDownloadTask *)create {
  return [[ImActorModelModulesFileDownloadTask alloc] initWithAMFileReference:((ImActorModelModulesFileDownloadManager_QueueItem *) nil_chk(val$finalPendingQueue_))->fileReference_ withDKActorRef:[this$0_ self__] withImActorModelModulesModules:[this$0_ modules]];
}

- (instancetype)initWithImActorModelModulesFileDownloadManager:(ImActorModelModulesFileDownloadManager *)outer$
          withImActorModelModulesFileDownloadManager_QueueItem:(ImActorModelModulesFileDownloadManager_QueueItem *)capture$0 {
  this$0_ = outer$;
  val$finalPendingQueue_ = capture$0;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileDownloadManager_$1 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
  other->val$finalPendingQueue_ = val$finalPendingQueue_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileDownloadManager_$1)
