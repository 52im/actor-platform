//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/im/actor/model/modules/file/UploadTask.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/Configuration.h"
#include "im/actor/model/FileSystemProvider.h"
#include "im/actor/model/api/FileLocation.h"
#include "im/actor/model/api/UploadConfig.h"
#include "im/actor/model/api/rpc/RequestCompleteUpload.h"
#include "im/actor/model/api/rpc/RequestStartUpload.h"
#include "im/actor/model/api/rpc/RequestUploadPart.h"
#include "im/actor/model/api/rpc/ResponseCompleteUpload.h"
#include "im/actor/model/api/rpc/ResponseStartUpload.h"
#include "im/actor/model/api/rpc/ResponseVoid.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/entity/FileLocation.h"
#include "im/actor/model/files/FileReference.h"
#include "im/actor/model/files/InputFile.h"
#include "im/actor/model/files/OutputFile.h"
#include "im/actor/model/log/Log.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/file/UploadManager.h"
#include "im/actor/model/modules/file/UploadTask.h"
#include "im/actor/model/modules/messages/entity/EntityConverter.h"
#include "im/actor/model/modules/utils/ModuleActor.h"
#include "im/actor/model/network/RpcException.h"
#include "java/util/zip/CRC32.h"

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_startUpload(ImActorModelModulesFileUploadTask *self);
__attribute__((unused)) static void ImActorModelModulesFileUploadTask_checkQueue(ImActorModelModulesFileUploadTask *self);
__attribute__((unused)) static void ImActorModelModulesFileUploadTask_uploadPartWithInt_withInt_withByteArray_(ImActorModelModulesFileUploadTask *self, jint blockIndex, jint offset, IOSByteArray *data);
__attribute__((unused)) static void ImActorModelModulesFileUploadTask_reportError(ImActorModelModulesFileUploadTask *self);
__attribute__((unused)) static void ImActorModelModulesFileUploadTask_reportProgressWithFloat_(ImActorModelModulesFileUploadTask *self, jfloat progress);
__attribute__((unused)) static void ImActorModelModulesFileUploadTask_reportCompleteWithAMFileLocation_withImActorModelFilesFileReference_(ImActorModelModulesFileUploadTask *self, AMFileLocation *location, id<ImActorModelFilesFileReference> reference);

@interface ImActorModelModulesFileUploadTask () {
 @public
  NSString *TAG_;
  jlong rid_;
  NSString *fileName_;
  NSString *descriptor_;
  id<ImActorModelFilesFileReference> srcReference_;
  id<ImActorModelFilesInputFile> inputFile_;
  id<ImActorModelFilesFileReference> destReference_;
  id<ImActorModelFilesOutputFile> outputFile_;
  DKActorRef *manager_;
  jboolean isCompleted_;
  jint blockSize_;
  jint blocksCount_;
  jint nextBlock_;
  jint uploaded_;
  jint uploadCount_;
  ImActorModelApiUploadConfig *uploadConfig_;
  JavaUtilZipCRC32 *crc32_;
}

- (void)startUpload;

- (void)checkQueue;

- (void)uploadPartWithInt:(jint)blockIndex
                  withInt:(jint)offset
            withByteArray:(IOSByteArray *)data;

- (void)reportError;

- (void)reportProgressWithFloat:(jfloat)progress;

- (void)reportCompleteWithAMFileLocation:(AMFileLocation *)location
      withImActorModelFilesFileReference:(id<ImActorModelFilesFileReference>)reference;
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, TAG_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, fileName_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, descriptor_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, srcReference_, id<ImActorModelFilesFileReference>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, inputFile_, id<ImActorModelFilesInputFile>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, destReference_, id<ImActorModelFilesFileReference>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, outputFile_, id<ImActorModelFilesOutputFile>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, manager_, DKActorRef *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, uploadConfig_, ImActorModelApiUploadConfig *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, crc32_, JavaUtilZipCRC32 *)

@interface ImActorModelModulesFileUploadTask_$1 () {
 @public
  ImActorModelModulesFileUploadTask *this$0_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$1, this$0_, ImActorModelModulesFileUploadTask *)

@interface ImActorModelModulesFileUploadTask_$2 () {
 @public
  ImActorModelModulesFileUploadTask *this$0_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$2, this$0_, ImActorModelModulesFileUploadTask *)

@interface ImActorModelModulesFileUploadTask_$3 () {
 @public
  ImActorModelModulesFileUploadTask *this$0_;
  jint val$blockIndex_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$3, this$0_, ImActorModelModulesFileUploadTask *)

@implementation ImActorModelModulesFileUploadTask

- (instancetype)initWithLong:(jlong)rid
                withNSString:(NSString *)descriptor
                withNSString:(NSString *)fileName
              withDKActorRef:(DKActorRef *)manager
withImActorModelModulesModules:(ImActorModelModulesModules *)modules {
  if (self = [super initWithImActorModelModulesModules:modules]) {
    isCompleted_ = NO;
    blockSize_ = 8 * 1024;
    nextBlock_ = 0;
    self->rid_ = rid;
    self->fileName_ = fileName;
    self->descriptor_ = descriptor;
    self->manager_ = manager;
    self->TAG_ = JreStrcat("$JC", @"UploadTask{", rid, '}');
  }
  return self;
}

- (void)preStart {
  srcReference_ = [((id<AMFileSystemProvider>) nil_chk([((AMConfiguration *) nil_chk([self config])) getFileSystemProvider])) fileFromDescriptorWithNSString:descriptor_];
  if (srcReference_ == nil) {
    AMLog_dWithNSString_withNSString_(TAG_, @"Error during file reference creating");
    ImActorModelModulesFileUploadTask_reportError(self);
    return;
  }
  destReference_ = [((id<AMFileSystemProvider>) nil_chk([((AMConfiguration *) nil_chk([self config])) getFileSystemProvider])) createTempFile];
  if (destReference_ == nil) {
    AMLog_dWithNSString_withNSString_(TAG_, @"Error during file dest reference creating");
    ImActorModelModulesFileUploadTask_reportError(self);
    return;
  }
  inputFile_ = [((id<ImActorModelFilesFileReference>) nil_chk(srcReference_)) openRead];
  if (inputFile_ == nil) {
    AMLog_dWithNSString_withNSString_(TAG_, @"Error during file open");
    ImActorModelModulesFileUploadTask_reportError(self);
    return;
  }
  outputFile_ = [((id<ImActorModelFilesFileReference>) nil_chk(destReference_)) openWriteWithInt:[srcReference_ getSize]];
  if (outputFile_ == nil) {
    [((id<ImActorModelFilesInputFile>) nil_chk(inputFile_)) close];
    AMLog_dWithNSString_withNSString_(TAG_, @"Error during dest file open");
    ImActorModelModulesFileUploadTask_reportError(self);
    return;
  }
  crc32_ = [[JavaUtilZipCRC32 alloc] init];
  ImActorModelModulesFileUploadTask_startUpload(self);
}

- (void)startUpload {
  ImActorModelModulesFileUploadTask_startUpload(self);
}

- (void)checkQueue {
  ImActorModelModulesFileUploadTask_checkQueue(self);
}

- (void)uploadPartWithInt:(jint)blockIndex
                  withInt:(jint)offset
            withByteArray:(IOSByteArray *)data {
  ImActorModelModulesFileUploadTask_uploadPartWithInt_withInt_withByteArray_(self, blockIndex, offset, data);
}

- (void)reportError {
  ImActorModelModulesFileUploadTask_reportError(self);
}

- (void)reportProgressWithFloat:(jfloat)progress {
  ImActorModelModulesFileUploadTask_reportProgressWithFloat_(self, progress);
}

- (void)reportCompleteWithAMFileLocation:(AMFileLocation *)location
      withImActorModelFilesFileReference:(id<ImActorModelFilesFileReference>)reference {
  ImActorModelModulesFileUploadTask_reportCompleteWithAMFileLocation_withImActorModelFilesFileReference_(self, location, reference);
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadTask *)other {
  [super copyAllFieldsTo:other];
  other->TAG_ = TAG_;
  other->rid_ = rid_;
  other->fileName_ = fileName_;
  other->descriptor_ = descriptor_;
  other->srcReference_ = srcReference_;
  other->inputFile_ = inputFile_;
  other->destReference_ = destReference_;
  other->outputFile_ = outputFile_;
  other->manager_ = manager_;
  other->isCompleted_ = isCompleted_;
  other->blockSize_ = blockSize_;
  other->blocksCount_ = blocksCount_;
  other->nextBlock_ = nextBlock_;
  other->uploaded_ = uploaded_;
  other->uploadCount_ = uploadCount_;
  other->uploadConfig_ = uploadConfig_;
  other->crc32_ = crc32_;
}

@end

void ImActorModelModulesFileUploadTask_startUpload(ImActorModelModulesFileUploadTask *self) {
  self->blocksCount_ = [((id<ImActorModelFilesFileReference>) nil_chk(self->srcReference_)) getSize] / self->blockSize_;
  if ([self->srcReference_ getSize] % self->blockSize_ != 0) {
    self->blocksCount_++;
  }
  AMLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$I$", @"Starting uploading ", self->blocksCount_, @" blocks"));
  AMLog_dWithNSString_withNSString_(self->TAG_, @"Requesting upload config...");
  [self requestWithImActorModelNetworkParserRequest:[[ImActorModelApiRpcRequestStartUpload alloc] init] withAMRpcCallback:[[ImActorModelModulesFileUploadTask_$1 alloc] initWithImActorModelModulesFileUploadTask:self]];
}

void ImActorModelModulesFileUploadTask_checkQueue(ImActorModelModulesFileUploadTask *self) {
  if (self->isCompleted_) {
    return;
  }
  if (self->nextBlock_ == self->blocksCount_ && self->uploadCount_ == 0) {
    AMLog_dWithNSString_withNSString_(self->TAG_, @"Completing...");
    jlong crc = [((JavaUtilZipCRC32 *) nil_chk(self->crc32_)) getValue];
    AMLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$J", @"Src #", crc));
    AMLog_dWithNSString_withNSString_(self->TAG_, @"Closing files...");
    [((id<ImActorModelFilesInputFile>) nil_chk(self->inputFile_)) close];
    [((id<ImActorModelFilesOutputFile>) nil_chk(self->outputFile_)) close];
    [self requestWithImActorModelNetworkParserRequest:[[ImActorModelApiRpcRequestCompleteUpload alloc] initWithImActorModelApiUploadConfig:self->uploadConfig_ withInt:self->blocksCount_ withLong:crc] withAMRpcCallback:[[ImActorModelModulesFileUploadTask_$2 alloc] initWithImActorModelModulesFileUploadTask:self]];
    return;
  }
  if (self->nextBlock_ < self->blocksCount_ && self->uploadCount_ < ImActorModelModulesFileUploadTask_SIM_BLOCKS_COUNT) {
    jint blockIndex = self->nextBlock_++;
    jint size = self->blockSize_;
    jint fileOffset = blockIndex * self->blockSize_;
    if ((blockIndex + 1) * self->blockSize_ > [((id<ImActorModelFilesFileReference>) nil_chk(self->srcReference_)) getSize]) {
      size = [self->srcReference_ getSize] - blockIndex * self->blockSize_;
    }
    IOSByteArray *data = [IOSByteArray newArrayWithLength:size];
    if (![((id<ImActorModelFilesInputFile>) nil_chk(self->inputFile_)) readWithInt:fileOffset withByteArray:data withInt:0 withInt:size]) {
      AMLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$I$", @"read #", blockIndex, @" error"));
      ImActorModelModulesFileUploadTask_reportError(self);
      return;
    }
    if (![((id<ImActorModelFilesOutputFile>) nil_chk(self->outputFile_)) writeWithInt:fileOffset withByteArray:data withInt:0 withInt:size]) {
      AMLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$I$", @"write #", blockIndex, @" error"));
      ImActorModelModulesFileUploadTask_reportError(self);
      return;
    }
    [((JavaUtilZipCRC32 *) nil_chk(self->crc32_)) updateWithByteArray:data withInt:0 withInt:size];
    AMLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$I", @"Starting block upload #", blockIndex));
    self->uploadCount_++;
    ImActorModelModulesFileUploadTask_uploadPartWithInt_withInt_withByteArray_(self, blockIndex, fileOffset, data);
    ImActorModelModulesFileUploadTask_checkQueue(self);
  }
  else {
    AMLog_dWithNSString_withNSString_(self->TAG_, @"Nothing to do");
  }
}

void ImActorModelModulesFileUploadTask_uploadPartWithInt_withInt_withByteArray_(ImActorModelModulesFileUploadTask *self, jint blockIndex, jint offset, IOSByteArray *data) {
  [self requestWithImActorModelNetworkParserRequest:[[ImActorModelApiRpcRequestUploadPart alloc] initWithImActorModelApiUploadConfig:self->uploadConfig_ withInt:offset withByteArray:data] withAMRpcCallback:[[ImActorModelModulesFileUploadTask_$3 alloc] initWithImActorModelModulesFileUploadTask:self withInt:blockIndex]];
}

void ImActorModelModulesFileUploadTask_reportError(ImActorModelModulesFileUploadTask *self) {
  if (self->isCompleted_) {
    return;
  }
  self->isCompleted_ = YES;
  [((DKActorRef *) nil_chk(self->manager_)) sendWithId:[[ImActorModelModulesFileUploadManager_UploadTaskError alloc] initWithLong:self->rid_]];
}

void ImActorModelModulesFileUploadTask_reportProgressWithFloat_(ImActorModelModulesFileUploadTask *self, jfloat progress) {
  if (self->isCompleted_) {
    return;
  }
  [((DKActorRef *) nil_chk(self->manager_)) sendWithId:[[ImActorModelModulesFileUploadManager_UploadTaskProgress alloc] initWithLong:self->rid_ withFloat:progress]];
}

void ImActorModelModulesFileUploadTask_reportCompleteWithAMFileLocation_withImActorModelFilesFileReference_(ImActorModelModulesFileUploadTask *self, AMFileLocation *location, id<ImActorModelFilesFileReference> reference) {
  if (self->isCompleted_) {
    return;
  }
  self->isCompleted_ = YES;
  [((DKActorRef *) nil_chk(self->manager_)) sendWithId:[[ImActorModelModulesFileUploadManager_UploadTaskComplete alloc] initWithLong:self->rid_ withAMFileLocation:location withImActorModelFilesFileReference:reference]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask)

@implementation ImActorModelModulesFileUploadTask_$1

- (void)onResultWithImActorModelNetworkParserResponse:(ImActorModelApiRpcResponseStartUpload *)response {
  AMLog_dWithNSString_withNSString_(this$0_->TAG_, @"Upload config loaded");
  this$0_->uploadConfig_ = [((ImActorModelApiRpcResponseStartUpload *) nil_chk(response)) getConfig];
  ImActorModelModulesFileUploadTask_checkQueue(this$0_);
}

- (void)onErrorWithAMRpcException:(AMRpcException *)e {
  AMLog_dWithNSString_withNSString_(this$0_->TAG_, @"Upload config load error");
  ImActorModelModulesFileUploadTask_reportError(this$0_);
}

- (instancetype)initWithImActorModelModulesFileUploadTask:(ImActorModelModulesFileUploadTask *)outer$ {
  this$0_ = outer$;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadTask_$1 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$1)

@implementation ImActorModelModulesFileUploadTask_$2

- (void)onResultWithImActorModelNetworkParserResponse:(ImActorModelApiRpcResponseCompleteUpload *)response {
  AMLog_dWithNSString_withNSString_(this$0_->TAG_, @"Upload completed...");
  AMFileLocation *location = ImActorModelModulesMessagesEntityEntityConverter_convertWithImActorModelApiFileLocation_withNSString_withInt_([((ImActorModelApiRpcResponseCompleteUpload *) nil_chk(response)) getLocation], this$0_->fileName_, [((id<ImActorModelFilesFileReference>) nil_chk(this$0_->srcReference_)) getSize]);
  id<ImActorModelFilesFileReference> reference = [((id<AMFileSystemProvider>) nil_chk([((AMConfiguration *) nil_chk([this$0_ config])) getFileSystemProvider])) commitTempFileWithImActorModelFilesFileReference:this$0_->destReference_ withAMFileLocation:location];
  ImActorModelModulesFileUploadTask_reportCompleteWithAMFileLocation_withImActorModelFilesFileReference_(this$0_, location, reference);
}

- (void)onErrorWithAMRpcException:(AMRpcException *)e {
  AMLog_dWithNSString_withNSString_(this$0_->TAG_, @"Upload complete error");
  ImActorModelModulesFileUploadTask_reportError(this$0_);
}

- (instancetype)initWithImActorModelModulesFileUploadTask:(ImActorModelModulesFileUploadTask *)outer$ {
  this$0_ = outer$;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadTask_$2 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$2)

@implementation ImActorModelModulesFileUploadTask_$3

- (void)onResultWithImActorModelNetworkParserResponse:(ImActorModelApiRpcResponseVoid *)response {
  AMLog_dWithNSString_withNSString_(this$0_->TAG_, JreStrcat("$I$", @"Block #", val$blockIndex_, @" uploaded"));
  this$0_->uploadCount_--;
  this$0_->uploaded_++;
  ImActorModelModulesFileUploadTask_reportProgressWithFloat_(this$0_, this$0_->uploaded_ / (jfloat) this$0_->blocksCount_);
  ImActorModelModulesFileUploadTask_checkQueue(this$0_);
}

- (void)onErrorWithAMRpcException:(AMRpcException *)e {
  ImActorModelModulesFileUploadTask_reportError(this$0_);
}

- (instancetype)initWithImActorModelModulesFileUploadTask:(ImActorModelModulesFileUploadTask *)outer$
                                                  withInt:(jint)capture$0 {
  this$0_ = outer$;
  val$blockIndex_ = capture$0;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadTask_$3 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
  other->val$blockIndex_ = val$blockIndex_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$3)
