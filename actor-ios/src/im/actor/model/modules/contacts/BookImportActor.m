//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/im/actor/model/modules/contacts/BookImportActor.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/Configuration.h"
#include "im/actor/model/PhoneBookProvider.h"
#include "im/actor/model/api/EmailToImport.h"
#include "im/actor/model/api/PhoneToImport.h"
#include "im/actor/model/api/User.h"
#include "im/actor/model/api/base/FatSeqUpdate.h"
#include "im/actor/model/api/rpc/RequestImportContacts.h"
#include "im/actor/model/api/rpc/ResponseImportContacts.h"
#include "im/actor/model/api/updates/UpdateContactsAdded.h"
#include "im/actor/model/droidkit/actors/Actor.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/droidkit/engine/PreferencesStorage.h"
#include "im/actor/model/entity/PhoneBookContact.h"
#include "im/actor/model/entity/PhoneBookEmail.h"
#include "im/actor/model/entity/PhoneBookPhone.h"
#include "im/actor/model/log/Log.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/Updates.h"
#include "im/actor/model/modules/contacts/BookImportActor.h"
#include "im/actor/model/modules/utils/ModuleActor.h"
#include "im/actor/model/network/RpcException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"

__attribute__((unused)) static void ImActorModelModulesContactsBookImportActor_performSync(ImActorModelModulesContactsBookImportActor *self);
__attribute__((unused)) static void ImActorModelModulesContactsBookImportActor_onPhoneBookLoadedWithJavaUtilList_(ImActorModelModulesContactsBookImportActor *self, id<JavaUtilList> phoneBook);
__attribute__((unused)) static void ImActorModelModulesContactsBookImportActor_performImportWithJavaUtilArrayList_withJavaUtilArrayList_(ImActorModelModulesContactsBookImportActor *self, JavaUtilArrayList *phoneToImportsPart, JavaUtilArrayList *emailToImportsPart);
__attribute__((unused)) static jboolean ImActorModelModulesContactsBookImportActor_isImportedWithLong_(ImActorModelModulesContactsBookImportActor *self, jlong phone);
__attribute__((unused)) static jboolean ImActorModelModulesContactsBookImportActor_isImportedWithNSString_(ImActorModelModulesContactsBookImportActor *self, NSString *email);
__attribute__((unused)) static void ImActorModelModulesContactsBookImportActor_markImportedWithLong_(ImActorModelModulesContactsBookImportActor *self, jlong phone);
__attribute__((unused)) static void ImActorModelModulesContactsBookImportActor_markImportedWithNSString_(ImActorModelModulesContactsBookImportActor *self, NSString *email);

@interface ImActorModelModulesContactsBookImportActor () {
 @public
  jboolean ENABLE_LOG_;
  JavaUtilHashSet *importingPhones_;
  JavaUtilHashSet *importingEmails_;
  jboolean isSyncInProgress_;
}

- (void)performSync;

- (void)onPhoneBookLoadedWithJavaUtilList:(id<JavaUtilList>)phoneBook;

- (void)performImportWithJavaUtilArrayList:(JavaUtilArrayList *)phoneToImportsPart
                     withJavaUtilArrayList:(JavaUtilArrayList *)emailToImportsPart;

- (jboolean)isImportedWithLong:(jlong)phone;

- (jboolean)isImportedWithNSString:(NSString *)email;

- (void)markImportedWithLong:(jlong)phone;

- (void)markImportedWithNSString:(NSString *)email;
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesContactsBookImportActor, importingPhones_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(ImActorModelModulesContactsBookImportActor, importingEmails_, JavaUtilHashSet *)

@interface ImActorModelModulesContactsBookImportActor_PhoneBookLoaded () {
 @public
  id<JavaUtilList> phoneBook_;
}
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)phoneBook;
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesContactsBookImportActor_PhoneBookLoaded, phoneBook_, id<JavaUtilList>)

@interface ImActorModelModulesContactsBookImportActor_$1 () {
 @public
  ImActorModelModulesContactsBookImportActor *this$0_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesContactsBookImportActor_$1, this$0_, ImActorModelModulesContactsBookImportActor *)

@interface ImActorModelModulesContactsBookImportActor_$2 () {
 @public
  ImActorModelModulesContactsBookImportActor *this$0_;
  IOSObjectArray *val$phones_;
  IOSObjectArray *val$emailToImports_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesContactsBookImportActor_$2, this$0_, ImActorModelModulesContactsBookImportActor *)
J2OBJC_FIELD_SETTER(ImActorModelModulesContactsBookImportActor_$2, val$phones_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ImActorModelModulesContactsBookImportActor_$2, val$emailToImports_, IOSObjectArray *)

@implementation ImActorModelModulesContactsBookImportActor

NSString * ImActorModelModulesContactsBookImportActor_TAG_ = @"ContactsImport";

- (instancetype)initWithImActorModelModulesModules:(ImActorModelModulesModules *)messenger {
  if (self = [super initWithImActorModelModulesModules:messenger]) {
    importingPhones_ = [[JavaUtilHashSet alloc] init];
    importingEmails_ = [[JavaUtilHashSet alloc] init];
    isSyncInProgress_ = NO;
    ENABLE_LOG_ = [((AMConfiguration *) nil_chk([((ImActorModelModulesModules *) nil_chk(messenger)) getConfiguration])) isEnableContactsLogging];
  }
  return self;
}

- (void)preStart {
  [super preStart];
  [((DKActorRef *) nil_chk([self self__])) sendWithId:[[ImActorModelModulesContactsBookImportActor_PerformSync alloc] init]];
}

- (void)performSync {
  ImActorModelModulesContactsBookImportActor_performSync(self);
}

- (void)onPhoneBookLoadedWithJavaUtilList:(id<JavaUtilList>)phoneBook {
  ImActorModelModulesContactsBookImportActor_onPhoneBookLoadedWithJavaUtilList_(self, phoneBook);
}

- (void)performImportWithJavaUtilArrayList:(JavaUtilArrayList *)phoneToImportsPart
                     withJavaUtilArrayList:(JavaUtilArrayList *)emailToImportsPart {
  ImActorModelModulesContactsBookImportActor_performImportWithJavaUtilArrayList_withJavaUtilArrayList_(self, phoneToImportsPart, emailToImportsPart);
}

- (jboolean)isImportedWithLong:(jlong)phone {
  return ImActorModelModulesContactsBookImportActor_isImportedWithLong_(self, phone);
}

- (jboolean)isImportedWithNSString:(NSString *)email {
  return ImActorModelModulesContactsBookImportActor_isImportedWithNSString_(self, email);
}

- (void)markImportedWithLong:(jlong)phone {
  ImActorModelModulesContactsBookImportActor_markImportedWithLong_(self, phone);
}

- (void)markImportedWithNSString:(NSString *)email {
  ImActorModelModulesContactsBookImportActor_markImportedWithNSString_(self, email);
}

- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[ImActorModelModulesContactsBookImportActor_PerformSync class]]) {
    ImActorModelModulesContactsBookImportActor_performSync(self);
  }
  else if ([message isKindOfClass:[ImActorModelModulesContactsBookImportActor_PhoneBookLoaded class]]) {
    ImActorModelModulesContactsBookImportActor_onPhoneBookLoadedWithJavaUtilList_(self, [((ImActorModelModulesContactsBookImportActor_PhoneBookLoaded *) nil_chk(((ImActorModelModulesContactsBookImportActor_PhoneBookLoaded *) check_class_cast(message, [ImActorModelModulesContactsBookImportActor_PhoneBookLoaded class])))) getPhoneBook]);
  }
  else {
    [self dropWithId:message];
  }
}

- (void)copyAllFieldsTo:(ImActorModelModulesContactsBookImportActor *)other {
  [super copyAllFieldsTo:other];
  other->ENABLE_LOG_ = ENABLE_LOG_;
  other->importingPhones_ = importingPhones_;
  other->importingEmails_ = importingEmails_;
  other->isSyncInProgress_ = isSyncInProgress_;
}

@end

void ImActorModelModulesContactsBookImportActor_performSync(ImActorModelModulesContactsBookImportActor *self) {
  if (self->ENABLE_LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesContactsBookImportActor_TAG_, @"Checking sync...");
  }
  if (self->isSyncInProgress_) {
    if (self->ENABLE_LOG_) {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesContactsBookImportActor_TAG_, @"Sync already in progress");
    }
    return;
  }
  self->isSyncInProgress_ = YES;
  if (self->ENABLE_LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesContactsBookImportActor_TAG_, @"Starting book loading...");
  }
  [((id<AMPhoneBookProvider>) nil_chk([((AMConfiguration *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getConfiguration])) getPhoneBookProvider])) loadPhoneBookWithAMPhoneBookProvider_Callback:[[ImActorModelModulesContactsBookImportActor_$1 alloc] initWithImActorModelModulesContactsBookImportActor:self]];
}

void ImActorModelModulesContactsBookImportActor_onPhoneBookLoadedWithJavaUtilList_(ImActorModelModulesContactsBookImportActor *self, id<JavaUtilList> phoneBook) {
  self->isSyncInProgress_ = NO;
  if (self->ENABLE_LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesContactsBookImportActor_TAG_, @"Book load completed");
  }
  JavaUtilArrayList *phoneToImports = [[JavaUtilArrayList alloc] init];
  JavaUtilArrayList *emailToImports = [[JavaUtilArrayList alloc] init];
  for (AMPhoneBookContact * __strong record in nil_chk(phoneBook)) {
    for (AMPhoneBookPhone * __strong phone in nil_chk([((AMPhoneBookContact *) nil_chk(record)) getPhones])) {
      if (ImActorModelModulesContactsBookImportActor_isImportedWithLong_(self, [((AMPhoneBookPhone *) nil_chk(phone)) getNumber])) {
        continue;
      }
      if ([((JavaUtilHashSet *) nil_chk(self->importingPhones_)) containsWithId:JavaLangLong_valueOfWithLong_([phone getNumber])]) {
        continue;
      }
      [self->importingPhones_ addWithId:JavaLangLong_valueOfWithLong_([phone getNumber])];
      [phoneToImports addWithId:[[ImActorModelApiPhoneToImport alloc] initWithLong:[phone getNumber] withNSString:[record getName]]];
    }
    for (AMPhoneBookEmail * __strong email in nil_chk([record getEmails])) {
      if (ImActorModelModulesContactsBookImportActor_isImportedWithNSString_(self, [((NSString *) nil_chk([((AMPhoneBookEmail *) nil_chk(email)) getEmail])) lowercaseString])) {
        continue;
      }
      if ([((JavaUtilHashSet *) nil_chk(self->importingEmails_)) containsWithId:[((NSString *) nil_chk([email getEmail])) lowercaseString]]) {
        continue;
      }
      [self->importingEmails_ addWithId:[((NSString *) nil_chk([email getEmail])) lowercaseString]];
      [emailToImports addWithId:[[ImActorModelApiEmailToImport alloc] initWithNSString:[((NSString *) nil_chk([email getEmail])) lowercaseString] withNSString:[record getName]]];
    }
  }
  if ([phoneToImports size] == 0 && [emailToImports size] == 0) {
    if (self->ENABLE_LOG_) {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesContactsBookImportActor_TAG_, @"No new contacts found");
    }
    return;
  }
  else {
    if (self->ENABLE_LOG_) {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesContactsBookImportActor_TAG_, JreStrcat("$I$", @"Founded new ", ([phoneToImports size] + [emailToImports size]), @" contact records"));
    }
  }
  JavaUtilArrayList *phoneToImportsPart = [[JavaUtilArrayList alloc] init];
  JavaUtilArrayList *emailToImportsPart = [[JavaUtilArrayList alloc] init];
  jint count = 0;
  for (ImActorModelApiPhoneToImport * __strong phoneToImport in phoneToImports) {
    [phoneToImportsPart addWithId:phoneToImport];
    count++;
    if (count >= ImActorModelModulesContactsBookImportActor_MAX_IMPORT_SIZE) {
      ImActorModelModulesContactsBookImportActor_performImportWithJavaUtilArrayList_withJavaUtilArrayList_(self, phoneToImportsPart, emailToImportsPart);
      [phoneToImportsPart clear];
      [emailToImportsPart clear];
      count = 0;
    }
  }
  for (ImActorModelApiEmailToImport * __strong emailToImport in emailToImports) {
    [emailToImportsPart addWithId:emailToImport];
    count++;
    if (count >= ImActorModelModulesContactsBookImportActor_MAX_IMPORT_SIZE) {
      ImActorModelModulesContactsBookImportActor_performImportWithJavaUtilArrayList_withJavaUtilArrayList_(self, phoneToImportsPart, emailToImportsPart);
      [phoneToImportsPart clear];
      [emailToImportsPart clear];
      count = 0;
    }
  }
  if (count > 0) {
    ImActorModelModulesContactsBookImportActor_performImportWithJavaUtilArrayList_withJavaUtilArrayList_(self, phoneToImportsPart, emailToImportsPart);
  }
}

void ImActorModelModulesContactsBookImportActor_performImportWithJavaUtilArrayList_withJavaUtilArrayList_(ImActorModelModulesContactsBookImportActor *self, JavaUtilArrayList *phoneToImportsPart, JavaUtilArrayList *emailToImportsPart) {
  if (self->ENABLE_LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesContactsBookImportActor_TAG_, JreStrcat("$I$I$", @"Performing import part with ", [((JavaUtilArrayList *) nil_chk(phoneToImportsPart)) size], @" phones and ", [((JavaUtilArrayList *) nil_chk(emailToImportsPart)) size], @" emails"));
  }
  IOSObjectArray *phones = [phoneToImportsPart toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(phoneToImportsPart)) size] type:ImActorModelApiPhoneToImport_class_()]];
  IOSObjectArray *emailToImports = [emailToImportsPart toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(emailToImportsPart)) size] type:ImActorModelApiEmailToImport_class_()]];
  [self requestWithImActorModelNetworkParserRequest:[[ImActorModelApiRpcRequestImportContacts alloc] initWithJavaUtilList:(id<JavaUtilList>) check_protocol_cast([phoneToImportsPart clone], @protocol(JavaUtilList)) withJavaUtilList:(id<JavaUtilList>) check_protocol_cast([emailToImportsPart clone], @protocol(JavaUtilList))] withAMRpcCallback:[[ImActorModelModulesContactsBookImportActor_$2 alloc] initWithImActorModelModulesContactsBookImportActor:self withImActorModelApiPhoneToImportArray:phones withImActorModelApiEmailToImportArray:emailToImports]];
}

jboolean ImActorModelModulesContactsBookImportActor_isImportedWithLong_(ImActorModelModulesContactsBookImportActor *self, jlong phone) {
  return [((id<DKPreferencesStorage>) nil_chk([self preferences])) getBoolWithNSString:JreStrcat("$J", @"book_phone_", phone) withBoolean:NO];
}

jboolean ImActorModelModulesContactsBookImportActor_isImportedWithNSString_(ImActorModelModulesContactsBookImportActor *self, NSString *email) {
  return [((id<DKPreferencesStorage>) nil_chk([self preferences])) getBoolWithNSString:JreStrcat("$$", @"book_email_", [((NSString *) nil_chk(email)) lowercaseString]) withBoolean:NO];
}

void ImActorModelModulesContactsBookImportActor_markImportedWithLong_(ImActorModelModulesContactsBookImportActor *self, jlong phone) {
  [((id<DKPreferencesStorage>) nil_chk([self preferences])) putBoolWithNSString:JreStrcat("$J", @"book_phone_", phone) withBoolean:YES];
}

void ImActorModelModulesContactsBookImportActor_markImportedWithNSString_(ImActorModelModulesContactsBookImportActor *self, NSString *email) {
  [((id<DKPreferencesStorage>) nil_chk([self preferences])) putBoolWithNSString:JreStrcat("$$", @"book_email_", [((NSString *) nil_chk(email)) lowercaseString]) withBoolean:YES];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesContactsBookImportActor)

@implementation ImActorModelModulesContactsBookImportActor_PerformSync

- (instancetype)init {
  return [super init];
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesContactsBookImportActor_PerformSync)

@implementation ImActorModelModulesContactsBookImportActor_PhoneBookLoaded

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)phoneBook {
  if (self = [super init]) {
    self->phoneBook_ = phoneBook;
  }
  return self;
}

- (id<JavaUtilList>)getPhoneBook {
  return phoneBook_;
}

- (void)copyAllFieldsTo:(ImActorModelModulesContactsBookImportActor_PhoneBookLoaded *)other {
  [super copyAllFieldsTo:other];
  other->phoneBook_ = phoneBook_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesContactsBookImportActor_PhoneBookLoaded)

@implementation ImActorModelModulesContactsBookImportActor_$1

- (void)onLoadedWithJavaUtilList:(id<JavaUtilList>)contacts {
  [((DKActorRef *) nil_chk([this$0_ self__])) sendWithId:[[ImActorModelModulesContactsBookImportActor_PhoneBookLoaded alloc] initWithJavaUtilList:contacts]];
}

- (instancetype)initWithImActorModelModulesContactsBookImportActor:(ImActorModelModulesContactsBookImportActor *)outer$ {
  this$0_ = outer$;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesContactsBookImportActor_$1 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesContactsBookImportActor_$1)

@implementation ImActorModelModulesContactsBookImportActor_$2

- (void)onResultWithImActorModelNetworkParserResponse:(ImActorModelApiRpcResponseImportContacts *)response {
  {
    IOSObjectArray *a__ = val$phones_;
    ImActorModelApiPhoneToImport * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ImActorModelApiPhoneToImport * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ImActorModelApiPhoneToImport *phoneToImport = *b__++;
      ImActorModelModulesContactsBookImportActor_markImportedWithLong_(this$0_, [((ImActorModelApiPhoneToImport *) nil_chk(phoneToImport)) getPhoneNumber]);
      [((JavaUtilHashSet *) nil_chk(this$0_->importingPhones_)) removeWithId:JavaLangLong_valueOfWithLong_([phoneToImport getPhoneNumber])];
    }
  }
  {
    IOSObjectArray *a__ = val$emailToImports_;
    ImActorModelApiEmailToImport * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ImActorModelApiEmailToImport * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ImActorModelApiEmailToImport *emailToImport = *b__++;
      ImActorModelModulesContactsBookImportActor_markImportedWithNSString_(this$0_, [((ImActorModelApiEmailToImport *) nil_chk(emailToImport)) getEmail]);
      [((JavaUtilHashSet *) nil_chk(this$0_->importingEmails_)) removeWithId:[emailToImport getEmail]];
    }
  }
  if ([((id<JavaUtilList>) nil_chk([((ImActorModelApiRpcResponseImportContacts *) nil_chk(response)) getUsers])) size] == 0) {
    if (this$0_->ENABLE_LOG_) {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesContactsBookImportActor_get_TAG_(), @"Import success, but no new contacts found");
    }
    return;
  }
  if (this$0_->ENABLE_LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesContactsBookImportActor_get_TAG_(), JreStrcat("$I$", @"Import success with ", [((id<JavaUtilList>) nil_chk([response getUsers])) size], @" new contacts"));
  }
  JavaUtilArrayList *uids = [[JavaUtilArrayList alloc] init];
  for (ImActorModelApiUser * __strong u in nil_chk([response getUsers])) {
    [uids addWithId:JavaLangInteger_valueOfWithInt_([((ImActorModelApiUser *) nil_chk(u)) getId])];
  }
  [((ImActorModelModulesUpdates *) nil_chk([this$0_ updates])) onUpdateReceivedWithId:[[ImActorModelApiBaseFatSeqUpdate alloc] initWithInt:[response getSeq] withByteArray:[response getState] withInt:ImActorModelApiUpdatesUpdateContactsAdded_HEADER withByteArray:[((ImActorModelApiUpdatesUpdateContactsAdded *) [[ImActorModelApiUpdatesUpdateContactsAdded alloc] initWithJavaUtilList:uids]) toByteArray] withJavaUtilList:[response getUsers] withJavaUtilList:[[JavaUtilArrayList alloc] init] withJavaUtilList:[[JavaUtilArrayList alloc] init] withJavaUtilList:[[JavaUtilArrayList alloc] init]]];
}

- (void)onErrorWithAMRpcException:(AMRpcException *)e {
  if (this$0_->ENABLE_LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesContactsBookImportActor_get_TAG_(), @"Import failure");
  }
  [((AMRpcException *) nil_chk(e)) printStackTrace];
}

- (instancetype)initWithImActorModelModulesContactsBookImportActor:(ImActorModelModulesContactsBookImportActor *)outer$
                             withImActorModelApiPhoneToImportArray:(IOSObjectArray *)capture$0
                             withImActorModelApiEmailToImportArray:(IOSObjectArray *)capture$1 {
  this$0_ = outer$;
  val$phones_ = capture$0;
  val$emailToImports_ = capture$1;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesContactsBookImportActor_$2 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
  other->val$phones_ = val$phones_;
  other->val$emailToImports_ = val$emailToImports_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesContactsBookImportActor_$2)
