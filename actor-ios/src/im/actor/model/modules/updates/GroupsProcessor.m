//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/im/actor/model/modules/updates/GroupsProcessor.java
//

#include "J2ObjC_source.h"
#include "im/actor/model/api/Group.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/entity/Avatar.h"
#include "im/actor/model/entity/Group.h"
#include "im/actor/model/entity/Message.h"
#include "im/actor/model/entity/MessageState.h"
#include "im/actor/model/entity/Peer.h"
#include "im/actor/model/entity/content/ServiceGroupAvatarChanged.h"
#include "im/actor/model/entity/content/ServiceGroupCreated.h"
#include "im/actor/model/entity/content/ServiceGroupTitleChanged.h"
#include "im/actor/model/entity/content/ServiceGroupUserAdded.h"
#include "im/actor/model/entity/content/ServiceGroupUserKicked.h"
#include "im/actor/model/entity/content/ServiceGroupUserLeave.h"
#include "im/actor/model/modules/BaseModule.h"
#include "im/actor/model/modules/Messages.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/messages/DialogsActor.h"
#include "im/actor/model/modules/messages/entity/EntityConverter.h"
#include "im/actor/model/modules/updates/GroupsProcessor.h"
#include "im/actor/model/storage/KeyValueEngine.h"
#include "im/actor/model/util/JavaUtil.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"

@implementation ImActorModelModulesUpdatesGroupsProcessor

- (instancetype)initWithImActorModelModulesModules:(ImActorModelModulesModules *)modules {
  return [super initWithImActorModelModulesModules:modules];
}

- (void)applyGroupsWithJavaUtilCollection:(id<JavaUtilCollection>)updated
                              withBoolean:(jboolean)forced {
  JavaUtilArrayList *batch = [[JavaUtilArrayList alloc] init];
  for (ImActorModelApiGroup * __strong group in nil_chk(updated)) {
    AMGroup *saved = [((id<AMKeyValueEngine>) nil_chk([self groups])) getValueWithLong:[((ImActorModelApiGroup *) nil_chk(group)) getId]];
    if (saved == nil) {
      [batch addWithId:ImActorModelModulesMessagesEntityEntityConverter_convertWithImActorModelApiGroup_(group)];
    }
    else if (forced) {
      AMGroup *upd = ImActorModelModulesMessagesEntityEntityConverter_convertWithImActorModelApiGroup_(group);
      [batch addWithId:upd];
      if (!AMJavaUtil_equalsEWithId_withId_([((AMGroup *) nil_chk(upd)) getAvatar], [saved getAvatar]) || ![((NSString *) nil_chk([upd getTitle])) isEqual:[saved getTitle]]) {
        [((DKActorRef *) nil_chk([((ImActorModelModulesMessages *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getMessagesModule])) getDialogsActor])) sendWithId:[[ImActorModelModulesMessagesDialogsActor_GroupChanged alloc] initWithAMGroup:upd]];
      }
    }
  }
  if ([batch size] > 0) {
    [((id<AMKeyValueEngine>) nil_chk([self groups])) addOrUpdateItemsWithJavaUtilList:batch];
  }
}

- (void)onGroupInviteWithInt:(jint)groupId
                    withLong:(jlong)rid
                     withInt:(jint)inviterId
                    withLong:(jlong)date {
  AMGroup *group = [((id<AMKeyValueEngine>) nil_chk([self groups])) getValueWithLong:groupId];
  if (group == nil) {
    return;
  }
  [((id<AMKeyValueEngine>) nil_chk([self groups])) addOrUpdateItemWithAMKeyValueItem:[((AMGroup *) nil_chk([((AMGroup *) nil_chk(group)) changeMemberWithBoolean:YES])) addMemberWithInt:[self myUid] withInt:inviterId withLong:date withBoolean:inviterId == [self myUid]]];
  if (inviterId == [self myUid]) {
    AMMessage *message = [[AMMessage alloc] initWithLong:rid withLong:date withLong:date withInt:inviterId withAMMessageStateEnum:AMMessageStateEnum_get_UNKNOWN() withImActorModelEntityContentAbsContent:[[ImActorModelEntityContentServiceGroupCreated alloc] initWithNSString:[group getTitle]]];
    [((DKActorRef *) nil_chk([self conversationActorWithAMPeer:[group peer]])) sendWithId:message];
  }
  else {
    AMMessage *message = [[AMMessage alloc] initWithLong:rid withLong:date withLong:date withInt:inviterId withAMMessageStateEnum:AMMessageStateEnum_get_SENT() withImActorModelEntityContentAbsContent:[[ImActorModelEntityContentServiceGroupUserAdded alloc] initWithInt:[self myUid]]];
    [((DKActorRef *) nil_chk([self conversationActorWithAMPeer:[group peer]])) sendWithId:message];
  }
}

- (void)onUserLeaveWithInt:(jint)groupId
                  withLong:(jlong)rid
                   withInt:(jint)uid
                  withLong:(jlong)date {
  AMGroup *group = [((id<AMKeyValueEngine>) nil_chk([self groups])) getValueWithLong:groupId];
  if (group == nil) {
    return;
  }
  if (uid == [self myUid]) {
    [((id<AMKeyValueEngine>) nil_chk([self groups])) addOrUpdateItemWithAMKeyValueItem:[((AMGroup *) nil_chk([((AMGroup *) nil_chk(group)) clearMembers])) changeMemberWithBoolean:NO]];
  }
  else {
    [((id<AMKeyValueEngine>) nil_chk([self groups])) addOrUpdateItemWithAMKeyValueItem:[((AMGroup *) nil_chk(group)) removeMemberWithInt:uid]];
  }
  AMMessage *message = [[AMMessage alloc] initWithLong:rid withLong:date withLong:date withInt:uid withAMMessageStateEnum:uid == [self myUid] ? AMMessageStateEnum_get_SENT() : AMMessageStateEnum_get_UNKNOWN() withImActorModelEntityContentAbsContent:[[ImActorModelEntityContentServiceGroupUserLeave alloc] init]];
  [((DKActorRef *) nil_chk([self conversationActorWithAMPeer:[((AMGroup *) nil_chk(group)) peer]])) sendWithId:message];
}

- (void)onUserKickedWithInt:(jint)groupId
                   withLong:(jlong)rid
                    withInt:(jint)uid
                    withInt:(jint)kicker
                   withLong:(jlong)date {
  AMGroup *group = [((id<AMKeyValueEngine>) nil_chk([self groups])) getValueWithLong:groupId];
  if (group == nil) {
    return;
  }
  if (uid == [self myUid]) {
    [((id<AMKeyValueEngine>) nil_chk([self groups])) addOrUpdateItemWithAMKeyValueItem:[((AMGroup *) nil_chk([((AMGroup *) nil_chk(group)) clearMembers])) changeMemberWithBoolean:NO]];
  }
  else {
    [((id<AMKeyValueEngine>) nil_chk([self groups])) addOrUpdateItemWithAMKeyValueItem:[((AMGroup *) nil_chk(group)) removeMemberWithInt:uid]];
  }
  AMMessage *message = [[AMMessage alloc] initWithLong:rid withLong:date withLong:date withInt:kicker withAMMessageStateEnum:kicker == [self myUid] ? AMMessageStateEnum_get_SENT() : AMMessageStateEnum_get_UNKNOWN() withImActorModelEntityContentAbsContent:[[ImActorModelEntityContentServiceGroupUserKicked alloc] initWithInt:uid]];
  [((DKActorRef *) nil_chk([self conversationActorWithAMPeer:[((AMGroup *) nil_chk(group)) peer]])) sendWithId:message];
}

- (void)onUserAddedWithInt:(jint)groupId
                  withLong:(jlong)rid
                   withInt:(jint)uid
                   withInt:(jint)adder
                  withLong:(jlong)date {
  AMGroup *group = [((id<AMKeyValueEngine>) nil_chk([self groups])) getValueWithLong:groupId];
  if (group == nil) {
    return;
  }
  [((id<AMKeyValueEngine>) nil_chk([self groups])) addOrUpdateItemWithAMKeyValueItem:[((AMGroup *) nil_chk(group)) addMemberWithInt:uid withInt:adder withLong:date withBoolean:NO]];
  AMMessage *message = [[AMMessage alloc] initWithLong:rid withLong:date withLong:date withInt:adder withAMMessageStateEnum:adder == [self myUid] ? AMMessageStateEnum_get_SENT() : AMMessageStateEnum_get_UNKNOWN() withImActorModelEntityContentAbsContent:[[ImActorModelEntityContentServiceGroupUserAdded alloc] initWithInt:uid]];
  [((DKActorRef *) nil_chk([self conversationActorWithAMPeer:[group peer]])) sendWithId:message];
}

- (void)onTitleChangedWithInt:(jint)groupId
                     withLong:(jlong)rid
                      withInt:(jint)uid
                 withNSString:(NSString *)title
                     withLong:(jlong)date {
  AMGroup *group = [((id<AMKeyValueEngine>) nil_chk([self groups])) getValueWithLong:groupId];
  if (group == nil) {
    return;
  }
  AMGroup *upd = [((AMGroup *) nil_chk(group)) editTitleWithNSString:title];
  [((id<AMKeyValueEngine>) nil_chk([self groups])) addOrUpdateItemWithAMKeyValueItem:upd];
  [((DKActorRef *) nil_chk([((ImActorModelModulesMessages *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getMessagesModule])) getDialogsActor])) sendWithId:[[ImActorModelModulesMessagesDialogsActor_GroupChanged alloc] initWithAMGroup:upd]];
  AMMessage *message = [[AMMessage alloc] initWithLong:rid withLong:date withLong:date withInt:uid withAMMessageStateEnum:uid == [self myUid] ? AMMessageStateEnum_get_SENT() : AMMessageStateEnum_get_UNKNOWN() withImActorModelEntityContentAbsContent:[[ImActorModelEntityContentServiceGroupTitleChanged alloc] initWithNSString:title]];
  [((DKActorRef *) nil_chk([self conversationActorWithAMPeer:[group peer]])) sendWithId:message];
}

- (void)onAvatarChangedWithInt:(jint)groupId
                      withLong:(jlong)rid
                       withInt:(jint)uid
                  withAMAvatar:(AMAvatar *)avatar
                      withLong:(jlong)date {
  AMGroup *group = [((id<AMKeyValueEngine>) nil_chk([self groups])) getValueWithLong:groupId];
  if (group == nil) {
    return;
  }
  AMGroup *upd = [((AMGroup *) nil_chk(group)) editAvatarWithAMAvatar:avatar];
  [((id<AMKeyValueEngine>) nil_chk([self groups])) addOrUpdateItemWithAMKeyValueItem:upd];
  [((DKActorRef *) nil_chk([((ImActorModelModulesMessages *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getMessagesModule])) getDialogsActor])) sendWithId:[[ImActorModelModulesMessagesDialogsActor_GroupChanged alloc] initWithAMGroup:upd]];
  AMMessage *message = [[AMMessage alloc] initWithLong:rid withLong:date withLong:date withInt:uid withAMMessageStateEnum:uid == [self myUid] ? AMMessageStateEnum_get_SENT() : AMMessageStateEnum_get_UNKNOWN() withImActorModelEntityContentAbsContent:[[ImActorModelEntityContentServiceGroupAvatarChanged alloc] initWithAMAvatar:avatar]];
  [((DKActorRef *) nil_chk([self conversationActorWithAMPeer:[group peer]])) sendWithId:message];
}

- (jboolean)hasGroupsWithJavaUtilCollection:(id<JavaUtilCollection>)gids {
  for (JavaLangInteger * __strong uid in nil_chk(gids)) {
    if ([((id<AMKeyValueEngine>) nil_chk([self groups])) getValueWithLong:[((JavaLangInteger *) nil_chk(uid)) intValue]] == nil) {
      return NO;
    }
  }
  return YES;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesUpdatesGroupsProcessor)
