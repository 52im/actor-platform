//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/im/actor/model/util/DataOutput.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/util/DataOutput.h"
#include "java/io/IOException.h"

__attribute__((unused)) static void AMDataOutput_expandWithInt_(AMDataOutput *self, jint size);

@interface AMDataOutput () {
 @public
  IOSByteArray *data_;
  jint offset_;
}

- (void)expandWithInt:(jint)size;
@end

J2OBJC_FIELD_SETTER(AMDataOutput, data_, IOSByteArray *)

@implementation AMDataOutput

- (instancetype)init {
  if (self = [super init]) {
    data_ = [IOSByteArray newArrayWithLength:16];
  }
  return self;
}

- (void)expandWithInt:(jint)size {
  AMDataOutput_expandWithInt_(self, size);
}

- (void)writeLongWithLong:(jlong)v {
  if (((IOSByteArray *) nil_chk(data_))->size_ <= offset_ + 8) {
    AMDataOutput_expandWithInt_(self, offset_ + 8);
  }
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift64(v, 56)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift64(v, 48)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift64(v, 40)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift64(v, 32)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift64(v, 24)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift64(v, 16)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift64(v, 8)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) (v & (jint) 0xFF);
}

- (void)writeIntWithInt:(jint)v {
  if (((IOSByteArray *) nil_chk(data_))->size_ <= offset_ + 4) {
    AMDataOutput_expandWithInt_(self, offset_ + 4);
  }
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift32(v, 24)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift32(v, 16)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift32(v, 8)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) (v & (jint) 0xFF);
}

- (void)writeByteWithInt:(jint)v {
  if (((IOSByteArray *) nil_chk(data_))->size_ <= offset_ + 1) {
    AMDataOutput_expandWithInt_(self, offset_ + 1);
  }
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) v;
}

- (void)writeVarIntWithLong:(jlong)v {
  while ((v & (jlong) 0xffffffffffffff80l) != 0l) {
    [self writeByteWithInt:(jbyte) ((v & (jint) 0x7f) | (jint) 0x80)];
    URShiftAssignLong(&v, 7);
  }
  [self writeByteWithInt:(jbyte) (v & (jint) 0x7f)];
}

- (void)writeProtoBytesWithByteArray:(IOSByteArray *)v
                             withInt:(jint)ofs
                             withInt:(jint)len {
  [self writeVarIntWithLong:len];
  [self writeBytesWithByteArray:v withInt:ofs withInt:len];
}

- (void)writeBytesWithByteArray:(IOSByteArray *)v
                        withInt:(jint)ofs
                        withInt:(jint)len {
  if (((IOSByteArray *) nil_chk(data_))->size_ < offset_ + ((IOSByteArray *) nil_chk(v))->size_) {
    AMDataOutput_expandWithInt_(self, offset_ + v->size_);
  }
  for (jint i = 0; i < len; i++) {
    *IOSByteArray_GetRef(data_, offset_++) = IOSByteArray_Get(v, i + ofs);
  }
}

- (void)writeProtoLongsWithLongArray:(IOSLongArray *)values {
  [self writeVarIntWithLong:((IOSLongArray *) nil_chk(values))->size_];
  {
    IOSLongArray *a__ = values;
    jlong const *b__ = a__->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong l = *b__++;
      [self writeLongWithLong:l];
    }
  }
}

- (void)writeProtoStringWithNSString:(NSString *)value {
  IOSByteArray *data = [((NSString *) nil_chk(value)) getBytesWithCharsetName:@"UTF-8"];
  [self writeProtoBytesWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_];
}

- (void)writeProtoBoolWithBoolean:(jboolean)v {
  [self writeByteWithInt:v ? 1 : 0];
}

- (IOSByteArray *)toByteArray {
  IOSByteArray *res = [IOSByteArray newArrayWithLength:offset_];
  for (jint i = 0; i < offset_; i++) {
    *IOSByteArray_GetRef(res, i) = IOSByteArray_Get(nil_chk(data_), i);
  }
  return res;
}

- (void)copyAllFieldsTo:(AMDataOutput *)other {
  [super copyAllFieldsTo:other];
  other->data_ = data_;
  other->offset_ = offset_;
}

@end

void AMDataOutput_expandWithInt_(AMDataOutput *self, jint size) {
  IOSByteArray *nData = [IOSByteArray newArrayWithLength:size];
  for (jint i = 0; i < self->offset_; i++) {
    *IOSByteArray_GetRef(nData, i) = IOSByteArray_Get(nil_chk(self->data_), i);
  }
  self->data_ = nData;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMDataOutput)
