//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/im/actor/model/droidkit/actors/Environment.java
//

#include "J2ObjC_source.h"
#include "im/actor/model/Threading.h"
#include "im/actor/model/droidkit/actors/ActorSystem.h"
#include "im/actor/model/droidkit/actors/Environment.h"
#include "im/actor/model/droidkit/actors/ThreadPriority.h"
#include "im/actor/model/droidkit/actors/mailbox/ActorDispatcher.h"
#include "im/actor/model/util/AtomicIntegerCompat.h"
#include "im/actor/model/util/AtomicLongCompat.h"
#include "im/actor/model/util/ThreadLocalCompat.h"
#include "java/lang/RuntimeException.h"

@interface DKEnvironment () {
}
@end

@implementation DKEnvironment

id<AMThreading> DKEnvironment_threading_;

+ (void)setThreadingWithAMThreading:(id<AMThreading>)threading {
  DKEnvironment_setThreadingWithAMThreading_(threading);
}

+ (DKActorDispatcher *)createDefaultDispatcherWithNSString:(NSString *)name
                                  withDKThreadPriorityEnum:(DKThreadPriorityEnum *)priority
                                         withDKActorSystem:(DKActorSystem *)actorSystem {
  return DKEnvironment_createDefaultDispatcherWithNSString_withDKThreadPriorityEnum_withDKActorSystem_(name, priority, actorSystem);
}

+ (DKActorDispatcher *)createDispatcherWithNSString:(NSString *)name
                                            withInt:(jint)threadsCount
                           withDKThreadPriorityEnum:(DKThreadPriorityEnum *)priority
                                  withDKActorSystem:(DKActorSystem *)actorSystem {
  return DKEnvironment_createDispatcherWithNSString_withInt_withDKThreadPriorityEnum_withDKActorSystem_(name, threadsCount, priority, actorSystem);
}

+ (jlong)getActorTime {
  return DKEnvironment_getActorTime();
}

+ (jlong)getCurrentTime {
  return DKEnvironment_getCurrentTime();
}

+ (AMAtomicIntegerCompat *)createAtomicIntWithInt:(jint)init_ {
  return DKEnvironment_createAtomicIntWithInt_(init_);
}

+ (AMAtomicLongCompat *)createAtomicLongWithLong:(jlong)init_ {
  return DKEnvironment_createAtomicLongWithLong_(init_);
}

+ (AMThreadLocalCompat *)createThreadLocal {
  return DKEnvironment_createThreadLocal();
}

- (instancetype)init {
  return [super init];
}

@end

void DKEnvironment_setThreadingWithAMThreading_(id<AMThreading> threading) {
  DKEnvironment_init();
  DKEnvironment_threading_ = threading;
}

DKActorDispatcher *DKEnvironment_createDefaultDispatcherWithNSString_withDKThreadPriorityEnum_withDKActorSystem_(NSString *name, DKThreadPriorityEnum *priority, DKActorSystem *actorSystem) {
  DKEnvironment_init();
  if (DKEnvironment_threading_ == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Environment is not inited!"];
  }
  return [((id<AMThreading>) nil_chk(DKEnvironment_threading_)) createDefaultDispatcherWithNSString:name withDKThreadPriorityEnum:priority withDKActorSystem:actorSystem];
}

DKActorDispatcher *DKEnvironment_createDispatcherWithNSString_withInt_withDKThreadPriorityEnum_withDKActorSystem_(NSString *name, jint threadsCount, DKThreadPriorityEnum *priority, DKActorSystem *actorSystem) {
  DKEnvironment_init();
  if (DKEnvironment_threading_ == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Environment is not inited!"];
  }
  return [((id<AMThreading>) nil_chk(DKEnvironment_threading_)) createDispatcherWithNSString:name withInt:threadsCount withDKThreadPriorityEnum:priority withDKActorSystem:actorSystem];
}

jlong DKEnvironment_getActorTime() {
  DKEnvironment_init();
  if (DKEnvironment_threading_ == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Environment is not inited!"];
  }
  return [((id<AMThreading>) nil_chk(DKEnvironment_threading_)) getActorTime];
}

jlong DKEnvironment_getCurrentTime() {
  DKEnvironment_init();
  if (DKEnvironment_threading_ == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Environment is not inited!"];
  }
  return [((id<AMThreading>) nil_chk(DKEnvironment_threading_)) getCurrentTime];
}

AMAtomicIntegerCompat *DKEnvironment_createAtomicIntWithInt_(jint init_) {
  DKEnvironment_init();
  if (DKEnvironment_threading_ == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Environment is not inited!"];
  }
  return [((id<AMThreading>) nil_chk(DKEnvironment_threading_)) createAtomicInt:init_];
}

AMAtomicLongCompat *DKEnvironment_createAtomicLongWithLong_(jlong init_) {
  DKEnvironment_init();
  if (DKEnvironment_threading_ == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Environment is not inited!"];
  }
  return [((id<AMThreading>) nil_chk(DKEnvironment_threading_)) createAtomicLong:init_];
}

AMThreadLocalCompat *DKEnvironment_createThreadLocal() {
  DKEnvironment_init();
  if (DKEnvironment_threading_ == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Environment is not inited!"];
  }
  return [((id<AMThreading>) nil_chk(DKEnvironment_threading_)) createThreadLocal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DKEnvironment)
