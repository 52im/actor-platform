//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/im/actor/model/crypto/asn1/ASN1.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/crypto/asn1/ASN1.h"
#include "im/actor/model/crypto/asn1/ASN1BitString.h"
#include "im/actor/model/crypto/asn1/ASN1Integer.h"
#include "im/actor/model/crypto/asn1/ASN1Null.h"
#include "im/actor/model/crypto/asn1/ASN1ObjectIdentifier.h"
#include "im/actor/model/crypto/asn1/ASN1OctetString.h"
#include "im/actor/model/crypto/asn1/ASN1Primitive.h"
#include "im/actor/model/crypto/asn1/ASN1Sequence.h"
#include "im/actor/model/droidkit/bser/DataInput.h"
#include "java/io/IOException.h"

@implementation ImActorModelCryptoAsn1ASN1

+ (ImActorModelCryptoAsn1ASN1Primitive *)readObjectWithByteArray:(IOSByteArray *)sourceData {
  return ImActorModelCryptoAsn1ASN1_readObjectWithByteArray_(sourceData);
}

+ (ImActorModelCryptoAsn1ASN1Primitive *)readObjectWithByteArray:(IOSByteArray *)sourceData
                                                         withInt:(jint)offset
                                                         withInt:(jint)len {
  return ImActorModelCryptoAsn1ASN1_readObjectWithByteArray_withInt_withInt_(sourceData, offset, len);
}

+ (ImActorModelCryptoAsn1ASN1Primitive *)readObjectWithBSDataInput:(BSDataInput *)dataInput {
  return ImActorModelCryptoAsn1ASN1_readObjectWithBSDataInput_(dataInput);
}

- (instancetype)init {
  return [super init];
}

@end

ImActorModelCryptoAsn1ASN1Primitive *ImActorModelCryptoAsn1ASN1_readObjectWithByteArray_(IOSByteArray *sourceData) {
  ImActorModelCryptoAsn1ASN1_init();
  return ImActorModelCryptoAsn1ASN1_readObjectWithByteArray_withInt_withInt_(sourceData, 0, ((IOSByteArray *) nil_chk(sourceData))->size_);
}

ImActorModelCryptoAsn1ASN1Primitive *ImActorModelCryptoAsn1ASN1_readObjectWithByteArray_withInt_withInt_(IOSByteArray *sourceData, jint offset, jint len) {
  ImActorModelCryptoAsn1ASN1_init();
  return ImActorModelCryptoAsn1ASN1_readObjectWithBSDataInput_([[BSDataInput alloc] initWithByteArray:sourceData withInt:offset withInt:len]);
}

ImActorModelCryptoAsn1ASN1Primitive *ImActorModelCryptoAsn1ASN1_readObjectWithBSDataInput_(BSDataInput *dataInput) {
  ImActorModelCryptoAsn1ASN1_init();
  jint tag = [((BSDataInput *) nil_chk(dataInput)) readASN1Tag];
  jint tagNumber = [dataInput readASN1TagNumberWithInt:tag];
  jboolean isConstructed = (tag & ImActorModelCryptoAsn1ASN1Primitive_TAG_CONSTRUCTED) != 0;
  jint length = [dataInput readASN1Length];
  if ((tag & ImActorModelCryptoAsn1ASN1Primitive_TAG_APPLICATION) != 0) {
    @throw [[JavaIoIOException alloc] init];
  }
  if ((tag & ImActorModelCryptoAsn1ASN1Primitive_TAG_TAGGED) != 0) {
    @throw [[JavaIoIOException alloc] init];
  }
  BSDataInput *objDataInput;
  if (length > 0) {
    objDataInput = [[BSDataInput alloc] initWithByteArray:[dataInput getData] withInt:[dataInput getOffset] withInt:length];
    [dataInput skipWithInt:length];
  }
  else {
    objDataInput = dataInput;
  }
  switch (tagNumber) {
    case ImActorModelCryptoAsn1ASN1Primitive_TAG_SEQUENCE:
    return ImActorModelCryptoAsn1ASN1Sequence_readSequenceWithBSDataInput_(objDataInput);
    case ImActorModelCryptoAsn1ASN1Primitive_TAG_INTEGER:
    return ImActorModelCryptoAsn1ASN1Integer_readIntegerWithBSDataInput_(objDataInput);
    case ImActorModelCryptoAsn1ASN1Primitive_TAG_OBJECT_IDENTIFIER:
    return ImActorModelCryptoAsn1ASN1ObjectIdentifier_readObjectIdentifierWithBSDataInput_(objDataInput);
    case ImActorModelCryptoAsn1ASN1Primitive_TAG_NULL:
    return [[ImActorModelCryptoAsn1ASN1Null alloc] init];
    case ImActorModelCryptoAsn1ASN1Primitive_TAG_BIT_STRING:
    return ImActorModelCryptoAsn1ASN1BitString_readBitStringWithBSDataInput_(objDataInput);
    case ImActorModelCryptoAsn1ASN1Primitive_TAG_OCTET_STRING:
    return ImActorModelCryptoAsn1ASN1OctetString_readOctetStringWithBSDataInput_(objDataInput);
    default:
    @throw [[JavaIoIOException alloc] initWithNSString:JreStrcat("$I", @"Unsupported tag number #", tagNumber)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelCryptoAsn1ASN1)
