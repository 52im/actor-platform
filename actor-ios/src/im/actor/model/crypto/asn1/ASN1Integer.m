//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/im/actor/model/crypto/asn1/ASN1Integer.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/crypto/asn1/ASN1Integer.h"
#include "im/actor/model/crypto/asn1/ASN1Primitive.h"
#include "im/actor/model/droidkit/bser/DataInput.h"
#include "im/actor/model/droidkit/bser/DataOutput.h"
#include "java/io/IOException.h"
#include "java/math/BigInteger.h"

@interface ImActorModelCryptoAsn1ASN1Integer () {
 @public
  IOSByteArray *data_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelCryptoAsn1ASN1Integer, data_, IOSByteArray *)

@implementation ImActorModelCryptoAsn1ASN1Integer

+ (ImActorModelCryptoAsn1ASN1Integer *)readIntegerWithBSDataInput:(BSDataInput *)dataInput {
  return ImActorModelCryptoAsn1ASN1Integer_readIntegerWithBSDataInput_(dataInput);
}

- (instancetype)initWithByteArray:(IOSByteArray *)data {
  if (self = [super init]) {
    self->data_ = data;
  }
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)data {
  if (self = [super init]) {
    self->data_ = [((JavaMathBigInteger *) nil_chk(data)) toByteArray];
  }
  return self;
}

- (IOSByteArray *)getData {
  return data_;
}

- (JavaMathBigInteger *)asBigInteger {
  return [[JavaMathBigInteger alloc] initWithByteArray:data_];
}

- (void)serializeWithBSDataOutput:(BSDataOutput *)dataOutput {
  [((BSDataOutput *) nil_chk(dataOutput)) writeByteWithInt:ImActorModelCryptoAsn1ASN1Primitive_TAG_INTEGER];
  [dataOutput writeASN1LengthWithInt:((IOSByteArray *) nil_chk(data_))->size_];
  [dataOutput writeBytesWithByteArray:data_ withInt:0 withInt:data_->size_];
}

- (void)copyAllFieldsTo:(ImActorModelCryptoAsn1ASN1Integer *)other {
  [super copyAllFieldsTo:other];
  other->data_ = data_;
}

@end

ImActorModelCryptoAsn1ASN1Integer *ImActorModelCryptoAsn1ASN1Integer_readIntegerWithBSDataInput_(BSDataInput *dataInput) {
  ImActorModelCryptoAsn1ASN1Integer_init();
  return [[ImActorModelCryptoAsn1ASN1Integer alloc] initWithByteArray:[dataInput readBytesWithInt:[((BSDataInput *) nil_chk(dataInput)) getRemaining]]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelCryptoAsn1ASN1Integer)
