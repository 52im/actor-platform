//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/im/actor/model/crypto/asn1/ASN1Sequence.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/crypto/asn1/ASN1.h"
#include "im/actor/model/crypto/asn1/ASN1Primitive.h"
#include "im/actor/model/crypto/asn1/ASN1Sequence.h"
#include "im/actor/model/droidkit/bser/DataInput.h"
#include "im/actor/model/droidkit/bser/DataOutput.h"
#include "java/io/IOException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface BCASN1Sequence () {
 @public
  JavaUtilArrayList *sequence_;
}
@end

J2OBJC_FIELD_SETTER(BCASN1Sequence, sequence_, JavaUtilArrayList *)

@implementation BCASN1Sequence

+ (BCASN1Sequence *)readSequenceWithBSDataInput:(BSDataInput *)dataInput {
  return BCASN1Sequence_readSequenceWithBSDataInput_(dataInput);
}

- (instancetype)init {
  if (self = [super init]) {
    self->sequence_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)sequence {
  if (self = [super init]) {
    self->sequence_ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:sequence];
  }
  return self;
}

- (instancetype)initWithBCASN1PrimitiveArray:(IOSObjectArray *)sequence {
  if (self = [super init]) {
    self->sequence_ = [[JavaUtilArrayList alloc] init];
    {
      IOSObjectArray *a__ = sequence;
      BCASN1Primitive * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      BCASN1Primitive * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        BCASN1Primitive *p = *b__++;
        [self->sequence_ addWithId:p];
      }
    }
  }
  return self;
}

- (void)addWithBCASN1Primitive:(BCASN1Primitive *)item {
  [((JavaUtilArrayList *) nil_chk(sequence_)) addWithId:item];
}

- (JavaUtilArrayList *)getSequence {
  return sequence_;
}

- (jint)size {
  return [((JavaUtilArrayList *) nil_chk(sequence_)) size];
}

- (BCASN1Primitive *)getWithInt:(jint)index {
  return [((JavaUtilArrayList *) nil_chk(sequence_)) getWithInt:index];
}

- (void)serializeWithBSDataOutput:(BSDataOutput *)dataOutput {
  [((BSDataOutput *) nil_chk(dataOutput)) writeByteWithInt:BCASN1Primitive_TAG_SEQUENCE | BCASN1Primitive_TAG_CONSTRUCTED];
  BSDataOutput *content = [[BSDataOutput alloc] init];
  for (BCASN1Primitive * __strong primitive in nil_chk(sequence_)) {
    [((BCASN1Primitive *) nil_chk(primitive)) serializeWithBSDataOutput:content];
  }
  IOSByteArray *contentV = [content toByteArray];
  [dataOutput writeASN1LengthWithInt:((IOSByteArray *) nil_chk(contentV))->size_];
  [dataOutput writeBytesWithByteArray:contentV withInt:0 withInt:contentV->size_];
}

- (void)copyAllFieldsTo:(BCASN1Sequence *)other {
  [super copyAllFieldsTo:other];
  other->sequence_ = sequence_;
}

@end

BCASN1Sequence *BCASN1Sequence_readSequenceWithBSDataInput_(BSDataInput *dataInput) {
  BCASN1Sequence_init();
  BCASN1Sequence *sequence = [[BCASN1Sequence alloc] init];
  while (![((BSDataInput *) nil_chk(dataInput)) isEOF]) {
    [sequence addWithBCASN1Primitive:BCASN1_readObjectWithBSDataInput_(dataInput)];
  }
  return sequence;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(BCASN1Sequence)
