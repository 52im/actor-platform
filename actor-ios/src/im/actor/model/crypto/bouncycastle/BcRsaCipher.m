//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/im/actor/model/crypto/bouncycastle/BcRsaCipher.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/crypto/bouncycastle/BcRsaCipher.h"
#include "java/lang/Exception.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/pkcs/PrivateKeyInfo.h"
#include "org/bouncycastle/crypto/AsymmetricBlockCipher.h"
#include "org/bouncycastle/crypto/digests/SHA1Digest.h"
#include "org/bouncycastle/crypto/encodings/OAEPEncoding.h"
#include "org/bouncycastle/crypto/engines/RSAEngine.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/crypto/params/RSAKeyParameters.h"
#include "org/bouncycastle/crypto/params/RSAPrivateCrtKeyParameters.h"
#include "org/bouncycastle/crypto/util/PrivateKeyFactory.h"

@interface ImActorModelCryptoBouncycastleBcRsaCipher () {
 @public
  id<OrgBouncycastleCryptoAsymmetricBlockCipher> cipher_BcRsaCipher_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelCryptoBouncycastleBcRsaCipher, cipher_BcRsaCipher_, id<OrgBouncycastleCryptoAsymmetricBlockCipher>)

@implementation ImActorModelCryptoBouncycastleBcRsaCipher

- (instancetype)initWithByteArray:(IOSByteArray *)publicKey
                    withByteArray:(IOSByteArray *)privateKey {
  if (self = [super initWithByteArray:publicKey]) {
    @try {
      OrgBouncycastleAsn1PkcsPrivateKeyInfo *info = [[OrgBouncycastleAsn1PkcsPrivateKeyInfo alloc] initWithOrgBouncycastleAsn1ASN1Sequence:OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(privateKey)];
      OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *privateCrtKeyParameters = (OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *) check_class_cast(OrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithOrgBouncycastleAsn1PkcsPrivateKeyInfo_(info), [OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters class]);
      OrgBouncycastleCryptoParamsAsymmetricKeyParameter *keyParameter = [[OrgBouncycastleCryptoParamsRSAKeyParameters alloc] initWithBoolean:YES withJavaMathBigInteger:[((OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *) nil_chk(privateCrtKeyParameters)) getModulus] withJavaMathBigInteger:[privateCrtKeyParameters getExponent]];
      cipher_BcRsaCipher_ = [[OrgBouncycastleCryptoEncodingsOAEPEncoding alloc] initWithOrgBouncycastleCryptoAsymmetricBlockCipher:[[OrgBouncycastleCryptoEnginesRSAEngine alloc] init] withOrgBouncycastleCryptoDigest:[[OrgBouncycastleCryptoDigestsSHA1Digest alloc] init]];
      [cipher_BcRsaCipher_ init__WithBoolean:NO withOrgBouncycastleCryptoCipherParameters:keyParameter];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
  }
  return self;
}

- (IOSByteArray *)decryptWithByteArray:(IOSByteArray *)sourceData {
  @synchronized(self) {
    if (cipher_BcRsaCipher_ == nil) {
      return nil;
    }
    @try {
      return [((id<OrgBouncycastleCryptoAsymmetricBlockCipher>) nil_chk(cipher_BcRsaCipher_)) processBlockWithByteArray:sourceData withInt:0 withInt:((IOSByteArray *) nil_chk(sourceData))->size_];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      return nil;
    }
  }
}

- (void)copyAllFieldsTo:(ImActorModelCryptoBouncycastleBcRsaCipher *)other {
  [super copyAllFieldsTo:other];
  other->cipher_BcRsaCipher_ = cipher_BcRsaCipher_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelCryptoBouncycastleBcRsaCipher)
