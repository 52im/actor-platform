//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/im/actor/model/crypto/bouncycastle/BouncyCastleProvider.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/crypto/AesCipher.h"
#include "im/actor/model/crypto/CryptoKeyPair.h"
#include "im/actor/model/crypto/RsaCipher.h"
#include "im/actor/model/crypto/RsaEncryptCipher.h"
#include "im/actor/model/crypto/bouncycastle/BcAesCipher.h"
#include "im/actor/model/crypto/bouncycastle/BcRsaCipher.h"
#include "im/actor/model/crypto/bouncycastle/BcRsaEncryptCipher.h"
#include "im/actor/model/crypto/bouncycastle/BouncyCastleProvider.h"
#include "im/actor/model/crypto/encoding/X509RsaPublicKey.h"
#include "java/io/IOException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/asn1/ASN1Encoding.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/DERNull.h"
#include "org/bouncycastle/asn1/pkcs/PKCSObjectIdentifiers.h"
#include "org/bouncycastle/asn1/pkcs/PrivateKeyInfo.h"
#include "org/bouncycastle/asn1/pkcs/RSAPrivateKey.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/digests/MD5Digest.h"
#include "org/bouncycastle/crypto/digests/SHA256Digest.h"
#include "org/bouncycastle/crypto/digests/SHA512Digest.h"
#include "org/bouncycastle/crypto/generators/RSAKeyPairGenerator.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/crypto/params/RSAKeyGenerationParameters.h"
#include "org/bouncycastle/crypto/params/RSAKeyParameters.h"
#include "org/bouncycastle/crypto/params/RSAPrivateCrtKeyParameters.h"

@interface ImActorModelCryptoBouncycastleBouncyCastleProvider () {
}
@end

BOOL ImActorModelCryptoBouncycastleBouncyCastleProvider_initialized = NO;

@implementation ImActorModelCryptoBouncycastleBouncyCastleProvider

JavaMathBigInteger * ImActorModelCryptoBouncycastleBouncyCastleProvider_RSA_EXPONENT_;
JavaMathBigInteger * ImActorModelCryptoBouncycastleBouncyCastleProvider_ZERO_;
JavaSecuritySecureRandom * ImActorModelCryptoBouncycastleBouncyCastleProvider_RANDOM_;

- (ImActorModelCryptoCryptoKeyPair *)generateRSA1024KeyPair {
  OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator *generator = [[OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator alloc] init];
  [generator init__WithOrgBouncycastleCryptoKeyGenerationParameters:[[OrgBouncycastleCryptoParamsRSAKeyGenerationParameters alloc] initWithJavaMathBigInteger:ImActorModelCryptoBouncycastleBouncyCastleProvider_RSA_EXPONENT_ withJavaSecuritySecureRandom:[[JavaSecuritySecureRandom alloc] init] withInt:ImActorModelCryptoBouncycastleBouncyCastleProvider_RSA_1024_STREIGHT withInt:ImActorModelCryptoBouncycastleBouncyCastleProvider_RSA_CERTAINITY]];
  OrgBouncycastleCryptoAsymmetricCipherKeyPair *res = [generator generateKeyPair];
  OrgBouncycastleCryptoParamsRSAKeyParameters *rsaPublicKey = (OrgBouncycastleCryptoParamsRSAKeyParameters *) check_class_cast([((OrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(res)) getPublic], [OrgBouncycastleCryptoParamsRSAKeyParameters class]);
  IOSByteArray *publicKey = [((ImActorModelCryptoEncodingX509RsaPublicKey *) [[ImActorModelCryptoEncodingX509RsaPublicKey alloc] initWithJavaMathBigInteger:[((OrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(rsaPublicKey)) getModulus] withJavaMathBigInteger:[rsaPublicKey getExponent]]) serialize];
  OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *parameter = (OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *) check_class_cast([res getPrivate], [OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters class]);
  OrgBouncycastleAsn1PkcsRSAPrivateKey *pksPrivateKey = [[OrgBouncycastleAsn1PkcsRSAPrivateKey alloc] initWithJavaMathBigInteger:[((OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *) nil_chk(parameter)) getModulus] withJavaMathBigInteger:ImActorModelCryptoBouncycastleBouncyCastleProvider_ZERO_ withJavaMathBigInteger:[parameter getExponent] withJavaMathBigInteger:ImActorModelCryptoBouncycastleBouncyCastleProvider_ZERO_ withJavaMathBigInteger:ImActorModelCryptoBouncycastleBouncyCastleProvider_ZERO_ withJavaMathBigInteger:ImActorModelCryptoBouncycastleBouncyCastleProvider_ZERO_ withJavaMathBigInteger:ImActorModelCryptoBouncycastleBouncyCastleProvider_ZERO_ withJavaMathBigInteger:ImActorModelCryptoBouncycastleBouncyCastleProvider_ZERO_];
  IOSByteArray *privateKey;
  @try {
    OrgBouncycastleAsn1PkcsPrivateKeyInfo *info = [[OrgBouncycastleAsn1PkcsPrivateKeyInfo alloc] initWithOrgBouncycastleAsn1X509AlgorithmIdentifier:[[OrgBouncycastleAsn1X509AlgorithmIdentifier alloc] initWithOrgBouncycastleAsn1ASN1ObjectIdentifier:OrgBouncycastleAsn1PkcsPKCSObjectIdentifiers_get_rsaEncryption_() withOrgBouncycastleAsn1ASN1Encodable:OrgBouncycastleAsn1DERNull_get_INSTANCE_()] withOrgBouncycastleAsn1ASN1Encodable:[pksPrivateKey toASN1Primitive]];
    privateKey = [info getEncodedWithNSString:OrgBouncycastleAsn1ASN1Encoding_get_DER_()];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    return nil;
  }
  return [[ImActorModelCryptoCryptoKeyPair alloc] initWithByteArray:publicKey withByteArray:privateKey];
}

- (id<ImActorModelCryptoRsaEncryptCipher>)createRSAOAEPSHA1CipherWithByteArray:(IOSByteArray *)key {
  return [[ImActorModelCryptoBouncycastleBcRsaEncryptCipher alloc] initWithByteArray:key];
}

- (id<ImActorModelCryptoRsaCipher>)createRSAOAEPSHA1CipherWithByteArray:(IOSByteArray *)publicKey
                                                          withByteArray:(IOSByteArray *)privateKey {
  return [[ImActorModelCryptoBouncycastleBcRsaCipher alloc] initWithByteArray:publicKey withByteArray:privateKey];
}

- (id<ImActorModelCryptoAesCipher>)createAESCBCPKS7CipherWithByteArray:(IOSByteArray *)key
                                                         withByteArray:(IOSByteArray *)iv {
  return [[ImActorModelCryptoBouncycastleBcAesCipher alloc] initWithByteArray:key withByteArray:iv];
}

- (IOSByteArray *)MD5WithByteArray:(IOSByteArray *)data {
  OrgBouncycastleCryptoDigestsMD5Digest *digest = [[OrgBouncycastleCryptoDigestsMD5Digest alloc] init];
  [digest updateWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_];
  IOSByteArray *res = [IOSByteArray newArrayWithLength:16];
  [digest doFinalWithByteArray:res withInt:0];
  return res;
}

- (IOSByteArray *)SHA256WithByteArray:(IOSByteArray *)data {
  OrgBouncycastleCryptoDigestsSHA256Digest *digest = [[OrgBouncycastleCryptoDigestsSHA256Digest alloc] init];
  [digest updateWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_];
  IOSByteArray *res = [IOSByteArray newArrayWithLength:32];
  [digest doFinalWithByteArray:res withInt:0];
  return res;
}

- (IOSByteArray *)SHA512WithByteArray:(IOSByteArray *)data {
  OrgBouncycastleCryptoDigestsSHA512Digest *digest = [[OrgBouncycastleCryptoDigestsSHA512Digest alloc] init];
  [digest updateWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_];
  IOSByteArray *res = [IOSByteArray newArrayWithLength:64];
  [digest doFinalWithByteArray:res withInt:0];
  return res;
}

- (IOSByteArray *)randomBytesWithInt:(jint)length {
  IOSByteArray *res = [IOSByteArray newArrayWithLength:length];
  @synchronized(ImActorModelCryptoBouncycastleBouncyCastleProvider_RANDOM_) {
    [((JavaSecuritySecureRandom *) nil_chk(ImActorModelCryptoBouncycastleBouncyCastleProvider_RANDOM_)) nextBytesWithByteArray:res];
  }
  return res;
}

- (jint)randomIntWithInt:(jint)maxValue {
  @synchronized(ImActorModelCryptoBouncycastleBouncyCastleProvider_RANDOM_) {
    return [((JavaSecuritySecureRandom *) nil_chk(ImActorModelCryptoBouncycastleBouncyCastleProvider_RANDOM_)) nextIntWithInt:maxValue];
  }
}

- (instancetype)init {
  return [super init];
}

+ (void)initialize {
  if (self == [ImActorModelCryptoBouncycastleBouncyCastleProvider class]) {
    ImActorModelCryptoBouncycastleBouncyCastleProvider_RSA_EXPONENT_ = [[JavaMathBigInteger alloc] initWithNSString:@"3"];
    ImActorModelCryptoBouncycastleBouncyCastleProvider_ZERO_ = JavaMathBigInteger_valueOfWithLong_(0);
    ImActorModelCryptoBouncycastleBouncyCastleProvider_RANDOM_ = [[JavaSecuritySecureRandom alloc] init];
    J2OBJC_SET_INITIALIZED(ImActorModelCryptoBouncycastleBouncyCastleProvider)
  }
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelCryptoBouncycastleBouncyCastleProvider)
