//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/math/ec/tools/DiscoverEndomorphisms.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/asn1/x9/ECNamedCurveTable.h"
#include "org/bouncycastle/asn1/x9/X9ECParameters.h"
#include "org/bouncycastle/math/ec/ECAlgorithms.h"
#include "org/bouncycastle/math/ec/ECConstants.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/tools/DiscoverEndomorphisms.h"
#include "org/bouncycastle/math/field/FiniteField.h"
#include "org/bouncycastle/util/BigIntegers.h"

__attribute__((unused)) static void OrgBouncycastleMathEcToolsDiscoverEndomorphisms_discoverEndomorphismWithNSString_(NSString *curveName);
__attribute__((unused)) static void OrgBouncycastleMathEcToolsDiscoverEndomorphisms_printGLVTypeBParametersWithOrgBouncycastleAsn1X9X9ECParameters_(OrgBouncycastleAsn1X9X9ECParameters *x9);
__attribute__((unused)) static void OrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(NSString *name, id value);
__attribute__((unused)) static jboolean OrgBouncycastleMathEcToolsDiscoverEndomorphisms_areRelativelyPrimeWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b);
__attribute__((unused)) static IOSObjectArray *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_calculateRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *mid, JavaMathBigInteger *off, JavaMathBigInteger *div);
__attribute__((unused)) static IOSObjectArray *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_extEuclidBezoutWithJavaMathBigIntegerArray_(IOSObjectArray *ab);
__attribute__((unused)) static IOSObjectArray *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_extEuclidGLVWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *n, JavaMathBigInteger *lambda);
__attribute__((unused)) static IOSObjectArray *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_chooseShortestWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *u, IOSObjectArray *v);
__attribute__((unused)) static IOSObjectArray *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_intersectWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *ab, IOSObjectArray *cd);
__attribute__((unused)) static jboolean OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isLessThanSqrtWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b);
__attribute__((unused)) static jboolean OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isShorterWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *u, IOSObjectArray *v);
__attribute__((unused)) static jboolean OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isVectorBoundedBySqrtWithJavaMathBigIntegerArray_withJavaMathBigInteger_(IOSObjectArray *v, JavaMathBigInteger *n);
__attribute__((unused)) static IOSObjectArray *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_orderWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b);
__attribute__((unused)) static JavaMathBigInteger *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_roundQuotientWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *x, JavaMathBigInteger *y);
__attribute__((unused)) static JavaMathBigInteger *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_solveQuadraticEquationWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *n, JavaMathBigInteger *r, JavaMathBigInteger *s);
__attribute__((unused)) static JavaMathBigInteger *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isqrtWithJavaMathBigInteger_(JavaMathBigInteger *x);
__attribute__((unused)) static void OrgBouncycastleMathEcToolsDiscoverEndomorphisms_swapWithJavaMathBigIntegerArray_(IOSObjectArray *ab);

@interface OrgBouncycastleMathEcToolsDiscoverEndomorphisms () {
}

+ (void)discoverEndomorphismWithNSString:(NSString *)curveName;

+ (void)printGLVTypeBParametersWithOrgBouncycastleAsn1X9X9ECParameters:(OrgBouncycastleAsn1X9X9ECParameters *)x9;

+ (void)printPropertyWithNSString:(NSString *)name
                           withId:(id)value;

+ (jboolean)areRelativelyPrimeWithJavaMathBigInteger:(JavaMathBigInteger *)a
                              withJavaMathBigInteger:(JavaMathBigInteger *)b;

+ (IOSObjectArray *)calculateRangeWithJavaMathBigInteger:(JavaMathBigInteger *)mid
                                  withJavaMathBigInteger:(JavaMathBigInteger *)off
                                  withJavaMathBigInteger:(JavaMathBigInteger *)div;

+ (IOSObjectArray *)extEuclidBezoutWithJavaMathBigIntegerArray:(IOSObjectArray *)ab;

+ (IOSObjectArray *)extEuclidGLVWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                withJavaMathBigInteger:(JavaMathBigInteger *)lambda;

+ (IOSObjectArray *)chooseShortestWithJavaMathBigIntegerArray:(IOSObjectArray *)u
                                  withJavaMathBigIntegerArray:(IOSObjectArray *)v;

+ (IOSObjectArray *)intersectWithJavaMathBigIntegerArray:(IOSObjectArray *)ab
                             withJavaMathBigIntegerArray:(IOSObjectArray *)cd;

+ (jboolean)isLessThanSqrtWithJavaMathBigInteger:(JavaMathBigInteger *)a
                          withJavaMathBigInteger:(JavaMathBigInteger *)b;

+ (jboolean)isShorterWithJavaMathBigIntegerArray:(IOSObjectArray *)u
                     withJavaMathBigIntegerArray:(IOSObjectArray *)v;

+ (jboolean)isVectorBoundedBySqrtWithJavaMathBigIntegerArray:(IOSObjectArray *)v
                                      withJavaMathBigInteger:(JavaMathBigInteger *)n;

+ (IOSObjectArray *)orderWithJavaMathBigInteger:(JavaMathBigInteger *)a
                         withJavaMathBigInteger:(JavaMathBigInteger *)b;

+ (JavaMathBigInteger *)roundQuotientWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                     withJavaMathBigInteger:(JavaMathBigInteger *)y;

+ (JavaMathBigInteger *)solveQuadraticEquationWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                              withJavaMathBigInteger:(JavaMathBigInteger *)r
                                              withJavaMathBigInteger:(JavaMathBigInteger *)s;

+ (JavaMathBigInteger *)isqrtWithJavaMathBigInteger:(JavaMathBigInteger *)x;

+ (void)swapWithJavaMathBigIntegerArray:(IOSObjectArray *)ab;
@end

@implementation OrgBouncycastleMathEcToolsDiscoverEndomorphisms

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_mainWithNSStringArray_(args);
}

+ (void)discoverEndomorphismWithNSString:(NSString *)curveName {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_discoverEndomorphismWithNSString_(curveName);
}

+ (void)printGLVTypeBParametersWithOrgBouncycastleAsn1X9X9ECParameters:(OrgBouncycastleAsn1X9X9ECParameters *)x9 {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_printGLVTypeBParametersWithOrgBouncycastleAsn1X9X9ECParameters_(x9);
}

+ (void)printPropertyWithNSString:(NSString *)name
                           withId:(id)value {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(name, value);
}

+ (jboolean)areRelativelyPrimeWithJavaMathBigInteger:(JavaMathBigInteger *)a
                              withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return OrgBouncycastleMathEcToolsDiscoverEndomorphisms_areRelativelyPrimeWithJavaMathBigInteger_withJavaMathBigInteger_(a, b);
}

+ (IOSObjectArray *)calculateRangeWithJavaMathBigInteger:(JavaMathBigInteger *)mid
                                  withJavaMathBigInteger:(JavaMathBigInteger *)off
                                  withJavaMathBigInteger:(JavaMathBigInteger *)div {
  return OrgBouncycastleMathEcToolsDiscoverEndomorphisms_calculateRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(mid, off, div);
}

+ (IOSObjectArray *)extEuclidBezoutWithJavaMathBigIntegerArray:(IOSObjectArray *)ab {
  return OrgBouncycastleMathEcToolsDiscoverEndomorphisms_extEuclidBezoutWithJavaMathBigIntegerArray_(ab);
}

+ (IOSObjectArray *)extEuclidGLVWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                withJavaMathBigInteger:(JavaMathBigInteger *)lambda {
  return OrgBouncycastleMathEcToolsDiscoverEndomorphisms_extEuclidGLVWithJavaMathBigInteger_withJavaMathBigInteger_(n, lambda);
}

+ (IOSObjectArray *)chooseShortestWithJavaMathBigIntegerArray:(IOSObjectArray *)u
                                  withJavaMathBigIntegerArray:(IOSObjectArray *)v {
  return OrgBouncycastleMathEcToolsDiscoverEndomorphisms_chooseShortestWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(u, v);
}

+ (IOSObjectArray *)intersectWithJavaMathBigIntegerArray:(IOSObjectArray *)ab
                             withJavaMathBigIntegerArray:(IOSObjectArray *)cd {
  return OrgBouncycastleMathEcToolsDiscoverEndomorphisms_intersectWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(ab, cd);
}

+ (jboolean)isLessThanSqrtWithJavaMathBigInteger:(JavaMathBigInteger *)a
                          withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isLessThanSqrtWithJavaMathBigInteger_withJavaMathBigInteger_(a, b);
}

+ (jboolean)isShorterWithJavaMathBigIntegerArray:(IOSObjectArray *)u
                     withJavaMathBigIntegerArray:(IOSObjectArray *)v {
  return OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isShorterWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(u, v);
}

+ (jboolean)isVectorBoundedBySqrtWithJavaMathBigIntegerArray:(IOSObjectArray *)v
                                      withJavaMathBigInteger:(JavaMathBigInteger *)n {
  return OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isVectorBoundedBySqrtWithJavaMathBigIntegerArray_withJavaMathBigInteger_(v, n);
}

+ (IOSObjectArray *)orderWithJavaMathBigInteger:(JavaMathBigInteger *)a
                         withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return OrgBouncycastleMathEcToolsDiscoverEndomorphisms_orderWithJavaMathBigInteger_withJavaMathBigInteger_(a, b);
}

+ (JavaMathBigInteger *)roundQuotientWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                     withJavaMathBigInteger:(JavaMathBigInteger *)y {
  return OrgBouncycastleMathEcToolsDiscoverEndomorphisms_roundQuotientWithJavaMathBigInteger_withJavaMathBigInteger_(x, y);
}

+ (JavaMathBigInteger *)solveQuadraticEquationWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                              withJavaMathBigInteger:(JavaMathBigInteger *)r
                                              withJavaMathBigInteger:(JavaMathBigInteger *)s {
  return OrgBouncycastleMathEcToolsDiscoverEndomorphisms_solveQuadraticEquationWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(n, r, s);
}

+ (JavaMathBigInteger *)isqrtWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isqrtWithJavaMathBigInteger_(x);
}

+ (void)swapWithJavaMathBigIntegerArray:(IOSObjectArray *)ab {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_swapWithJavaMathBigIntegerArray_(ab);
}

- (instancetype)init {
  return [super init];
}

@end

void OrgBouncycastleMathEcToolsDiscoverEndomorphisms_mainWithNSStringArray_(IOSObjectArray *args) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  if (((IOSObjectArray *) nil_chk(args))->size_ < 1) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:@"Expected a list of curve names as arguments"];
    return;
  }
  for (jint i = 0; i < args->size_; ++i) {
    OrgBouncycastleMathEcToolsDiscoverEndomorphisms_discoverEndomorphismWithNSString_(IOSObjectArray_Get(args, i));
  }
}

void OrgBouncycastleMathEcToolsDiscoverEndomorphisms_discoverEndomorphismWithNSString_(NSString *curveName) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  OrgBouncycastleAsn1X9X9ECParameters *x9 = OrgBouncycastleAsn1X9ECNamedCurveTable_getByNameWithNSString_(curveName);
  if (x9 == nil) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"Unknown curve: ", curveName)];
    return;
  }
  OrgBouncycastleMathEcECCurve *c = [((OrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve];
  if (OrgBouncycastleMathEcECAlgorithms_isFpCurveWithOrgBouncycastleMathEcECCurve_(c)) {
    JavaMathBigInteger *characteristic = [((id<OrgBouncycastleMathFieldFiniteField>) nil_chk([((OrgBouncycastleMathEcECCurve *) nil_chk(c)) getField])) getCharacteristic];
    if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk([c getA])) isZero] && [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(characteristic)) modWithJavaMathBigInteger:OrgBouncycastleMathEcECConstants_get_THREE_()])) isEqual:OrgBouncycastleMathEcECConstants_get_ONE_()]) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$$", @"Curve '", curveName, @"' has a 'GLV Type B' endomorphism with these parameters: ")];
      OrgBouncycastleMathEcToolsDiscoverEndomorphisms_printGLVTypeBParametersWithOrgBouncycastleAsn1X9X9ECParameters_(x9);
    }
  }
}

void OrgBouncycastleMathEcToolsDiscoverEndomorphisms_printGLVTypeBParametersWithOrgBouncycastleAsn1X9X9ECParameters_(OrgBouncycastleAsn1X9X9ECParameters *x9) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  JavaMathBigInteger *n = [((OrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getN];
  IOSObjectArray *v1 = nil;
  IOSObjectArray *v2 = nil;
  JavaMathBigInteger *lambda = OrgBouncycastleMathEcToolsDiscoverEndomorphisms_solveQuadraticEquationWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(n, OrgBouncycastleMathEcECConstants_get_ONE_(), OrgBouncycastleMathEcECConstants_get_ONE_());
  IOSObjectArray *rt = OrgBouncycastleMathEcToolsDiscoverEndomorphisms_extEuclidGLVWithJavaMathBigInteger_withJavaMathBigInteger_(n, lambda);
  v1 = [IOSObjectArray newArrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk(rt), 2), [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(rt, 3))) negate] } count:2 type:JavaMathBigInteger_class_()];
  v2 = OrgBouncycastleMathEcToolsDiscoverEndomorphisms_chooseShortestWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_([IOSObjectArray newArrayWithObjects:(id[]){ IOSObjectArray_Get(rt, 0), [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(rt, 1))) negate] } count:2 type:JavaMathBigInteger_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ IOSObjectArray_Get(rt, 4), [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(rt, 5))) negate] } count:2 type:JavaMathBigInteger_class_()]);
  if (!OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isVectorBoundedBySqrtWithJavaMathBigIntegerArray_withJavaMathBigInteger_(v2, n) && OrgBouncycastleMathEcToolsDiscoverEndomorphisms_areRelativelyPrimeWithJavaMathBigInteger_withJavaMathBigInteger_(IOSObjectArray_Get(v1, 0), IOSObjectArray_Get(v1, 1))) {
    JavaMathBigInteger *r = IOSObjectArray_Get(v1, 0), *t = IOSObjectArray_Get(v1, 1), *s = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(r)) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(t)) multiplyWithJavaMathBigInteger:lambda]])) divideWithJavaMathBigInteger:n];
    IOSObjectArray *vw = OrgBouncycastleMathEcToolsDiscoverEndomorphisms_extEuclidBezoutWithJavaMathBigIntegerArray_([IOSObjectArray newArrayWithObjects:(id[]){ [((JavaMathBigInteger *) nil_chk(s)) abs], [t abs] } count:2 type:JavaMathBigInteger_class_()]);
    JavaMathBigInteger *v = IOSObjectArray_Get(nil_chk(vw), 0), *w = IOSObjectArray_Get(vw, 1);
    if ([s signum] < 0) {
      v = [((JavaMathBigInteger *) nil_chk(v)) negate];
    }
    if ([t signum] > 0) {
      w = [((JavaMathBigInteger *) nil_chk(w)) negate];
    }
    JavaMathBigInteger *check = [((JavaMathBigInteger *) nil_chk([s multiplyWithJavaMathBigInteger:v])) subtractWithJavaMathBigInteger:[t multiplyWithJavaMathBigInteger:w]];
    if (![((JavaMathBigInteger *) nil_chk(check)) isEqual:OrgBouncycastleMathEcECConstants_get_ONE_()]) {
      @throw [[JavaLangIllegalStateException alloc] init];
    }
    JavaMathBigInteger *x = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(w)) multiplyWithJavaMathBigInteger:n])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(v)) multiplyWithJavaMathBigInteger:lambda]];
    JavaMathBigInteger *base1 = [v negate];
    JavaMathBigInteger *base2 = [((JavaMathBigInteger *) nil_chk(x)) negate];
    JavaMathBigInteger *sqrtN = [((JavaMathBigInteger *) nil_chk(OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isqrtWithJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(n)) subtractWithJavaMathBigInteger:OrgBouncycastleMathEcECConstants_get_ONE_()]))) addWithJavaMathBigInteger:OrgBouncycastleMathEcECConstants_get_ONE_()];
    IOSObjectArray *I1 = OrgBouncycastleMathEcToolsDiscoverEndomorphisms_calculateRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(base1, sqrtN, t);
    IOSObjectArray *I2 = OrgBouncycastleMathEcToolsDiscoverEndomorphisms_calculateRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(base2, sqrtN, r);
    IOSObjectArray *range = OrgBouncycastleMathEcToolsDiscoverEndomorphisms_intersectWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(I1, I2);
    if (range != nil) {
      for (JavaMathBigInteger *alpha = IOSObjectArray_Get(range, 0); [((JavaMathBigInteger *) nil_chk(alpha)) compareToWithId:IOSObjectArray_Get(range, 1)] <= 0; alpha = [alpha addWithJavaMathBigInteger:OrgBouncycastleMathEcECConstants_get_ONE_()]) {
        IOSObjectArray *candidate = [IOSObjectArray newArrayWithObjects:(id[]){ [x addWithJavaMathBigInteger:[alpha multiplyWithJavaMathBigInteger:r]], [v addWithJavaMathBigInteger:[alpha multiplyWithJavaMathBigInteger:t]] } count:2 type:JavaMathBigInteger_class_()];
        if (OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isShorterWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(candidate, v2)) {
          v2 = candidate;
        }
      }
    }
  }
  OrgBouncycastleMathEcECFieldElement *beta;
  {
    OrgBouncycastleMathEcECPoint *G = [((OrgBouncycastleMathEcECPoint *) nil_chk([x9 getG])) normalize];
    OrgBouncycastleMathEcECPoint *mapG = [((OrgBouncycastleMathEcECPoint *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(G)) multiplyWithJavaMathBigInteger:lambda])) normalize];
    if (![((OrgBouncycastleMathEcECFieldElement *) nil_chk([G getYCoord])) isEqual:[((OrgBouncycastleMathEcECPoint *) nil_chk(mapG)) getYCoord]]) {
      @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Derivation of GLV Type B parameters failed unexpectedly"];
    }
    JavaMathBigInteger *q = [((id<OrgBouncycastleMathFieldFiniteField>) nil_chk([((OrgBouncycastleMathEcECCurve *) nil_chk([x9 getCurve])) getField])) getCharacteristic];
    JavaMathBigInteger *e = [((JavaMathBigInteger *) nil_chk(q)) divideWithJavaMathBigInteger:OrgBouncycastleMathEcECConstants_get_THREE_()];
    JavaSecuritySecureRandom *random = [[JavaSecuritySecureRandom alloc] init];
    JavaMathBigInteger *b;
    do {
      JavaMathBigInteger *r = OrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(OrgBouncycastleMathEcECConstants_get_TWO_(), [q subtractWithJavaMathBigInteger:OrgBouncycastleMathEcECConstants_get_TWO_()], random);
      b = [((JavaMathBigInteger *) nil_chk(r)) modPowWithJavaMathBigInteger:e withJavaMathBigInteger:q];
    }
    while ([((JavaMathBigInteger *) nil_chk(b)) isEqual:OrgBouncycastleMathEcECConstants_get_ONE_()]);
    beta = [((OrgBouncycastleMathEcECCurve *) nil_chk([x9 getCurve])) fromBigIntegerWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(OrgBouncycastleMathEcECConstants_get_TWO_())) modPowWithJavaMathBigInteger:e withJavaMathBigInteger:q]];
    if (![((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([G getXCoord])) multiplyWithOrgBouncycastleMathEcECFieldElement:beta])) isEqual:[mapG getXCoord]]) {
      beta = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(beta)) square];
      if (![((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([G getXCoord])) multiplyWithOrgBouncycastleMathEcECFieldElement:beta])) isEqual:[mapG getXCoord]]) {
        @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Derivation of GLV Type B parameters failed unexpectedly"];
      }
    }
  }
  JavaMathBigInteger *d = [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v1, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(v2), 1)]))) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v1, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(v2, 0)]];
  jint bits = [((JavaMathBigInteger *) nil_chk(n)) bitLength] + 16 - ([n bitLength] & 7);
  JavaMathBigInteger *g1 = OrgBouncycastleMathEcToolsDiscoverEndomorphisms_roundQuotientWithJavaMathBigInteger_withJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v2, 1))) shiftLeftWithInt:bits], d);
  JavaMathBigInteger *g2 = [((JavaMathBigInteger *) nil_chk(OrgBouncycastleMathEcToolsDiscoverEndomorphisms_roundQuotientWithJavaMathBigInteger_withJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v1, 1))) shiftLeftWithInt:bits], d))) negate];
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(@"Beta", [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(beta)) toBigInteger])) toStringWithInt:OrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix]);
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(@"Lambda", [((JavaMathBigInteger *) nil_chk(lambda)) toStringWithInt:OrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix]);
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(@"v1", JreStrcat("$$$$$", @"{ ", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v1, 0))) toStringWithInt:OrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix], @", ", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v1, 1))) toStringWithInt:OrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix], @" }"));
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(@"v2", JreStrcat("$$$$$", @"{ ", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v2, 0))) toStringWithInt:OrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix], @", ", [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v2, 1))) toStringWithInt:OrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix], @" }"));
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(@"(OPT) g1", [((JavaMathBigInteger *) nil_chk(g1)) toStringWithInt:OrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix]);
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(@"(OPT) g2", [((JavaMathBigInteger *) nil_chk(g2)) toStringWithInt:OrgBouncycastleMathEcToolsDiscoverEndomorphisms_radix]);
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(@"(OPT) bits", JavaLangInteger_toStringWithInt_(bits));
}

void OrgBouncycastleMathEcToolsDiscoverEndomorphisms_printPropertyWithNSString_withId_(NSString *name, id value) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] initWithNSString:@"  "];
  (void) [sb appendWithNSString:name];
  while ([sb sequenceLength] < 20) {
    (void) [sb appendWithChar:' '];
  }
  (void) [sb appendWithNSString:@"= "];
  (void) [sb appendWithNSString:[nil_chk(value) description]];
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:[sb description]];
}

jboolean OrgBouncycastleMathEcToolsDiscoverEndomorphisms_areRelativelyPrimeWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(a)) gcdWithJavaMathBigInteger:b])) isEqual:OrgBouncycastleMathEcECConstants_get_ONE_()];
}

IOSObjectArray *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_calculateRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *mid, JavaMathBigInteger *off, JavaMathBigInteger *div) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  JavaMathBigInteger *i1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(mid)) subtractWithJavaMathBigInteger:off])) divideWithJavaMathBigInteger:div];
  JavaMathBigInteger *i2 = [((JavaMathBigInteger *) nil_chk([mid addWithJavaMathBigInteger:off])) divideWithJavaMathBigInteger:div];
  return OrgBouncycastleMathEcToolsDiscoverEndomorphisms_orderWithJavaMathBigInteger_withJavaMathBigInteger_(i1, i2);
}

IOSObjectArray *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_extEuclidBezoutWithJavaMathBigIntegerArray_(IOSObjectArray *ab) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  jboolean swap = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(ab), 0))) compareToWithId:IOSObjectArray_Get(ab, 1)] < 0;
  if (swap) {
    OrgBouncycastleMathEcToolsDiscoverEndomorphisms_swapWithJavaMathBigIntegerArray_(ab);
  }
  JavaMathBigInteger *r0 = IOSObjectArray_Get(ab, 0), *r1 = IOSObjectArray_Get(ab, 1);
  JavaMathBigInteger *s0 = OrgBouncycastleMathEcECConstants_get_ONE_(), *s1 = OrgBouncycastleMathEcECConstants_get_ZERO_();
  JavaMathBigInteger *t0 = OrgBouncycastleMathEcECConstants_get_ZERO_(), *t1 = OrgBouncycastleMathEcECConstants_get_ONE_();
  while ([((JavaMathBigInteger *) nil_chk(r1)) compareToWithId:OrgBouncycastleMathEcECConstants_get_ONE_()] > 0) {
    IOSObjectArray *qr = [((JavaMathBigInteger *) nil_chk(r0)) divideAndRemainderWithJavaMathBigInteger:r1];
    JavaMathBigInteger *q = IOSObjectArray_Get(nil_chk(qr), 0), *r2 = IOSObjectArray_Get(qr, 1);
    JavaMathBigInteger *s2 = [((JavaMathBigInteger *) nil_chk(s0)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(q)) multiplyWithJavaMathBigInteger:s1]];
    JavaMathBigInteger *t2 = [((JavaMathBigInteger *) nil_chk(t0)) subtractWithJavaMathBigInteger:[q multiplyWithJavaMathBigInteger:t1]];
    r0 = r1;
    r1 = r2;
    s0 = s1;
    s1 = s2;
    t0 = t1;
    t1 = t2;
  }
  if ([((JavaMathBigInteger *) nil_chk(r1)) signum] <= 0) {
    @throw [[JavaLangIllegalStateException alloc] init];
  }
  IOSObjectArray *st = [IOSObjectArray newArrayWithObjects:(id[]){ s1, t1 } count:2 type:JavaMathBigInteger_class_()];
  if (swap) {
    OrgBouncycastleMathEcToolsDiscoverEndomorphisms_swapWithJavaMathBigIntegerArray_(st);
  }
  return st;
}

IOSObjectArray *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_extEuclidGLVWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *n, JavaMathBigInteger *lambda) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  JavaMathBigInteger *r0 = n, *r1 = lambda;
  JavaMathBigInteger *t0 = OrgBouncycastleMathEcECConstants_get_ZERO_(), *t1 = OrgBouncycastleMathEcECConstants_get_ONE_();
  for (; ; ) {
    IOSObjectArray *qr = [((JavaMathBigInteger *) nil_chk(r0)) divideAndRemainderWithJavaMathBigInteger:r1];
    JavaMathBigInteger *q = IOSObjectArray_Get(nil_chk(qr), 0), *r2 = IOSObjectArray_Get(qr, 1);
    JavaMathBigInteger *t2 = [((JavaMathBigInteger *) nil_chk(t0)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(q)) multiplyWithJavaMathBigInteger:t1]];
    if (OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isLessThanSqrtWithJavaMathBigInteger_withJavaMathBigInteger_(r1, n)) {
      return [IOSObjectArray newArrayWithObjects:(id[]){ r0, t0, r1, t1, r2, t2 } count:6 type:JavaMathBigInteger_class_()];
    }
    r0 = r1;
    r1 = r2;
    t0 = t1;
    t1 = t2;
  }
}

IOSObjectArray *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_chooseShortestWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *u, IOSObjectArray *v) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  return OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isShorterWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(u, v) ? u : v;
}

IOSObjectArray *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_intersectWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *ab, IOSObjectArray *cd) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  JavaMathBigInteger *min = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(ab), 0))) maxWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(cd), 0)];
  JavaMathBigInteger *max = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(ab, 1))) minWithJavaMathBigInteger:IOSObjectArray_Get(cd, 1)];
  if ([((JavaMathBigInteger *) nil_chk(min)) compareToWithId:max] > 0) {
    return nil;
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ min, max } count:2 type:JavaMathBigInteger_class_()];
}

jboolean OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isLessThanSqrtWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  a = [((JavaMathBigInteger *) nil_chk(a)) abs];
  b = [((JavaMathBigInteger *) nil_chk(b)) abs];
  jint target = [((JavaMathBigInteger *) nil_chk(b)) bitLength], maxBits = [((JavaMathBigInteger *) nil_chk(a)) bitLength] * 2, minBits = maxBits - 1;
  return minBits <= target && (maxBits < target || [((JavaMathBigInteger *) nil_chk([a multiplyWithJavaMathBigInteger:a])) compareToWithId:b] < 0);
}

jboolean OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isShorterWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *u, IOSObjectArray *v) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  JavaMathBigInteger *u1 = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(u), 0))) abs], *u2 = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(u, 1))) abs], *v1 = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(v), 0))) abs], *v2 = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v, 1))) abs];
  jboolean c1 = [((JavaMathBigInteger *) nil_chk(u1)) compareToWithId:v1] < 0, c2 = [((JavaMathBigInteger *) nil_chk(u2)) compareToWithId:v2] < 0;
  if (c1 == c2) {
    return c1;
  }
  JavaMathBigInteger *du = [((JavaMathBigInteger *) nil_chk([u1 multiplyWithJavaMathBigInteger:u1])) addWithJavaMathBigInteger:[u2 multiplyWithJavaMathBigInteger:u2]];
  JavaMathBigInteger *dv = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(v1)) multiplyWithJavaMathBigInteger:v1])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(v2)) multiplyWithJavaMathBigInteger:v2]];
  return [((JavaMathBigInteger *) nil_chk(du)) compareToWithId:dv] < 0;
}

jboolean OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isVectorBoundedBySqrtWithJavaMathBigIntegerArray_withJavaMathBigInteger_(IOSObjectArray *v, JavaMathBigInteger *n) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  JavaMathBigInteger *max = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(v), 0))) abs])) maxWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(v, 1))) abs]];
  return OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isLessThanSqrtWithJavaMathBigInteger_withJavaMathBigInteger_(max, n);
}

IOSObjectArray *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_orderWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  if ([((JavaMathBigInteger *) nil_chk(a)) compareToWithId:b] <= 0) {
    return [IOSObjectArray newArrayWithObjects:(id[]){ a, b } count:2 type:JavaMathBigInteger_class_()];
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ b, a } count:2 type:JavaMathBigInteger_class_()];
}

JavaMathBigInteger *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_roundQuotientWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *x, JavaMathBigInteger *y) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  jboolean negative = ([((JavaMathBigInteger *) nil_chk(x)) signum] != [((JavaMathBigInteger *) nil_chk(y)) signum]);
  x = [x abs];
  y = [y abs];
  JavaMathBigInteger *result = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(x)) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(y)) shiftRightWithInt:1]])) divideWithJavaMathBigInteger:y];
  return negative ? [((JavaMathBigInteger *) nil_chk(result)) negate] : result;
}

JavaMathBigInteger *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_solveQuadraticEquationWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *n, JavaMathBigInteger *r, JavaMathBigInteger *s) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  JavaMathBigInteger *det = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(r)) multiplyWithJavaMathBigInteger:r])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(s)) shiftLeftWithInt:2]])) modWithJavaMathBigInteger:n];
  JavaMathBigInteger *root = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement_Fp *) [[OrgBouncycastleMathEcECFieldElement_Fp alloc] initWithJavaMathBigInteger:n withJavaMathBigInteger:det]) sqrt])) toBigInteger];
  if (![((JavaMathBigInteger *) nil_chk(root)) testBitWithInt:0]) {
    root = [((JavaMathBigInteger *) nil_chk(n)) subtractWithJavaMathBigInteger:root];
  }
  return [((JavaMathBigInteger *) nil_chk(root)) shiftRightWithInt:1];
}

JavaMathBigInteger *OrgBouncycastleMathEcToolsDiscoverEndomorphisms_isqrtWithJavaMathBigInteger_(JavaMathBigInteger *x) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  JavaMathBigInteger *g0 = [x shiftRightWithInt:[((JavaMathBigInteger *) nil_chk(x)) bitLength] / 2];
  for (; ; ) {
    JavaMathBigInteger *g1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(g0)) addWithJavaMathBigInteger:[x divideWithJavaMathBigInteger:g0]])) shiftRightWithInt:1];
    if ([((JavaMathBigInteger *) nil_chk(g1)) isEqual:g0]) {
      return g1;
    }
    g0 = g1;
  }
}

void OrgBouncycastleMathEcToolsDiscoverEndomorphisms_swapWithJavaMathBigIntegerArray_(IOSObjectArray *ab) {
  OrgBouncycastleMathEcToolsDiscoverEndomorphisms_init();
  JavaMathBigInteger *tmp = IOSObjectArray_Get(nil_chk(ab), 0);
  IOSObjectArray_Set(ab, 0, IOSObjectArray_Get(ab, 1));
  IOSObjectArray_Set(ab, 1, tmp);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcToolsDiscoverEndomorphisms)
