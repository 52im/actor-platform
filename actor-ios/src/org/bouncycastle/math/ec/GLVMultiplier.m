//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/math/ec/GLVMultiplier.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/math/ec/ECAlgorithms.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/ECPointMap.h"
#include "org/bouncycastle/math/ec/GLVMultiplier.h"
#include "org/bouncycastle/math/ec/endo/GLVEndomorphism.h"

@implementation OrgBouncycastleMathEcGLVMultiplier

- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
        withOrgBouncycastleMathEcEndoGLVEndomorphism:(id<OrgBouncycastleMathEcEndoGLVEndomorphism>)glvEndomorphism {
  if (self = [super init]) {
    if (curve == nil || [curve getOrder] == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Need curve with known group order"];
    }
    self->curve_ = curve;
    self->glvEndomorphism_ = glvEndomorphism;
  }
  return self;
}

- (OrgBouncycastleMathEcECPoint *)multiplyPositiveWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                            withJavaMathBigInteger:(JavaMathBigInteger *)k {
  if (![((OrgBouncycastleMathEcECCurve *) nil_chk(curve_)) equalsWithOrgBouncycastleMathEcECCurve:[((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve]]) {
    @throw [[JavaLangIllegalStateException alloc] init];
  }
  JavaMathBigInteger *n = [((OrgBouncycastleMathEcECCurve *) nil_chk([p getCurve])) getOrder];
  IOSObjectArray *ab = [((id<OrgBouncycastleMathEcEndoGLVEndomorphism>) nil_chk(glvEndomorphism_)) decomposeScalarWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(k)) modWithJavaMathBigInteger:n]];
  JavaMathBigInteger *a = IOSObjectArray_Get(nil_chk(ab), 0), *b = IOSObjectArray_Get(ab, 1);
  id<OrgBouncycastleMathEcECPointMap> pointMap = [glvEndomorphism_ getPointMap];
  if ([glvEndomorphism_ hasEfficientPointMap]) {
    return OrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPointMap_withJavaMathBigInteger_(p, a, pointMap, b);
  }
  return OrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(p, a, [((id<OrgBouncycastleMathEcECPointMap>) nil_chk(pointMap)) mapWithOrgBouncycastleMathEcECPoint:p], b);
}

- (void)copyAllFieldsTo:(OrgBouncycastleMathEcGLVMultiplier *)other {
  [super copyAllFieldsTo:other];
  other->curve_ = curve_;
  other->glvEndomorphism_ = glvEndomorphism_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcGLVMultiplier)
