//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/util/io/Streams.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "org/bouncycastle/util/io/StreamOverflowException.h"
#include "org/bouncycastle/util/io/Streams.h"

@interface OrgBouncycastleUtilIoStreams () {
}
@end

@implementation OrgBouncycastleUtilIoStreams

jint OrgBouncycastleUtilIoStreams_BUFFER_SIZE_ = 512;

+ (void)drainWithJavaIoInputStream:(JavaIoInputStream *)inStr {
  OrgBouncycastleUtilIoStreams_drainWithJavaIoInputStream_(inStr);
}

+ (IOSByteArray *)readAllWithJavaIoInputStream:(JavaIoInputStream *)inStr {
  return OrgBouncycastleUtilIoStreams_readAllWithJavaIoInputStream_(inStr);
}

+ (IOSByteArray *)readAllLimitedWithJavaIoInputStream:(JavaIoInputStream *)inStr
                                              withInt:(jint)limit {
  return OrgBouncycastleUtilIoStreams_readAllLimitedWithJavaIoInputStream_withInt_(inStr, limit);
}

+ (jint)readFullyWithJavaIoInputStream:(JavaIoInputStream *)inStr
                         withByteArray:(IOSByteArray *)buf {
  return OrgBouncycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_(inStr, buf);
}

+ (jint)readFullyWithJavaIoInputStream:(JavaIoInputStream *)inStr
                         withByteArray:(IOSByteArray *)buf
                               withInt:(jint)off
                               withInt:(jint)len {
  return OrgBouncycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_withInt_withInt_(inStr, buf, off, len);
}

+ (void)pipeAllWithJavaIoInputStream:(JavaIoInputStream *)inStr
              withJavaIoOutputStream:(JavaIoOutputStream *)outStr {
  OrgBouncycastleUtilIoStreams_pipeAllWithJavaIoInputStream_withJavaIoOutputStream_(inStr, outStr);
}

+ (jlong)pipeAllLimitedWithJavaIoInputStream:(JavaIoInputStream *)inStr
                                    withLong:(jlong)limit
                      withJavaIoOutputStream:(JavaIoOutputStream *)outStr {
  return OrgBouncycastleUtilIoStreams_pipeAllLimitedWithJavaIoInputStream_withLong_withJavaIoOutputStream_(inStr, limit, outStr);
}

- (instancetype)init {
  return [super init];
}

@end

void OrgBouncycastleUtilIoStreams_drainWithJavaIoInputStream_(JavaIoInputStream *inStr) {
  OrgBouncycastleUtilIoStreams_init();
  IOSByteArray *bs = [IOSByteArray newArrayWithLength:OrgBouncycastleUtilIoStreams_BUFFER_SIZE_];
  while ([((JavaIoInputStream *) nil_chk(inStr)) readWithByteArray:bs withInt:0 withInt:bs->size_] >= 0) {
  }
}

IOSByteArray *OrgBouncycastleUtilIoStreams_readAllWithJavaIoInputStream_(JavaIoInputStream *inStr) {
  OrgBouncycastleUtilIoStreams_init();
  JavaIoByteArrayOutputStream *buf = [[JavaIoByteArrayOutputStream alloc] init];
  OrgBouncycastleUtilIoStreams_pipeAllWithJavaIoInputStream_withJavaIoOutputStream_(inStr, buf);
  return [buf toByteArray];
}

IOSByteArray *OrgBouncycastleUtilIoStreams_readAllLimitedWithJavaIoInputStream_withInt_(JavaIoInputStream *inStr, jint limit) {
  OrgBouncycastleUtilIoStreams_init();
  JavaIoByteArrayOutputStream *buf = [[JavaIoByteArrayOutputStream alloc] init];
  OrgBouncycastleUtilIoStreams_pipeAllLimitedWithJavaIoInputStream_withLong_withJavaIoOutputStream_(inStr, limit, buf);
  return [buf toByteArray];
}

jint OrgBouncycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_(JavaIoInputStream *inStr, IOSByteArray *buf) {
  OrgBouncycastleUtilIoStreams_init();
  return OrgBouncycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_withInt_withInt_(inStr, buf, 0, ((IOSByteArray *) nil_chk(buf))->size_);
}

jint OrgBouncycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_withInt_withInt_(JavaIoInputStream *inStr, IOSByteArray *buf, jint off, jint len) {
  OrgBouncycastleUtilIoStreams_init();
  jint totalRead = 0;
  while (totalRead < len) {
    jint numRead = [((JavaIoInputStream *) nil_chk(inStr)) readWithByteArray:buf withInt:off + totalRead withInt:len - totalRead];
    if (numRead < 0) {
      break;
    }
    totalRead += numRead;
  }
  return totalRead;
}

void OrgBouncycastleUtilIoStreams_pipeAllWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *inStr, JavaIoOutputStream *outStr) {
  OrgBouncycastleUtilIoStreams_init();
  IOSByteArray *bs = [IOSByteArray newArrayWithLength:OrgBouncycastleUtilIoStreams_BUFFER_SIZE_];
  jint numRead;
  while ((numRead = [((JavaIoInputStream *) nil_chk(inStr)) readWithByteArray:bs withInt:0 withInt:bs->size_]) >= 0) {
    [((JavaIoOutputStream *) nil_chk(outStr)) writeWithByteArray:bs withInt:0 withInt:numRead];
  }
}

jlong OrgBouncycastleUtilIoStreams_pipeAllLimitedWithJavaIoInputStream_withLong_withJavaIoOutputStream_(JavaIoInputStream *inStr, jlong limit, JavaIoOutputStream *outStr) {
  OrgBouncycastleUtilIoStreams_init();
  jlong total = 0;
  IOSByteArray *bs = [IOSByteArray newArrayWithLength:OrgBouncycastleUtilIoStreams_BUFFER_SIZE_];
  jint numRead;
  while ((numRead = [((JavaIoInputStream *) nil_chk(inStr)) readWithByteArray:bs withInt:0 withInt:bs->size_]) >= 0) {
    total += numRead;
    if (total > limit) {
      @throw [[OrgBouncycastleUtilIoStreamOverflowException alloc] initWithNSString:@"Data Overflow"];
    }
    [((JavaIoOutputStream *) nil_chk(outStr)) writeWithByteArray:bs withInt:0 withInt:numRead];
  }
  return total;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleUtilIoStreams)
