//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/crypto/util/PublicKeyFactory.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1InputStream.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1OctetString.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/DERBitString.h"
#include "org/bouncycastle/asn1/DEROctetString.h"
#include "org/bouncycastle/asn1/oiw/ElGamalParameter.h"
#include "org/bouncycastle/asn1/oiw/OIWObjectIdentifiers.h"
#include "org/bouncycastle/asn1/pkcs/DHParameter.h"
#include "org/bouncycastle/asn1/pkcs/PKCSObjectIdentifiers.h"
#include "org/bouncycastle/asn1/pkcs/RSAPublicKey.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/DSAParameter.h"
#include "org/bouncycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/bouncycastle/asn1/x509/X509ObjectIdentifiers.h"
#include "org/bouncycastle/asn1/x9/DHDomainParameters.h"
#include "org/bouncycastle/asn1/x9/DHPublicKey.h"
#include "org/bouncycastle/asn1/x9/DHValidationParms.h"
#include "org/bouncycastle/asn1/x9/ECNamedCurveTable.h"
#include "org/bouncycastle/asn1/x9/X962Parameters.h"
#include "org/bouncycastle/asn1/x9/X9ECParameters.h"
#include "org/bouncycastle/asn1/x9/X9ECPoint.h"
#include "org/bouncycastle/asn1/x9/X9ObjectIdentifiers.h"
#include "org/bouncycastle/crypto/ec/CustomNamedCurves.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/crypto/params/DHParameters.h"
#include "org/bouncycastle/crypto/params/DHPublicKeyParameters.h"
#include "org/bouncycastle/crypto/params/DHValidationParameters.h"
#include "org/bouncycastle/crypto/params/DSAParameters.h"
#include "org/bouncycastle/crypto/params/DSAPublicKeyParameters.h"
#include "org/bouncycastle/crypto/params/ECDomainParameters.h"
#include "org/bouncycastle/crypto/params/ECNamedDomainParameters.h"
#include "org/bouncycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/bouncycastle/crypto/params/ElGamalParameters.h"
#include "org/bouncycastle/crypto/params/ElGamalPublicKeyParameters.h"
#include "org/bouncycastle/crypto/params/RSAKeyParameters.h"
#include "org/bouncycastle/crypto/util/PublicKeyFactory.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECPoint.h"

@implementation OrgBouncycastleCryptoUtilPublicKeyFactory

+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithByteArray:(IOSByteArray *)keyInfoData {
  return OrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithByteArray_(keyInfoData);
}

+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithJavaIoInputStream:(JavaIoInputStream *)inStr {
  return OrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithJavaIoInputStream_(inStr);
}

+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo {
  return OrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(keyInfo);
}

- (instancetype)init {
  return [super init];
}

@end

OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithByteArray_(IOSByteArray *keyInfoData) {
  OrgBouncycastleCryptoUtilPublicKeyFactory_init();
  return OrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(OrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(keyInfoData)));
}

OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithJavaIoInputStream_(JavaIoInputStream *inStr) {
  OrgBouncycastleCryptoUtilPublicKeyFactory_init();
  return OrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(OrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_([((OrgBouncycastleAsn1ASN1InputStream *) [[OrgBouncycastleAsn1ASN1InputStream alloc] initWithJavaIoInputStream:inStr]) readObject]));
}

OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastleCryptoUtilPublicKeyFactory_createKeyWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo) {
  OrgBouncycastleCryptoUtilPublicKeyFactory_init();
  OrgBouncycastleAsn1X509AlgorithmIdentifier *algId = [((OrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getAlgorithm];
  if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(algId)) getAlgorithm])) isEqual:OrgBouncycastleAsn1PkcsPKCSObjectIdentifiers_get_rsaEncryption_()] || [((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:OrgBouncycastleAsn1X509X509ObjectIdentifiers_get_id_ea_rsa_()]) {
    OrgBouncycastleAsn1PkcsRSAPublicKey *pubKey = OrgBouncycastleAsn1PkcsRSAPublicKey_getInstanceWithId_([keyInfo parsePublicKey]);
    return [[OrgBouncycastleCryptoParamsRSAKeyParameters alloc] initWithBoolean:NO withJavaMathBigInteger:[((OrgBouncycastleAsn1PkcsRSAPublicKey *) nil_chk(pubKey)) getModulus] withJavaMathBigInteger:[pubKey getPublicExponent]];
  }
  else if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:OrgBouncycastleAsn1X9X9ObjectIdentifiers_get_dhpublicnumber_()]) {
    OrgBouncycastleAsn1X9DHPublicKey *dhPublicKey = OrgBouncycastleAsn1X9DHPublicKey_getInstanceWithId_([keyInfo parsePublicKey]);
    JavaMathBigInteger *y = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk([((OrgBouncycastleAsn1X9DHPublicKey *) nil_chk(dhPublicKey)) getY])) getValue];
    OrgBouncycastleAsn1X9DHDomainParameters *dhParams = OrgBouncycastleAsn1X9DHDomainParameters_getInstanceWithId_([algId getParameters]);
    JavaMathBigInteger *p = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk([((OrgBouncycastleAsn1X9DHDomainParameters *) nil_chk(dhParams)) getP])) getValue];
    JavaMathBigInteger *g = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk([dhParams getG])) getValue];
    JavaMathBigInteger *q = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk([dhParams getQ])) getValue];
    JavaMathBigInteger *j = nil;
    if ([dhParams getJ] != nil) {
      j = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk([dhParams getJ])) getValue];
    }
    OrgBouncycastleCryptoParamsDHValidationParameters *validation = nil;
    OrgBouncycastleAsn1X9DHValidationParms *dhValidationParms = [dhParams getValidationParms];
    if (dhValidationParms != nil) {
      IOSByteArray *seed = [((OrgBouncycastleAsn1DERBitString *) nil_chk([dhValidationParms getSeed])) getBytes];
      JavaMathBigInteger *pgenCounter = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk([dhValidationParms getPgenCounter])) getValue];
      validation = [[OrgBouncycastleCryptoParamsDHValidationParameters alloc] initWithByteArray:seed withInt:[((JavaMathBigInteger *) nil_chk(pgenCounter)) intValue]];
    }
    return [[OrgBouncycastleCryptoParamsDHPublicKeyParameters alloc] initWithJavaMathBigInteger:y withOrgBouncycastleCryptoParamsDHParameters:[[OrgBouncycastleCryptoParamsDHParameters alloc] initWithJavaMathBigInteger:p withJavaMathBigInteger:g withJavaMathBigInteger:q withJavaMathBigInteger:j withOrgBouncycastleCryptoParamsDHValidationParameters:validation]];
  }
  else if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:OrgBouncycastleAsn1PkcsPKCSObjectIdentifiers_get_dhKeyAgreement_()]) {
    OrgBouncycastleAsn1PkcsDHParameter *params = OrgBouncycastleAsn1PkcsDHParameter_getInstanceWithId_([algId getParameters]);
    OrgBouncycastleAsn1ASN1Integer *derY = (OrgBouncycastleAsn1ASN1Integer *) check_class_cast([keyInfo parsePublicKey], [OrgBouncycastleAsn1ASN1Integer class]);
    JavaMathBigInteger *lVal = [((OrgBouncycastleAsn1PkcsDHParameter *) nil_chk(params)) getL];
    jint l = lVal == nil ? 0 : [lVal intValue];
    OrgBouncycastleCryptoParamsDHParameters *dhParams = [[OrgBouncycastleCryptoParamsDHParameters alloc] initWithJavaMathBigInteger:[params getP] withJavaMathBigInteger:[params getG] withJavaMathBigInteger:nil withInt:l];
    return [[OrgBouncycastleCryptoParamsDHPublicKeyParameters alloc] initWithJavaMathBigInteger:[((OrgBouncycastleAsn1ASN1Integer *) nil_chk(derY)) getValue] withOrgBouncycastleCryptoParamsDHParameters:dhParams];
  }
  else if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:OrgBouncycastleAsn1OiwOIWObjectIdentifiers_get_elGamalAlgorithm_()]) {
    OrgBouncycastleAsn1OiwElGamalParameter *params = OrgBouncycastleAsn1OiwElGamalParameter_getInstanceWithId_([algId getParameters]);
    OrgBouncycastleAsn1ASN1Integer *derY = (OrgBouncycastleAsn1ASN1Integer *) check_class_cast([keyInfo parsePublicKey], [OrgBouncycastleAsn1ASN1Integer class]);
    return [[OrgBouncycastleCryptoParamsElGamalPublicKeyParameters alloc] initWithJavaMathBigInteger:[((OrgBouncycastleAsn1ASN1Integer *) nil_chk(derY)) getValue] withOrgBouncycastleCryptoParamsElGamalParameters:[[OrgBouncycastleCryptoParamsElGamalParameters alloc] initWithJavaMathBigInteger:[((OrgBouncycastleAsn1OiwElGamalParameter *) nil_chk(params)) getP] withJavaMathBigInteger:[params getG]]];
  }
  else if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:OrgBouncycastleAsn1X9X9ObjectIdentifiers_get_id_dsa_()] || [((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:OrgBouncycastleAsn1OiwOIWObjectIdentifiers_get_dsaWithSHA1_()]) {
    OrgBouncycastleAsn1ASN1Integer *derY = (OrgBouncycastleAsn1ASN1Integer *) check_class_cast([keyInfo parsePublicKey], [OrgBouncycastleAsn1ASN1Integer class]);
    id<OrgBouncycastleAsn1ASN1Encodable> de = [algId getParameters];
    OrgBouncycastleCryptoParamsDSAParameters *parameters = nil;
    if (de != nil) {
      OrgBouncycastleAsn1X509DSAParameter *params = OrgBouncycastleAsn1X509DSAParameter_getInstanceWithId_([de toASN1Primitive]);
      parameters = [[OrgBouncycastleCryptoParamsDSAParameters alloc] initWithJavaMathBigInteger:[((OrgBouncycastleAsn1X509DSAParameter *) nil_chk(params)) getP] withJavaMathBigInteger:[params getQ] withJavaMathBigInteger:[params getG]];
    }
    return [[OrgBouncycastleCryptoParamsDSAPublicKeyParameters alloc] initWithJavaMathBigInteger:[((OrgBouncycastleAsn1ASN1Integer *) nil_chk(derY)) getValue] withOrgBouncycastleCryptoParamsDSAParameters:parameters];
  }
  else if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:OrgBouncycastleAsn1X9X9ObjectIdentifiers_get_id_ecPublicKey_()]) {
    OrgBouncycastleAsn1X9X962Parameters *params = OrgBouncycastleAsn1X9X962Parameters_getInstanceWithId_([algId getParameters]);
    OrgBouncycastleAsn1X9X9ECParameters *x9;
    OrgBouncycastleCryptoParamsECDomainParameters *dParams;
    if ([((OrgBouncycastleAsn1X9X962Parameters *) nil_chk(params)) isNamedCurve]) {
      OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (OrgBouncycastleAsn1ASN1ObjectIdentifier *) check_class_cast([params getParameters], [OrgBouncycastleAsn1ASN1ObjectIdentifier class]);
      x9 = OrgBouncycastleCryptoEcCustomNamedCurves_getByOIDWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
      if (x9 == nil) {
        x9 = OrgBouncycastleAsn1X9ECNamedCurveTable_getByOIDWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
      }
      dParams = [[OrgBouncycastleCryptoParamsECNamedDomainParameters alloc] initWithOrgBouncycastleAsn1ASN1ObjectIdentifier:oid withOrgBouncycastleMathEcECCurve:[((OrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve] withOrgBouncycastleMathEcECPoint:[x9 getG] withJavaMathBigInteger:[x9 getN] withJavaMathBigInteger:[x9 getH] withByteArray:[x9 getSeed]];
    }
    else {
      x9 = OrgBouncycastleAsn1X9X9ECParameters_getInstanceWithId_([params getParameters]);
      dParams = [[OrgBouncycastleCryptoParamsECDomainParameters alloc] initWithOrgBouncycastleMathEcECCurve:[((OrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve] withOrgBouncycastleMathEcECPoint:[x9 getG] withJavaMathBigInteger:[x9 getN] withJavaMathBigInteger:[x9 getH] withByteArray:[x9 getSeed]];
    }
    OrgBouncycastleAsn1ASN1OctetString *key = [[OrgBouncycastleAsn1DEROctetString alloc] initWithByteArray:[((OrgBouncycastleAsn1DERBitString *) nil_chk([keyInfo getPublicKeyData])) getBytes]];
    OrgBouncycastleAsn1X9X9ECPoint *derQ = [[OrgBouncycastleAsn1X9X9ECPoint alloc] initWithOrgBouncycastleMathEcECCurve:[((OrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve] withOrgBouncycastleAsn1ASN1OctetString:key];
    return [[OrgBouncycastleCryptoParamsECPublicKeyParameters alloc] initWithOrgBouncycastleMathEcECPoint:[derQ getPoint] withOrgBouncycastleCryptoParamsECDomainParameters:dParams];
  }
  else {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"algorithm identifier in key not recognised"];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoUtilPublicKeyFactory)
