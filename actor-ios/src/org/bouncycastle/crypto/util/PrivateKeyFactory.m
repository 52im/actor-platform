//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/crypto/util/PrivateKeyFactory.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1InputStream.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/oiw/ElGamalParameter.h"
#include "org/bouncycastle/asn1/oiw/OIWObjectIdentifiers.h"
#include "org/bouncycastle/asn1/pkcs/DHParameter.h"
#include "org/bouncycastle/asn1/pkcs/PKCSObjectIdentifiers.h"
#include "org/bouncycastle/asn1/pkcs/PrivateKeyInfo.h"
#include "org/bouncycastle/asn1/pkcs/RSAPrivateKey.h"
#include "org/bouncycastle/asn1/sec/ECPrivateKey.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/DSAParameter.h"
#include "org/bouncycastle/asn1/x9/ECNamedCurveTable.h"
#include "org/bouncycastle/asn1/x9/X962Parameters.h"
#include "org/bouncycastle/asn1/x9/X9ECParameters.h"
#include "org/bouncycastle/asn1/x9/X9ObjectIdentifiers.h"
#include "org/bouncycastle/crypto/ec/CustomNamedCurves.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/crypto/params/DHParameters.h"
#include "org/bouncycastle/crypto/params/DHPrivateKeyParameters.h"
#include "org/bouncycastle/crypto/params/DSAParameters.h"
#include "org/bouncycastle/crypto/params/DSAPrivateKeyParameters.h"
#include "org/bouncycastle/crypto/params/ECDomainParameters.h"
#include "org/bouncycastle/crypto/params/ECNamedDomainParameters.h"
#include "org/bouncycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/bouncycastle/crypto/params/ElGamalParameters.h"
#include "org/bouncycastle/crypto/params/ElGamalPrivateKeyParameters.h"
#include "org/bouncycastle/crypto/params/RSAPrivateCrtKeyParameters.h"
#include "org/bouncycastle/crypto/util/PrivateKeyFactory.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECPoint.h"

@implementation OrgBouncycastleCryptoUtilPrivateKeyFactory

+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithByteArray:(IOSByteArray *)privateKeyInfoData {
  return OrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithByteArray_(privateKeyInfoData);
}

+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithJavaIoInputStream:(JavaIoInputStream *)inStr {
  return OrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithJavaIoInputStream_(inStr);
}

+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithOrgBouncycastleAsn1PkcsPrivateKeyInfo:(OrgBouncycastleAsn1PkcsPrivateKeyInfo *)keyInfo {
  return OrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithOrgBouncycastleAsn1PkcsPrivateKeyInfo_(keyInfo);
}

- (instancetype)init {
  return [super init];
}

@end

OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithByteArray_(IOSByteArray *privateKeyInfoData) {
  OrgBouncycastleCryptoUtilPrivateKeyFactory_init();
  return OrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithOrgBouncycastleAsn1PkcsPrivateKeyInfo_(OrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_(OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(privateKeyInfoData)));
}

OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithJavaIoInputStream_(JavaIoInputStream *inStr) {
  OrgBouncycastleCryptoUtilPrivateKeyFactory_init();
  return OrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithOrgBouncycastleAsn1PkcsPrivateKeyInfo_(OrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_([((OrgBouncycastleAsn1ASN1InputStream *) [[OrgBouncycastleAsn1ASN1InputStream alloc] initWithJavaIoInputStream:inStr]) readObject]));
}

OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastleCryptoUtilPrivateKeyFactory_createKeyWithOrgBouncycastleAsn1PkcsPrivateKeyInfo_(OrgBouncycastleAsn1PkcsPrivateKeyInfo *keyInfo) {
  OrgBouncycastleCryptoUtilPrivateKeyFactory_init();
  OrgBouncycastleAsn1X509AlgorithmIdentifier *algId = [((OrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(keyInfo)) getPrivateKeyAlgorithm];
  if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(algId)) getAlgorithm])) isEqual:OrgBouncycastleAsn1PkcsPKCSObjectIdentifiers_get_rsaEncryption_()]) {
    OrgBouncycastleAsn1PkcsRSAPrivateKey *keyStructure = OrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithId_([keyInfo parsePrivateKey]);
    return [[OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters alloc] initWithJavaMathBigInteger:[((OrgBouncycastleAsn1PkcsRSAPrivateKey *) nil_chk(keyStructure)) getModulus] withJavaMathBigInteger:[keyStructure getPublicExponent] withJavaMathBigInteger:[keyStructure getPrivateExponent] withJavaMathBigInteger:[keyStructure getPrime1] withJavaMathBigInteger:[keyStructure getPrime2] withJavaMathBigInteger:[keyStructure getExponent1] withJavaMathBigInteger:[keyStructure getExponent2] withJavaMathBigInteger:[keyStructure getCoefficient]];
  }
  else if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:OrgBouncycastleAsn1PkcsPKCSObjectIdentifiers_get_dhKeyAgreement_()]) {
    OrgBouncycastleAsn1PkcsDHParameter *params = OrgBouncycastleAsn1PkcsDHParameter_getInstanceWithId_([algId getParameters]);
    OrgBouncycastleAsn1ASN1Integer *derX = (OrgBouncycastleAsn1ASN1Integer *) check_class_cast([keyInfo parsePrivateKey], [OrgBouncycastleAsn1ASN1Integer class]);
    JavaMathBigInteger *lVal = [((OrgBouncycastleAsn1PkcsDHParameter *) nil_chk(params)) getL];
    jint l = lVal == nil ? 0 : [lVal intValue];
    OrgBouncycastleCryptoParamsDHParameters *dhParams = [[OrgBouncycastleCryptoParamsDHParameters alloc] initWithJavaMathBigInteger:[params getP] withJavaMathBigInteger:[params getG] withJavaMathBigInteger:nil withInt:l];
    return [[OrgBouncycastleCryptoParamsDHPrivateKeyParameters alloc] initWithJavaMathBigInteger:[((OrgBouncycastleAsn1ASN1Integer *) nil_chk(derX)) getValue] withOrgBouncycastleCryptoParamsDHParameters:dhParams];
  }
  else if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:OrgBouncycastleAsn1OiwOIWObjectIdentifiers_get_elGamalAlgorithm_()]) {
    OrgBouncycastleAsn1OiwElGamalParameter *params = OrgBouncycastleAsn1OiwElGamalParameter_getInstanceWithId_([algId getParameters]);
    OrgBouncycastleAsn1ASN1Integer *derX = (OrgBouncycastleAsn1ASN1Integer *) check_class_cast([keyInfo parsePrivateKey], [OrgBouncycastleAsn1ASN1Integer class]);
    return [[OrgBouncycastleCryptoParamsElGamalPrivateKeyParameters alloc] initWithJavaMathBigInteger:[((OrgBouncycastleAsn1ASN1Integer *) nil_chk(derX)) getValue] withOrgBouncycastleCryptoParamsElGamalParameters:[[OrgBouncycastleCryptoParamsElGamalParameters alloc] initWithJavaMathBigInteger:[((OrgBouncycastleAsn1OiwElGamalParameter *) nil_chk(params)) getP] withJavaMathBigInteger:[params getG]]];
  }
  else if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:OrgBouncycastleAsn1X9X9ObjectIdentifiers_get_id_dsa_()]) {
    OrgBouncycastleAsn1ASN1Integer *derX = (OrgBouncycastleAsn1ASN1Integer *) check_class_cast([keyInfo parsePrivateKey], [OrgBouncycastleAsn1ASN1Integer class]);
    id<OrgBouncycastleAsn1ASN1Encodable> de = [algId getParameters];
    OrgBouncycastleCryptoParamsDSAParameters *parameters = nil;
    if (de != nil) {
      OrgBouncycastleAsn1X509DSAParameter *params = OrgBouncycastleAsn1X509DSAParameter_getInstanceWithId_([de toASN1Primitive]);
      parameters = [[OrgBouncycastleCryptoParamsDSAParameters alloc] initWithJavaMathBigInteger:[((OrgBouncycastleAsn1X509DSAParameter *) nil_chk(params)) getP] withJavaMathBigInteger:[params getQ] withJavaMathBigInteger:[params getG]];
    }
    return [[OrgBouncycastleCryptoParamsDSAPrivateKeyParameters alloc] initWithJavaMathBigInteger:[((OrgBouncycastleAsn1ASN1Integer *) nil_chk(derX)) getValue] withOrgBouncycastleCryptoParamsDSAParameters:parameters];
  }
  else if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:OrgBouncycastleAsn1X9X9ObjectIdentifiers_get_id_ecPublicKey_()]) {
    OrgBouncycastleAsn1X9X962Parameters *params = [[OrgBouncycastleAsn1X9X962Parameters alloc] initWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *) check_class_cast([algId getParameters], [OrgBouncycastleAsn1ASN1Primitive class])];
    OrgBouncycastleAsn1X9X9ECParameters *x9;
    OrgBouncycastleCryptoParamsECDomainParameters *dParams;
    if ([params isNamedCurve]) {
      OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (OrgBouncycastleAsn1ASN1ObjectIdentifier *) check_class_cast([params getParameters], [OrgBouncycastleAsn1ASN1ObjectIdentifier class]);
      x9 = OrgBouncycastleCryptoEcCustomNamedCurves_getByOIDWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
      if (x9 == nil) {
        x9 = OrgBouncycastleAsn1X9ECNamedCurveTable_getByOIDWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
      }
      dParams = [[OrgBouncycastleCryptoParamsECNamedDomainParameters alloc] initWithOrgBouncycastleAsn1ASN1ObjectIdentifier:oid withOrgBouncycastleMathEcECCurve:[((OrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve] withOrgBouncycastleMathEcECPoint:[x9 getG] withJavaMathBigInteger:[x9 getN] withJavaMathBigInteger:[x9 getH] withByteArray:[x9 getSeed]];
    }
    else {
      x9 = OrgBouncycastleAsn1X9X9ECParameters_getInstanceWithId_([params getParameters]);
      dParams = [[OrgBouncycastleCryptoParamsECDomainParameters alloc] initWithOrgBouncycastleMathEcECCurve:[((OrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve] withOrgBouncycastleMathEcECPoint:[x9 getG] withJavaMathBigInteger:[x9 getN] withJavaMathBigInteger:[x9 getH] withByteArray:[x9 getSeed]];
    }
    OrgBouncycastleAsn1SecECPrivateKey *ec = OrgBouncycastleAsn1SecECPrivateKey_getInstanceWithId_([keyInfo parsePrivateKey]);
    JavaMathBigInteger *d = [((OrgBouncycastleAsn1SecECPrivateKey *) nil_chk(ec)) getKey];
    return [[OrgBouncycastleCryptoParamsECPrivateKeyParameters alloc] initWithJavaMathBigInteger:d withOrgBouncycastleCryptoParamsECDomainParameters:dParams];
  }
  else {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"algorithm identifier in key not recognised"];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoUtilPrivateKeyFactory)
