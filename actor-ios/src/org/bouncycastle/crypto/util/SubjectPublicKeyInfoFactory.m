//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/crypto/util/SubjectPublicKeyInfoFactory.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1OctetString.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/DERNull.h"
#include "org/bouncycastle/asn1/pkcs/PKCSObjectIdentifiers.h"
#include "org/bouncycastle/asn1/pkcs/RSAPublicKey.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/bouncycastle/asn1/x9/X962Parameters.h"
#include "org/bouncycastle/asn1/x9/X9ECParameters.h"
#include "org/bouncycastle/asn1/x9/X9ECPoint.h"
#include "org/bouncycastle/asn1/x9/X9ObjectIdentifiers.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/crypto/params/DSAPublicKeyParameters.h"
#include "org/bouncycastle/crypto/params/ECDomainParameters.h"
#include "org/bouncycastle/crypto/params/ECNamedDomainParameters.h"
#include "org/bouncycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/bouncycastle/crypto/params/RSAKeyParameters.h"
#include "org/bouncycastle/crypto/util/SubjectPublicKeyInfoFactory.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECPoint.h"

@implementation OrgBouncycastleCryptoUtilSubjectPublicKeyInfoFactory

+ (OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)createSubjectPublicKeyInfoWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)publicKey {
  return OrgBouncycastleCryptoUtilSubjectPublicKeyInfoFactory_createSubjectPublicKeyInfoWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(publicKey);
}

- (instancetype)init {
  return [super init];
}

@end

OrgBouncycastleAsn1X509SubjectPublicKeyInfo *OrgBouncycastleCryptoUtilSubjectPublicKeyInfoFactory_createSubjectPublicKeyInfoWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(OrgBouncycastleCryptoParamsAsymmetricKeyParameter *publicKey) {
  OrgBouncycastleCryptoUtilSubjectPublicKeyInfoFactory_init();
  if ([publicKey isKindOfClass:[OrgBouncycastleCryptoParamsRSAKeyParameters class]]) {
    OrgBouncycastleCryptoParamsRSAKeyParameters *pub = (OrgBouncycastleCryptoParamsRSAKeyParameters *) check_class_cast(publicKey, [OrgBouncycastleCryptoParamsRSAKeyParameters class]);
    return [[OrgBouncycastleAsn1X509SubjectPublicKeyInfo alloc] initWithOrgBouncycastleAsn1X509AlgorithmIdentifier:[[OrgBouncycastleAsn1X509AlgorithmIdentifier alloc] initWithOrgBouncycastleAsn1ASN1ObjectIdentifier:OrgBouncycastleAsn1PkcsPKCSObjectIdentifiers_get_rsaEncryption_() withOrgBouncycastleAsn1ASN1Encodable:OrgBouncycastleAsn1DERNull_get_INSTANCE_()] withOrgBouncycastleAsn1ASN1Encodable:[[OrgBouncycastleAsn1PkcsRSAPublicKey alloc] initWithJavaMathBigInteger:[((OrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(pub)) getModulus] withJavaMathBigInteger:[pub getExponent]]];
  }
  else if ([publicKey isKindOfClass:[OrgBouncycastleCryptoParamsDSAPublicKeyParameters class]]) {
    OrgBouncycastleCryptoParamsDSAPublicKeyParameters *pub = (OrgBouncycastleCryptoParamsDSAPublicKeyParameters *) check_class_cast(publicKey, [OrgBouncycastleCryptoParamsDSAPublicKeyParameters class]);
    return [[OrgBouncycastleAsn1X509SubjectPublicKeyInfo alloc] initWithOrgBouncycastleAsn1X509AlgorithmIdentifier:[[OrgBouncycastleAsn1X509AlgorithmIdentifier alloc] initWithOrgBouncycastleAsn1ASN1ObjectIdentifier:OrgBouncycastleAsn1X9X9ObjectIdentifiers_get_id_dsa_()] withOrgBouncycastleAsn1ASN1Encodable:[[OrgBouncycastleAsn1ASN1Integer alloc] initWithJavaMathBigInteger:[((OrgBouncycastleCryptoParamsDSAPublicKeyParameters *) nil_chk(pub)) getY]]];
  }
  else if ([publicKey isKindOfClass:[OrgBouncycastleCryptoParamsECPublicKeyParameters class]]) {
    OrgBouncycastleCryptoParamsECPublicKeyParameters *pub = (OrgBouncycastleCryptoParamsECPublicKeyParameters *) check_class_cast(publicKey, [OrgBouncycastleCryptoParamsECPublicKeyParameters class]);
    OrgBouncycastleCryptoParamsECDomainParameters *domainParams = [((OrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(pub)) getParameters];
    id<OrgBouncycastleAsn1ASN1Encodable> params;
    if (domainParams == nil) {
      params = [[OrgBouncycastleAsn1X9X962Parameters alloc] initWithOrgBouncycastleAsn1ASN1Primitive:OrgBouncycastleAsn1DERNull_get_INSTANCE_()];
    }
    else if ([domainParams isKindOfClass:[OrgBouncycastleCryptoParamsECNamedDomainParameters class]]) {
      params = [[OrgBouncycastleAsn1X9X962Parameters alloc] initWithOrgBouncycastleAsn1ASN1ObjectIdentifier:[((OrgBouncycastleCryptoParamsECNamedDomainParameters *) check_class_cast(domainParams, [OrgBouncycastleCryptoParamsECNamedDomainParameters class])) getName]];
    }
    else {
      OrgBouncycastleAsn1X9X9ECParameters *ecP = [[OrgBouncycastleAsn1X9X9ECParameters alloc] initWithOrgBouncycastleMathEcECCurve:[domainParams getCurve] withOrgBouncycastleMathEcECPoint:[domainParams getG] withJavaMathBigInteger:[domainParams getN] withJavaMathBigInteger:[domainParams getH] withByteArray:[domainParams getSeed]];
      params = [[OrgBouncycastleAsn1X9X962Parameters alloc] initWithOrgBouncycastleAsn1X9X9ECParameters:ecP];
    }
    OrgBouncycastleAsn1ASN1OctetString *p = (OrgBouncycastleAsn1ASN1OctetString *) check_class_cast([((OrgBouncycastleAsn1X9X9ECPoint *) [[OrgBouncycastleAsn1X9X9ECPoint alloc] initWithOrgBouncycastleMathEcECPoint:[pub getQ]]) toASN1Primitive], [OrgBouncycastleAsn1ASN1OctetString class]);
    return [[OrgBouncycastleAsn1X509SubjectPublicKeyInfo alloc] initWithOrgBouncycastleAsn1X509AlgorithmIdentifier:[[OrgBouncycastleAsn1X509AlgorithmIdentifier alloc] initWithOrgBouncycastleAsn1ASN1ObjectIdentifier:OrgBouncycastleAsn1X9X9ObjectIdentifiers_get_id_ecPublicKey_() withOrgBouncycastleAsn1ASN1Encodable:params] withByteArray:[((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(p)) getOctets]];
  }
  else {
    @throw [[JavaIoIOException alloc] initWithNSString:@"key parameters not recognised."];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoUtilSubjectPublicKeyInfoFactory)
