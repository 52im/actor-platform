//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/crypto/generators/RSAKeyPairGenerator.java
//

#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/KeyGenerationParameters.h"
#include "org/bouncycastle/crypto/generators/RSAKeyPairGenerator.h"
#include "org/bouncycastle/crypto/params/RSAKeyGenerationParameters.h"
#include "org/bouncycastle/crypto/params/RSAKeyParameters.h"
#include "org/bouncycastle/crypto/params/RSAPrivateCrtKeyParameters.h"
#include "org/bouncycastle/math/ec/WNafUtil.h"

@interface OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator () {
 @public
  OrgBouncycastleCryptoParamsRSAKeyGenerationParameters *param_;
}
@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator, param_, OrgBouncycastleCryptoParamsRSAKeyGenerationParameters *)

BOOL OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator_initialized = NO;

@implementation OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator

JavaMathBigInteger * OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator_ONE_;

- (void)init__WithOrgBouncycastleCryptoKeyGenerationParameters:(OrgBouncycastleCryptoKeyGenerationParameters *)param {
  self->param_ = (OrgBouncycastleCryptoParamsRSAKeyGenerationParameters *) check_class_cast(param, [OrgBouncycastleCryptoParamsRSAKeyGenerationParameters class]);
}

- (OrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  JavaMathBigInteger *p, *q, *n, *d, *e, *pSub1, *qSub1, *phi;
  jint strength = [((OrgBouncycastleCryptoParamsRSAKeyGenerationParameters *) nil_chk(param_)) getStrength];
  jint qBitlength = URShift32(strength, 1);
  jint pBitlength = strength - qBitlength;
  jint mindiffbits = strength / 3;
  jint minWeight = URShift32(strength, 2);
  e = [param_ getPublicExponent];
  p = [self chooseRandomPrimeWithInt:pBitlength withJavaMathBigInteger:e];
  for (; ; ) {
    q = [self chooseRandomPrimeWithInt:qBitlength withJavaMathBigInteger:e];
    JavaMathBigInteger *diff = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(q)) subtractWithJavaMathBigInteger:p])) abs];
    if ([((JavaMathBigInteger *) nil_chk(diff)) bitLength] < mindiffbits) {
      continue;
    }
    n = [((JavaMathBigInteger *) nil_chk(p)) multiplyWithJavaMathBigInteger:q];
    if ([((JavaMathBigInteger *) nil_chk(n)) bitLength] != strength) {
      p = [p maxWithJavaMathBigInteger:q];
      continue;
    }
    if (OrgBouncycastleMathEcWNafUtil_getNafWeightWithJavaMathBigInteger_(n) < minWeight) {
      p = [self chooseRandomPrimeWithInt:pBitlength withJavaMathBigInteger:e];
      continue;
    }
    break;
  }
  if ([((JavaMathBigInteger *) nil_chk(p)) compareToWithId:q] < 0) {
    phi = p;
    p = q;
    q = phi;
  }
  pSub1 = [((JavaMathBigInteger *) nil_chk(p)) subtractWithJavaMathBigInteger:OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator_ONE_];
  qSub1 = [((JavaMathBigInteger *) nil_chk(q)) subtractWithJavaMathBigInteger:OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator_ONE_];
  phi = [((JavaMathBigInteger *) nil_chk(pSub1)) multiplyWithJavaMathBigInteger:qSub1];
  d = [((JavaMathBigInteger *) nil_chk(e)) modInverseWithJavaMathBigInteger:phi];
  JavaMathBigInteger *dP, *dQ, *qInv;
  dP = [((JavaMathBigInteger *) nil_chk(d)) remainderWithJavaMathBigInteger:pSub1];
  dQ = [d remainderWithJavaMathBigInteger:qSub1];
  qInv = [q modInverseWithJavaMathBigInteger:p];
  return [[OrgBouncycastleCryptoAsymmetricCipherKeyPair alloc] initWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter:[[OrgBouncycastleCryptoParamsRSAKeyParameters alloc] initWithBoolean:NO withJavaMathBigInteger:n withJavaMathBigInteger:e] withOrgBouncycastleCryptoParamsAsymmetricKeyParameter:[[OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters alloc] initWithJavaMathBigInteger:n withJavaMathBigInteger:e withJavaMathBigInteger:d withJavaMathBigInteger:p withJavaMathBigInteger:q withJavaMathBigInteger:dP withJavaMathBigInteger:dQ withJavaMathBigInteger:qInv]];
}

- (JavaMathBigInteger *)chooseRandomPrimeWithInt:(jint)bitlength
                          withJavaMathBigInteger:(JavaMathBigInteger *)e {
  for (; ; ) {
    JavaMathBigInteger *p = [[JavaMathBigInteger alloc] initWithInt:bitlength withInt:1 withJavaUtilRandom:[((OrgBouncycastleCryptoParamsRSAKeyGenerationParameters *) nil_chk(param_)) getRandom]];
    if ([((JavaMathBigInteger *) nil_chk([p modWithJavaMathBigInteger:e])) isEqual:OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator_ONE_]) {
      continue;
    }
    if (![p isProbablePrimeWithInt:[param_ getCertainty]]) {
      continue;
    }
    if (![((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(e)) gcdWithJavaMathBigInteger:[p subtractWithJavaMathBigInteger:OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator_ONE_]])) isEqual:OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator_ONE_]) {
      continue;
    }
    return p;
  }
}

- (instancetype)init {
  return [super init];
}

- (void)copyAllFieldsTo:(OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator *)other {
  [super copyAllFieldsTo:other];
  other->param_ = param_;
}

+ (void)initialize {
  if (self == [OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator class]) {
    OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator_ONE_ = JavaMathBigInteger_valueOfWithLong_(1);
    J2OBJC_SET_INITIALIZED(OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator)
  }
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator)
