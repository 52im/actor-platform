//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/crypto/params/RC2Parameters.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/bouncycastle/crypto/params/RC2Parameters.h"

@interface OrgBouncycastleCryptoParamsRC2Parameters () {
 @public
  IOSByteArray *key_;
  jint bits_;
}
@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsRC2Parameters, key_, IOSByteArray *)

@implementation OrgBouncycastleCryptoParamsRC2Parameters

- (instancetype)initWithByteArray:(IOSByteArray *)key {
  return [self initOrgBouncycastleCryptoParamsRC2ParametersWithByteArray:key withInt:(((IOSByteArray *) nil_chk(key))->size_ > 128) ? 1024 : (key->size_ * 8)];
}

- (instancetype)initOrgBouncycastleCryptoParamsRC2ParametersWithByteArray:(IOSByteArray *)key
                                                                  withInt:(jint)bits {
  if (self = [super init]) {
    self->key_ = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(key))->size_];
    self->bits_ = bits;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, self->key_, 0, key->size_);
  }
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)key
                          withInt:(jint)bits {
  return [self initOrgBouncycastleCryptoParamsRC2ParametersWithByteArray:key withInt:bits];
}

- (IOSByteArray *)getKey {
  return key_;
}

- (jint)getEffectiveKeyBits {
  return bits_;
}

- (void)copyAllFieldsTo:(OrgBouncycastleCryptoParamsRC2Parameters *)other {
  [super copyAllFieldsTo:other];
  other->key_ = key_;
  other->bits_ = bits_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoParamsRC2Parameters)
