//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/crypto/params/DESParameters.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/bouncycastle/crypto/params/DESParameters.h"

@interface OrgBouncycastleCryptoParamsDESParameters () {
}
@end

BOOL OrgBouncycastleCryptoParamsDESParameters_initialized = NO;

@implementation OrgBouncycastleCryptoParamsDESParameters

IOSByteArray * OrgBouncycastleCryptoParamsDESParameters_DES_weak_keys_;

- (instancetype)initWithByteArray:(IOSByteArray *)key {
  if (self = [super initWithByteArray:key]) {
    if (OrgBouncycastleCryptoParamsDESParameters_isWeakKeyWithByteArray_withInt_(key, 0)) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"attempt to create weak DES key"];
    }
  }
  return self;
}

+ (jboolean)isWeakKeyWithByteArray:(IOSByteArray *)key
                           withInt:(jint)offset {
  return OrgBouncycastleCryptoParamsDESParameters_isWeakKeyWithByteArray_withInt_(key, offset);
}

+ (void)setOddParityWithByteArray:(IOSByteArray *)bytes {
  OrgBouncycastleCryptoParamsDESParameters_setOddParityWithByteArray_(bytes);
}

+ (void)initialize {
  if (self == [OrgBouncycastleCryptoParamsDESParameters class]) {
    OrgBouncycastleCryptoParamsDESParameters_DES_weak_keys_ = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x01, (jbyte) (jint) 0x01, (jbyte) (jint) 0x01, (jbyte) (jint) 0x01, (jbyte) (jint) 0x01, (jbyte) (jint) 0x01, (jbyte) (jint) 0x01, (jbyte) (jint) 0x01, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x0e, (jbyte) (jint) 0x0e, (jbyte) (jint) 0x0e, (jbyte) (jint) 0x0e, (jbyte) (jint) 0xe0, (jbyte) (jint) 0xe0, (jbyte) (jint) 0xe0, (jbyte) (jint) 0xe0, (jbyte) (jint) 0xf1, (jbyte) (jint) 0xf1, (jbyte) (jint) 0xf1, (jbyte) (jint) 0xf1, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x01, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x01, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x01, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x01, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x1f, (jbyte) (jint) 0xe0, (jbyte) (jint) 0x1f, (jbyte) (jint) 0xe0, (jbyte) (jint) 0x0e, (jbyte) (jint) 0xf1, (jbyte) (jint) 0x0e, (jbyte) (jint) 0xf1, (jbyte) (jint) 0x01, (jbyte) (jint) 0xe0, (jbyte) (jint) 0x01, (jbyte) (jint) 0xe0, (jbyte) (jint) 0x01, (jbyte) (jint) 0xf1, (jbyte) (jint) 0x01, (jbyte) (jint) 0xf1, (jbyte) (jint) 0x1f, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x1f, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x0e, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x0e, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x01, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x01, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x01, (jbyte) (jint) 0x0e, (jbyte) (jint) 0x01, (jbyte) (jint) 0x0e, (jbyte) (jint) 0xe0, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xe0, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xf1, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xf1, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x01, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x01, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x01, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x01, (jbyte) (jint) 0xe0, (jbyte) (jint) 0x1f, (jbyte) (jint) 0xe0, (jbyte) (jint) 0x1f, (jbyte) (jint) 0xf1, (jbyte) (jint) 0x0e, (jbyte) (jint) 0xf1, (jbyte) (jint) 0x0e, (jbyte) (jint) 0xe0, (jbyte) (jint) 0x01, (jbyte) (jint) 0xe0, (jbyte) (jint) 0x01, (jbyte) (jint) 0xf1, (jbyte) (jint) 0x01, (jbyte) (jint) 0xf1, (jbyte) (jint) 0x01, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x1f, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x1f, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x0e, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x0e, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x01, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x01, (jbyte) (jint) 0x0e, (jbyte) (jint) 0x01, (jbyte) (jint) 0x0e, (jbyte) (jint) 0x01, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xe0, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xe0, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xf1, (jbyte) (jint) 0xfe, (jbyte) (jint) 0xf1 } count:128];
    J2OBJC_SET_INITIALIZED(OrgBouncycastleCryptoParamsDESParameters)
  }
}

@end

jboolean OrgBouncycastleCryptoParamsDESParameters_isWeakKeyWithByteArray_withInt_(IOSByteArray *key, jint offset) {
  OrgBouncycastleCryptoParamsDESParameters_init();
  if (((IOSByteArray *) nil_chk(key))->size_ - offset < OrgBouncycastleCryptoParamsDESParameters_DES_KEY_LENGTH) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"key material too short."];
  }
  for (jint i = 0; i < OrgBouncycastleCryptoParamsDESParameters_N_DES_WEAK_KEYS; i++) {
    {
      for (jint j = 0; j < OrgBouncycastleCryptoParamsDESParameters_DES_KEY_LENGTH; j++) {
        if (IOSByteArray_Get(key, j + offset) != IOSByteArray_Get(nil_chk(OrgBouncycastleCryptoParamsDESParameters_DES_weak_keys_), i * OrgBouncycastleCryptoParamsDESParameters_DES_KEY_LENGTH + j)) {
          goto continue_nextkey;
        }
      }
      return YES;
    }
    continue_nextkey: ;
  }
  return NO;
}

void OrgBouncycastleCryptoParamsDESParameters_setOddParityWithByteArray_(IOSByteArray *bytes) {
  OrgBouncycastleCryptoParamsDESParameters_init();
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(bytes))->size_; i++) {
    jint b = IOSByteArray_Get(bytes, i);
    *IOSByteArray_GetRef(bytes, i) = (jbyte) ((b & (jint) 0xfe) | ((((RShift32(b, 1)) ^ (RShift32(b, 2)) ^ (RShift32(b, 3)) ^ (RShift32(b, 4)) ^ (RShift32(b, 5)) ^ (RShift32(b, 6)) ^ (RShift32(b, 7))) ^ (jint) 0x01) & (jint) 0x01));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoParamsDESParameters)
