//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/crypto/params/KDFCounterParameters.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/bouncycastle/crypto/params/KDFCounterParameters.h"
#include "org/bouncycastle/util/Arrays.h"

@interface OrgBouncycastleCryptoParamsKDFCounterParameters () {
 @public
  IOSByteArray *ki_;
  IOSByteArray *fixedInputDataCounterPrefix_;
  IOSByteArray *fixedInputDataCounterSuffix_;
  jint r_;
}
@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsKDFCounterParameters, ki_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsKDFCounterParameters, fixedInputDataCounterPrefix_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsKDFCounterParameters, fixedInputDataCounterSuffix_, IOSByteArray *)

@implementation OrgBouncycastleCryptoParamsKDFCounterParameters

- (instancetype)initWithByteArray:(IOSByteArray *)ki
                    withByteArray:(IOSByteArray *)fixedInputDataCounterSuffix
                          withInt:(jint)r {
  return [self initOrgBouncycastleCryptoParamsKDFCounterParametersWithByteArray:ki withByteArray:nil withByteArray:fixedInputDataCounterSuffix withInt:r];
}

- (instancetype)initOrgBouncycastleCryptoParamsKDFCounterParametersWithByteArray:(IOSByteArray *)ki
                                                                   withByteArray:(IOSByteArray *)fixedInputDataCounterPrefix
                                                                   withByteArray:(IOSByteArray *)fixedInputDataCounterSuffix
                                                                         withInt:(jint)r {
  if (self = [super init]) {
    if (ki == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"A KDF requires Ki (a seed) as input"];
    }
    self->ki_ = OrgBouncycastleUtilArrays_cloneWithByteArray_(ki);
    if (fixedInputDataCounterPrefix == nil) {
      self->fixedInputDataCounterPrefix_ = [IOSByteArray newArrayWithLength:0];
    }
    else {
      self->fixedInputDataCounterPrefix_ = OrgBouncycastleUtilArrays_cloneWithByteArray_(fixedInputDataCounterPrefix);
    }
    if (fixedInputDataCounterSuffix == nil) {
      self->fixedInputDataCounterSuffix_ = [IOSByteArray newArrayWithLength:0];
    }
    else {
      self->fixedInputDataCounterSuffix_ = OrgBouncycastleUtilArrays_cloneWithByteArray_(fixedInputDataCounterSuffix);
    }
    if (r != 8 && r != 16 && r != 24 && r != 32) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Length of counter should be 8, 16, 24 or 32"];
    }
    self->r_ = r;
  }
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)ki
                    withByteArray:(IOSByteArray *)fixedInputDataCounterPrefix
                    withByteArray:(IOSByteArray *)fixedInputDataCounterSuffix
                          withInt:(jint)r {
  return [self initOrgBouncycastleCryptoParamsKDFCounterParametersWithByteArray:ki withByteArray:fixedInputDataCounterPrefix withByteArray:fixedInputDataCounterSuffix withInt:r];
}

- (IOSByteArray *)getKI {
  return ki_;
}

- (IOSByteArray *)getFixedInputData {
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(fixedInputDataCounterSuffix_);
}

- (IOSByteArray *)getFixedInputDataCounterPrefix {
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(fixedInputDataCounterPrefix_);
}

- (IOSByteArray *)getFixedInputDataCounterSuffix {
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(fixedInputDataCounterSuffix_);
}

- (jint)getR {
  return r_;
}

- (void)copyAllFieldsTo:(OrgBouncycastleCryptoParamsKDFCounterParameters *)other {
  [super copyAllFieldsTo:other];
  other->ki_ = ki_;
  other->fixedInputDataCounterPrefix_ = fixedInputDataCounterPrefix_;
  other->fixedInputDataCounterSuffix_ = fixedInputDataCounterSuffix_;
  other->r_ = r_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoParamsKDFCounterParameters)
