//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/crypto/params/RC5Parameters.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/bouncycastle/crypto/params/RC5Parameters.h"

@interface OrgBouncycastleCryptoParamsRC5Parameters () {
 @public
  IOSByteArray *key_;
  jint rounds_;
}
@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsRC5Parameters, key_, IOSByteArray *)

@implementation OrgBouncycastleCryptoParamsRC5Parameters

- (instancetype)initWithByteArray:(IOSByteArray *)key
                          withInt:(jint)rounds {
  if (self = [super init]) {
    if (((IOSByteArray *) nil_chk(key))->size_ > 255) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"RC5 key length can be no greater than 255"];
    }
    self->key_ = [IOSByteArray newArrayWithLength:key->size_];
    self->rounds_ = rounds;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, self->key_, 0, key->size_);
  }
  return self;
}

- (IOSByteArray *)getKey {
  return key_;
}

- (jint)getRounds {
  return rounds_;
}

- (void)copyAllFieldsTo:(OrgBouncycastleCryptoParamsRC5Parameters *)other {
  [super copyAllFieldsTo:other];
  other->key_ = key_;
  other->rounds_ = rounds_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoParamsRC5Parameters)
