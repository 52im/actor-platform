//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/params/NaccacheSternKeyGenerationParameters.h"

@interface OrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters () {
 @public
  jint certainty_;
  jint cntSmallPrimes_;
  jboolean debug_;
}
@end

@implementation OrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                         withInt:(jint)strength
                                         withInt:(jint)certainty
                                         withInt:(jint)cntSmallPrimes {
  return [self initOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParametersWithJavaSecuritySecureRandom:random withInt:strength withInt:certainty withInt:cntSmallPrimes withBoolean:NO];
}

- (instancetype)initOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParametersWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                                                                        withInt:(jint)strength
                                                                                                        withInt:(jint)certainty
                                                                                                        withInt:(jint)cntSmallPrimes
                                                                                                    withBoolean:(jboolean)debug {
  if (self = [super initWithJavaSecuritySecureRandom:random withInt:strength]) {
    debug_ = NO;
    self->certainty_ = certainty;
    if (cntSmallPrimes % 2 == 1) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"cntSmallPrimes must be a multiple of 2"];
    }
    if (cntSmallPrimes < 30) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"cntSmallPrimes must be >= 30 for security reasons"];
    }
    self->cntSmallPrimes_ = cntSmallPrimes;
    self->debug_ = debug;
  }
  return self;
}

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                         withInt:(jint)strength
                                         withInt:(jint)certainty
                                         withInt:(jint)cntSmallPrimes
                                     withBoolean:(jboolean)debug {
  return [self initOrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParametersWithJavaSecuritySecureRandom:random withInt:strength withInt:certainty withInt:cntSmallPrimes withBoolean:debug];
}

- (jint)getCertainty {
  return certainty_;
}

- (jint)getCntSmallPrimes {
  return cntSmallPrimes_;
}

- (jboolean)isDebug {
  return debug_;
}

- (void)copyAllFieldsTo:(OrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters *)other {
  [super copyAllFieldsTo:other];
  other->certainty_ = certainty_;
  other->cntSmallPrimes_ = cntSmallPrimes_;
  other->debug_ = debug_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoParamsNaccacheSternKeyGenerationParameters)
