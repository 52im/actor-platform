//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/asn1/crmf/CertTemplate.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/util/Enumeration.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/ASN1TaggedObject.h"
#include "org/bouncycastle/asn1/DERBitString.h"
#include "org/bouncycastle/asn1/crmf/CertTemplate.h"
#include "org/bouncycastle/asn1/crmf/OptionalValidity.h"
#include "org/bouncycastle/asn1/x500/X500Name.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/Extensions.h"
#include "org/bouncycastle/asn1/x509/SubjectPublicKeyInfo.h"

@interface OrgBouncycastleAsn1CrmfCertTemplate () {
 @public
  OrgBouncycastleAsn1ASN1Sequence *seq_;
  OrgBouncycastleAsn1ASN1Integer *version__;
  OrgBouncycastleAsn1ASN1Integer *serialNumber_;
  OrgBouncycastleAsn1X509AlgorithmIdentifier *signingAlg_;
  OrgBouncycastleAsn1X500X500Name *issuer_;
  OrgBouncycastleAsn1CrmfOptionalValidity *validity_;
  OrgBouncycastleAsn1X500X500Name *subject_;
  OrgBouncycastleAsn1X509SubjectPublicKeyInfo *publicKey_;
  OrgBouncycastleAsn1DERBitString *issuerUID_;
  OrgBouncycastleAsn1DERBitString *subjectUID_;
  OrgBouncycastleAsn1X509Extensions *extensions_;
}
- (instancetype)initWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq;
@end

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1CrmfCertTemplate, seq_, OrgBouncycastleAsn1ASN1Sequence *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1CrmfCertTemplate, version__, OrgBouncycastleAsn1ASN1Integer *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1CrmfCertTemplate, serialNumber_, OrgBouncycastleAsn1ASN1Integer *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1CrmfCertTemplate, signingAlg_, OrgBouncycastleAsn1X509AlgorithmIdentifier *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1CrmfCertTemplate, issuer_, OrgBouncycastleAsn1X500X500Name *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1CrmfCertTemplate, validity_, OrgBouncycastleAsn1CrmfOptionalValidity *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1CrmfCertTemplate, subject_, OrgBouncycastleAsn1X500X500Name *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1CrmfCertTemplate, publicKey_, OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1CrmfCertTemplate, issuerUID_, OrgBouncycastleAsn1DERBitString *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1CrmfCertTemplate, subjectUID_, OrgBouncycastleAsn1DERBitString *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1CrmfCertTemplate, extensions_, OrgBouncycastleAsn1X509Extensions *)

@implementation OrgBouncycastleAsn1CrmfCertTemplate

- (instancetype)initWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq {
  if (self = [super init]) {
    self->seq_ = seq;
    id<JavaUtilEnumeration> en = [((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjects];
    while ([((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]) {
      OrgBouncycastleAsn1ASN1TaggedObject *tObj = (OrgBouncycastleAsn1ASN1TaggedObject *) check_class_cast([en nextElement], [OrgBouncycastleAsn1ASN1TaggedObject class]);
      switch ([((OrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(tObj)) getTagNo]) {
        case 0:
        version__ = OrgBouncycastleAsn1ASN1Integer_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, NO);
        break;
        case 1:
        serialNumber_ = OrgBouncycastleAsn1ASN1Integer_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, NO);
        break;
        case 2:
        signingAlg_ = OrgBouncycastleAsn1X509AlgorithmIdentifier_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, NO);
        break;
        case 3:
        issuer_ = OrgBouncycastleAsn1X500X500Name_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, YES);
        break;
        case 4:
        validity_ = OrgBouncycastleAsn1CrmfOptionalValidity_getInstanceWithId_(OrgBouncycastleAsn1ASN1Sequence_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, NO));
        break;
        case 5:
        subject_ = OrgBouncycastleAsn1X500X500Name_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, YES);
        break;
        case 6:
        publicKey_ = OrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, NO);
        break;
        case 7:
        issuerUID_ = OrgBouncycastleAsn1DERBitString_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, NO);
        break;
        case 8:
        subjectUID_ = OrgBouncycastleAsn1DERBitString_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, NO);
        break;
        case 9:
        extensions_ = OrgBouncycastleAsn1X509Extensions_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tObj, NO);
        break;
        default:
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I", @"unknown tag: ", [tObj getTagNo])];
      }
    }
  }
  return self;
}

+ (OrgBouncycastleAsn1CrmfCertTemplate *)getInstanceWithId:(id)o {
  return OrgBouncycastleAsn1CrmfCertTemplate_getInstanceWithId_(o);
}

- (jint)getVersion {
  return [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleAsn1ASN1Integer *) nil_chk(version__)) getValue])) intValue];
}

- (OrgBouncycastleAsn1ASN1Integer *)getSerialNumber {
  return serialNumber_;
}

- (OrgBouncycastleAsn1X509AlgorithmIdentifier *)getSigningAlg {
  return signingAlg_;
}

- (OrgBouncycastleAsn1X500X500Name *)getIssuer {
  return issuer_;
}

- (OrgBouncycastleAsn1CrmfOptionalValidity *)getValidity {
  return validity_;
}

- (OrgBouncycastleAsn1X500X500Name *)getSubject {
  return subject_;
}

- (OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)getPublicKey {
  return publicKey_;
}

- (OrgBouncycastleAsn1DERBitString *)getIssuerUID {
  return issuerUID_;
}

- (OrgBouncycastleAsn1DERBitString *)getSubjectUID {
  return subjectUID_;
}

- (OrgBouncycastleAsn1X509Extensions *)getExtensions {
  return extensions_;
}

- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  return seq_;
}

- (void)copyAllFieldsTo:(OrgBouncycastleAsn1CrmfCertTemplate *)other {
  [super copyAllFieldsTo:other];
  other->seq_ = seq_;
  other->version__ = version__;
  other->serialNumber_ = serialNumber_;
  other->signingAlg_ = signingAlg_;
  other->issuer_ = issuer_;
  other->validity_ = validity_;
  other->subject_ = subject_;
  other->publicKey_ = publicKey_;
  other->issuerUID_ = issuerUID_;
  other->subjectUID_ = subjectUID_;
  other->extensions_ = extensions_;
}

@end

OrgBouncycastleAsn1CrmfCertTemplate *OrgBouncycastleAsn1CrmfCertTemplate_getInstanceWithId_(id o) {
  OrgBouncycastleAsn1CrmfCertTemplate_init();
  if ([o isKindOfClass:[OrgBouncycastleAsn1CrmfCertTemplate class]]) {
    return (OrgBouncycastleAsn1CrmfCertTemplate *) check_class_cast(o, [OrgBouncycastleAsn1CrmfCertTemplate class]);
  }
  else if (o != nil) {
    return [[OrgBouncycastleAsn1CrmfCertTemplate alloc] initWithOrgBouncycastleAsn1ASN1Sequence:OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(o)];
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1CrmfCertTemplate)
