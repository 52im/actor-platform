//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/asn1/ASN1OutputStream.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1OutputStream.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/BERTags.h"
#include "org/bouncycastle/asn1/DEROutputStream.h"
#include "org/bouncycastle/asn1/DLOutputStream.h"

@interface OrgBouncycastleAsn1ASN1OutputStream () {
 @public
  JavaIoOutputStream *os_;
}
@end

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1ASN1OutputStream, os_, JavaIoOutputStream *)

@interface OrgBouncycastleAsn1ASN1OutputStream_ImplicitOutputStream () {
 @public
  jboolean first_;
}
@end

@implementation OrgBouncycastleAsn1ASN1OutputStream

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  if (self = [super init]) {
    self->os_ = os;
  }
  return self;
}

- (void)writeLengthWithInt:(jint)length {
  if (length > 127) {
    jint size = 1;
    jint val = length;
    while ((URShiftAssignInt(&val, 8)) != 0) {
      size++;
    }
    [self writeWithInt:(jbyte) (size | (jint) 0x80)];
    for (jint i = (size - 1) * 8; i >= 0; i -= 8) {
      [self writeWithInt:(jbyte) (RShift32(length, i))];
    }
  }
  else {
    [self writeWithInt:(jbyte) length];
  }
}

- (void)writeWithInt:(jint)b {
  [((JavaIoOutputStream *) nil_chk(os_)) writeWithInt:b];
}

- (void)writeWithByteArray:(IOSByteArray *)bytes {
  [((JavaIoOutputStream *) nil_chk(os_)) writeWithByteArray:bytes];
}

- (void)writeWithByteArray:(IOSByteArray *)bytes
                   withInt:(jint)off
                   withInt:(jint)len {
  [((JavaIoOutputStream *) nil_chk(os_)) writeWithByteArray:bytes withInt:off withInt:len];
}

- (void)writeEncodedWithInt:(jint)tag
              withByteArray:(IOSByteArray *)bytes {
  [self writeWithInt:tag];
  [self writeLengthWithInt:((IOSByteArray *) nil_chk(bytes))->size_];
  [self writeWithByteArray:bytes];
}

- (void)writeTagWithInt:(jint)flags
                withInt:(jint)tagNo {
  if (tagNo < 31) {
    [self writeWithInt:flags | tagNo];
  }
  else {
    [self writeWithInt:flags | (jint) 0x1f];
    if (tagNo < 128) {
      [self writeWithInt:tagNo];
    }
    else {
      IOSByteArray *stack = [IOSByteArray newArrayWithLength:5];
      jint pos = stack->size_;
      *IOSByteArray_GetRef(stack, --pos) = (jbyte) (tagNo & (jint) 0x7F);
      do {
        RShiftAssignInt(&tagNo, 7);
        *IOSByteArray_GetRef(stack, --pos) = (jbyte) ((tagNo & (jint) 0x7F) | (jint) 0x80);
      }
      while (tagNo > 127);
      [self writeWithByteArray:stack withInt:pos withInt:stack->size_ - pos];
    }
  }
}

- (void)writeEncodedWithInt:(jint)flags
                    withInt:(jint)tagNo
              withByteArray:(IOSByteArray *)bytes {
  [self writeTagWithInt:flags withInt:tagNo];
  [self writeLengthWithInt:((IOSByteArray *) nil_chk(bytes))->size_];
  [self writeWithByteArray:bytes];
}

- (void)writeNull {
  [((JavaIoOutputStream *) nil_chk(os_)) writeWithInt:OrgBouncycastleAsn1BERTags_NULL];
  [os_ writeWithInt:(jint) 0x00];
}

- (void)writeObjectWithOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)obj {
  if (obj != nil) {
    [((OrgBouncycastleAsn1ASN1Primitive *) nil_chk([obj toASN1Primitive])) encodeWithOrgBouncycastleAsn1ASN1OutputStream:self];
  }
  else {
    @throw [[JavaIoIOException alloc] initWithNSString:@"null object detected"];
  }
}

- (void)writeImplicitObjectWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)obj {
  if (obj != nil) {
    [obj encodeWithOrgBouncycastleAsn1ASN1OutputStream:[[OrgBouncycastleAsn1ASN1OutputStream_ImplicitOutputStream alloc] initWithOrgBouncycastleAsn1ASN1OutputStream:self withJavaIoOutputStream:os_]];
  }
  else {
    @throw [[JavaIoIOException alloc] initWithNSString:@"null object detected"];
  }
}

- (void)close {
  [((JavaIoOutputStream *) nil_chk(os_)) close];
}

- (void)flush {
  [((JavaIoOutputStream *) nil_chk(os_)) flush];
}

- (OrgBouncycastleAsn1ASN1OutputStream *)getDERSubStream {
  return [[OrgBouncycastleAsn1DEROutputStream alloc] initWithJavaIoOutputStream:os_];
}

- (OrgBouncycastleAsn1ASN1OutputStream *)getDLSubStream {
  return [[OrgBouncycastleAsn1DLOutputStream alloc] initWithJavaIoOutputStream:os_];
}

- (void)copyAllFieldsTo:(OrgBouncycastleAsn1ASN1OutputStream *)other {
  [super copyAllFieldsTo:other];
  other->os_ = os_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1ASN1OutputStream)

@implementation OrgBouncycastleAsn1ASN1OutputStream_ImplicitOutputStream

- (instancetype)initWithOrgBouncycastleAsn1ASN1OutputStream:(OrgBouncycastleAsn1ASN1OutputStream *)outer$
                                     withJavaIoOutputStream:(JavaIoOutputStream *)os {
  if (self = [super initWithJavaIoOutputStream:os]) {
    first_ = YES;
  }
  return self;
}

- (void)writeWithInt:(jint)b {
  if (first_) {
    first_ = NO;
  }
  else {
    [super writeWithInt:b];
  }
}

- (void)copyAllFieldsTo:(OrgBouncycastleAsn1ASN1OutputStream_ImplicitOutputStream *)other {
  [super copyAllFieldsTo:other];
  other->first_ = first_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1ASN1OutputStream_ImplicitOutputStream)
