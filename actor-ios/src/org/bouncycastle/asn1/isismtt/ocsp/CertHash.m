//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/asn1/isismtt/ocsp/CertHash.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1EncodableVector.h"
#include "org/bouncycastle/asn1/ASN1OctetString.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/DEROctetString.h"
#include "org/bouncycastle/asn1/DERSequence.h"
#include "org/bouncycastle/asn1/isismtt/ocsp/CertHash.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"

@interface OrgBouncycastleAsn1IsismttOcspCertHash () {
 @public
  OrgBouncycastleAsn1X509AlgorithmIdentifier *hashAlgorithm_;
  IOSByteArray *certificateHash_;
}
- (instancetype)initWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq;
@end

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1IsismttOcspCertHash, hashAlgorithm_, OrgBouncycastleAsn1X509AlgorithmIdentifier *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1IsismttOcspCertHash, certificateHash_, IOSByteArray *)

@implementation OrgBouncycastleAsn1IsismttOcspCertHash

+ (OrgBouncycastleAsn1IsismttOcspCertHash *)getInstanceWithId:(id)obj {
  return OrgBouncycastleAsn1IsismttOcspCertHash_getInstanceWithId_(obj);
}

- (instancetype)initWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq {
  if (self = [super init]) {
    if ([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) size] != 2) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I", @"Bad sequence size: ", [seq size])];
    }
    hashAlgorithm_ = OrgBouncycastleAsn1X509AlgorithmIdentifier_getInstanceWithId_([seq getObjectAtWithInt:0]);
    certificateHash_ = [((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([seq getObjectAtWithInt:1]))) getOctets];
  }
  return self;
}

- (instancetype)initWithOrgBouncycastleAsn1X509AlgorithmIdentifier:(OrgBouncycastleAsn1X509AlgorithmIdentifier *)hashAlgorithm
                                                     withByteArray:(IOSByteArray *)certificateHash {
  if (self = [super init]) {
    self->hashAlgorithm_ = hashAlgorithm;
    self->certificateHash_ = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(certificateHash))->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(certificateHash, 0, self->certificateHash_, 0, certificateHash->size_);
  }
  return self;
}

- (OrgBouncycastleAsn1X509AlgorithmIdentifier *)getHashAlgorithm {
  return hashAlgorithm_;
}

- (IOSByteArray *)getCertificateHash {
  return certificateHash_;
}

- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  OrgBouncycastleAsn1ASN1EncodableVector *vec = [[OrgBouncycastleAsn1ASN1EncodableVector alloc] init];
  [vec addWithOrgBouncycastleAsn1ASN1Encodable:hashAlgorithm_];
  [vec addWithOrgBouncycastleAsn1ASN1Encodable:[[OrgBouncycastleAsn1DEROctetString alloc] initWithByteArray:certificateHash_]];
  return [[OrgBouncycastleAsn1DERSequence alloc] initWithOrgBouncycastleAsn1ASN1EncodableVector:vec];
}

- (void)copyAllFieldsTo:(OrgBouncycastleAsn1IsismttOcspCertHash *)other {
  [super copyAllFieldsTo:other];
  other->hashAlgorithm_ = hashAlgorithm_;
  other->certificateHash_ = certificateHash_;
}

@end

OrgBouncycastleAsn1IsismttOcspCertHash *OrgBouncycastleAsn1IsismttOcspCertHash_getInstanceWithId_(id obj) {
  OrgBouncycastleAsn1IsismttOcspCertHash_init();
  if (obj == nil || [obj isKindOfClass:[OrgBouncycastleAsn1IsismttOcspCertHash class]]) {
    return (OrgBouncycastleAsn1IsismttOcspCertHash *) check_class_cast(obj, [OrgBouncycastleAsn1IsismttOcspCertHash class]);
  }
  if ([obj isKindOfClass:[OrgBouncycastleAsn1ASN1Sequence class]]) {
    return [[OrgBouncycastleAsn1IsismttOcspCertHash alloc] initWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *) check_class_cast(obj, [OrgBouncycastleAsn1ASN1Sequence class])];
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$", @"illegal object in getInstance: ", [[nil_chk(obj) getClass] getName])];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1IsismttOcspCertHash)
