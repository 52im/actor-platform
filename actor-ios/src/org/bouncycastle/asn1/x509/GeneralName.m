//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/asn1/x509/GeneralName.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/util/StringTokenizer.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1OctetString.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/ASN1TaggedObject.h"
#include "org/bouncycastle/asn1/DERIA5String.h"
#include "org/bouncycastle/asn1/DEROctetString.h"
#include "org/bouncycastle/asn1/DERTaggedObject.h"
#include "org/bouncycastle/asn1/x500/X500Name.h"
#include "org/bouncycastle/asn1/x509/GeneralName.h"
#include "org/bouncycastle/asn1/x509/X509Name.h"
#include "org/bouncycastle/util/IPAddress.h"

__attribute__((unused)) static IOSByteArray *OrgBouncycastleAsn1X509GeneralName_toGeneralNameEncodingWithNSString_(OrgBouncycastleAsn1X509GeneralName *self, NSString *ip);
__attribute__((unused)) static void OrgBouncycastleAsn1X509GeneralName_parseIPv4MaskWithNSString_withByteArray_withInt_(OrgBouncycastleAsn1X509GeneralName *self, NSString *mask, IOSByteArray *addr, jint offset);
__attribute__((unused)) static void OrgBouncycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(OrgBouncycastleAsn1X509GeneralName *self, NSString *ip, IOSByteArray *addr, jint offset);
__attribute__((unused)) static IOSIntArray *OrgBouncycastleAsn1X509GeneralName_parseMaskWithNSString_(OrgBouncycastleAsn1X509GeneralName *self, NSString *mask);
__attribute__((unused)) static void OrgBouncycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(OrgBouncycastleAsn1X509GeneralName *self, IOSIntArray *parsedIp, IOSByteArray *addr, jint offSet);
__attribute__((unused)) static IOSIntArray *OrgBouncycastleAsn1X509GeneralName_parseIPv6WithNSString_(OrgBouncycastleAsn1X509GeneralName *self, NSString *ip);

@interface OrgBouncycastleAsn1X509GeneralName () {
 @public
  id<OrgBouncycastleAsn1ASN1Encodable> obj_;
  jint tag_;
}

- (IOSByteArray *)toGeneralNameEncodingWithNSString:(NSString *)ip;

- (void)parseIPv4MaskWithNSString:(NSString *)mask
                    withByteArray:(IOSByteArray *)addr
                          withInt:(jint)offset;

- (void)parseIPv4WithNSString:(NSString *)ip
                withByteArray:(IOSByteArray *)addr
                      withInt:(jint)offset;

- (IOSIntArray *)parseMaskWithNSString:(NSString *)mask;

- (void)copyIntsWithIntArray:(IOSIntArray *)parsedIp
               withByteArray:(IOSByteArray *)addr
                     withInt:(jint)offSet OBJC_METHOD_FAMILY_NONE;

- (IOSIntArray *)parseIPv6WithNSString:(NSString *)ip;
@end

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1X509GeneralName, obj_, id<OrgBouncycastleAsn1ASN1Encodable>)

@implementation OrgBouncycastleAsn1X509GeneralName

- (instancetype)initWithOrgBouncycastleAsn1X509X509Name:(OrgBouncycastleAsn1X509X509Name *)dirName {
  if (self = [super init]) {
    self->obj_ = OrgBouncycastleAsn1X500X500Name_getInstanceWithId_(dirName);
    self->tag_ = 4;
  }
  return self;
}

- (instancetype)initWithOrgBouncycastleAsn1X500X500Name:(OrgBouncycastleAsn1X500X500Name *)dirName {
  if (self = [super init]) {
    self->obj_ = dirName;
    self->tag_ = 4;
  }
  return self;
}

- (instancetype)initWithInt:(jint)tag
withOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)name {
  if (self = [super init]) {
    self->obj_ = name;
    self->tag_ = tag;
  }
  return self;
}

- (instancetype)initWithInt:(jint)tag
               withNSString:(NSString *)name {
  if (self = [super init]) {
    self->tag_ = tag;
    if (tag == OrgBouncycastleAsn1X509GeneralName_rfc822Name || tag == OrgBouncycastleAsn1X509GeneralName_dNSName || tag == OrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier) {
      self->obj_ = [[OrgBouncycastleAsn1DERIA5String alloc] initWithNSString:name];
    }
    else if (tag == OrgBouncycastleAsn1X509GeneralName_registeredID) {
      self->obj_ = [[OrgBouncycastleAsn1ASN1ObjectIdentifier alloc] initWithNSString:name];
    }
    else if (tag == OrgBouncycastleAsn1X509GeneralName_directoryName) {
      self->obj_ = [[OrgBouncycastleAsn1X500X500Name alloc] initWithNSString:name];
    }
    else if (tag == OrgBouncycastleAsn1X509GeneralName_iPAddress) {
      IOSByteArray *enc = OrgBouncycastleAsn1X509GeneralName_toGeneralNameEncodingWithNSString_(self, name);
      if (enc != nil) {
        self->obj_ = [[OrgBouncycastleAsn1DEROctetString alloc] initWithByteArray:enc];
      }
      else {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"IP Address is invalid"];
      }
    }
    else {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I", @"can't process String for tag: ", tag)];
    }
  }
  return self;
}

+ (OrgBouncycastleAsn1X509GeneralName *)getInstanceWithId:(id)obj {
  return OrgBouncycastleAsn1X509GeneralName_getInstanceWithId_(obj);
}

+ (OrgBouncycastleAsn1X509GeneralName *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)tagObj
                                                                               withBoolean:(jboolean)explicit_ {
  return OrgBouncycastleAsn1X509GeneralName_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, explicit_);
}

- (jint)getTagNo {
  return tag_;
}

- (id<OrgBouncycastleAsn1ASN1Encodable>)getName {
  return obj_;
}

- (NSString *)description {
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] init];
  (void) [buf appendWithInt:tag_];
  (void) [buf appendWithNSString:@": "];
  switch (tag_) {
    case OrgBouncycastleAsn1X509GeneralName_rfc822Name:
    case OrgBouncycastleAsn1X509GeneralName_dNSName:
    case OrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier:
    (void) [buf appendWithNSString:[((OrgBouncycastleAsn1DERIA5String *) nil_chk(OrgBouncycastleAsn1DERIA5String_getInstanceWithId_(obj_))) getString]];
    break;
    case OrgBouncycastleAsn1X509GeneralName_directoryName:
    (void) [buf appendWithNSString:[((OrgBouncycastleAsn1X500X500Name *) nil_chk(OrgBouncycastleAsn1X500X500Name_getInstanceWithId_(obj_))) description]];
    break;
    default:
    (void) [buf appendWithNSString:[((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk(obj_)) description]];
  }
  return [buf description];
}

- (IOSByteArray *)toGeneralNameEncodingWithNSString:(NSString *)ip {
  return OrgBouncycastleAsn1X509GeneralName_toGeneralNameEncodingWithNSString_(self, ip);
}

- (void)parseIPv4MaskWithNSString:(NSString *)mask
                    withByteArray:(IOSByteArray *)addr
                          withInt:(jint)offset {
  OrgBouncycastleAsn1X509GeneralName_parseIPv4MaskWithNSString_withByteArray_withInt_(self, mask, addr, offset);
}

- (void)parseIPv4WithNSString:(NSString *)ip
                withByteArray:(IOSByteArray *)addr
                      withInt:(jint)offset {
  OrgBouncycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(self, ip, addr, offset);
}

- (IOSIntArray *)parseMaskWithNSString:(NSString *)mask {
  return OrgBouncycastleAsn1X509GeneralName_parseMaskWithNSString_(self, mask);
}

- (void)copyIntsWithIntArray:(IOSIntArray *)parsedIp
               withByteArray:(IOSByteArray *)addr
                     withInt:(jint)offSet {
  OrgBouncycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(self, parsedIp, addr, offSet);
}

- (IOSIntArray *)parseIPv6WithNSString:(NSString *)ip {
  return OrgBouncycastleAsn1X509GeneralName_parseIPv6WithNSString_(self, ip);
}

- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  if (tag_ == OrgBouncycastleAsn1X509GeneralName_directoryName) {
    return [[OrgBouncycastleAsn1DERTaggedObject alloc] initWithBoolean:YES withInt:tag_ withOrgBouncycastleAsn1ASN1Encodable:obj_];
  }
  else {
    return [[OrgBouncycastleAsn1DERTaggedObject alloc] initWithBoolean:NO withInt:tag_ withOrgBouncycastleAsn1ASN1Encodable:obj_];
  }
}

- (void)copyAllFieldsTo:(OrgBouncycastleAsn1X509GeneralName *)other {
  [super copyAllFieldsTo:other];
  other->obj_ = obj_;
  other->tag_ = tag_;
}

@end

OrgBouncycastleAsn1X509GeneralName *OrgBouncycastleAsn1X509GeneralName_getInstanceWithId_(id obj) {
  OrgBouncycastleAsn1X509GeneralName_init();
  if (obj == nil || [obj isKindOfClass:[OrgBouncycastleAsn1X509GeneralName class]]) {
    return (OrgBouncycastleAsn1X509GeneralName *) check_class_cast(obj, [OrgBouncycastleAsn1X509GeneralName class]);
  }
  if ([obj isKindOfClass:[OrgBouncycastleAsn1ASN1TaggedObject class]]) {
    OrgBouncycastleAsn1ASN1TaggedObject *tagObj = (OrgBouncycastleAsn1ASN1TaggedObject *) check_class_cast(obj, [OrgBouncycastleAsn1ASN1TaggedObject class]);
    jint tag = [((OrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(tagObj)) getTagNo];
    switch (tag) {
      case OrgBouncycastleAsn1X509GeneralName_otherName:
      return [[OrgBouncycastleAsn1X509GeneralName alloc] initWithInt:tag withOrgBouncycastleAsn1ASN1Encodable:OrgBouncycastleAsn1ASN1Sequence_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, NO)];
      case OrgBouncycastleAsn1X509GeneralName_rfc822Name:
      return [[OrgBouncycastleAsn1X509GeneralName alloc] initWithInt:tag withOrgBouncycastleAsn1ASN1Encodable:OrgBouncycastleAsn1DERIA5String_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, NO)];
      case OrgBouncycastleAsn1X509GeneralName_dNSName:
      return [[OrgBouncycastleAsn1X509GeneralName alloc] initWithInt:tag withOrgBouncycastleAsn1ASN1Encodable:OrgBouncycastleAsn1DERIA5String_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, NO)];
      case OrgBouncycastleAsn1X509GeneralName_x400Address:
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I", @"unknown tag: ", tag)];
      case OrgBouncycastleAsn1X509GeneralName_directoryName:
      return [[OrgBouncycastleAsn1X509GeneralName alloc] initWithInt:tag withOrgBouncycastleAsn1ASN1Encodable:OrgBouncycastleAsn1X500X500Name_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, YES)];
      case OrgBouncycastleAsn1X509GeneralName_ediPartyName:
      return [[OrgBouncycastleAsn1X509GeneralName alloc] initWithInt:tag withOrgBouncycastleAsn1ASN1Encodable:OrgBouncycastleAsn1ASN1Sequence_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, NO)];
      case OrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier:
      return [[OrgBouncycastleAsn1X509GeneralName alloc] initWithInt:tag withOrgBouncycastleAsn1ASN1Encodable:OrgBouncycastleAsn1DERIA5String_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, NO)];
      case OrgBouncycastleAsn1X509GeneralName_iPAddress:
      return [[OrgBouncycastleAsn1X509GeneralName alloc] initWithInt:tag withOrgBouncycastleAsn1ASN1Encodable:OrgBouncycastleAsn1ASN1OctetString_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, NO)];
      case OrgBouncycastleAsn1X509GeneralName_registeredID:
      return [[OrgBouncycastleAsn1X509GeneralName alloc] initWithInt:tag withOrgBouncycastleAsn1ASN1Encodable:OrgBouncycastleAsn1ASN1ObjectIdentifier_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, NO)];
    }
  }
  if ([obj isKindOfClass:[IOSByteArray class]]) {
    @try {
      return OrgBouncycastleAsn1X509GeneralName_getInstanceWithId_(OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_((IOSByteArray *) check_class_cast(obj, [IOSByteArray class])));
    }
    @catch (JavaIoIOException *e) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"unable to parse encoded general name"];
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$", @"unknown object in getInstance: ", [[nil_chk(obj) getClass] getName])];
}

OrgBouncycastleAsn1X509GeneralName *OrgBouncycastleAsn1X509GeneralName_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *tagObj, jboolean explicit_) {
  OrgBouncycastleAsn1X509GeneralName_init();
  return OrgBouncycastleAsn1X509GeneralName_getInstanceWithId_(OrgBouncycastleAsn1ASN1TaggedObject_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, YES));
}

IOSByteArray *OrgBouncycastleAsn1X509GeneralName_toGeneralNameEncodingWithNSString_(OrgBouncycastleAsn1X509GeneralName *self, NSString *ip) {
  if (OrgBouncycastleUtilIPAddress_isValidIPv6WithNetmaskWithNSString_(ip) || OrgBouncycastleUtilIPAddress_isValidIPv6WithNSString_(ip)) {
    jint slashIndex = [((NSString *) nil_chk(ip)) indexOf:'/'];
    if (slashIndex < 0) {
      IOSByteArray *addr = [IOSByteArray newArrayWithLength:16];
      IOSIntArray *parsedIp = OrgBouncycastleAsn1X509GeneralName_parseIPv6WithNSString_(self, ip);
      OrgBouncycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(self, parsedIp, addr, 0);
      return addr;
    }
    else {
      IOSByteArray *addr = [IOSByteArray newArrayWithLength:32];
      IOSIntArray *parsedIp = OrgBouncycastleAsn1X509GeneralName_parseIPv6WithNSString_(self, [ip substring:0 endIndex:slashIndex]);
      OrgBouncycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(self, parsedIp, addr, 0);
      NSString *mask = [ip substring:slashIndex + 1];
      if ([((NSString *) nil_chk(mask)) indexOf:':'] > 0) {
        parsedIp = OrgBouncycastleAsn1X509GeneralName_parseIPv6WithNSString_(self, mask);
      }
      else {
        parsedIp = OrgBouncycastleAsn1X509GeneralName_parseMaskWithNSString_(self, mask);
      }
      OrgBouncycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(self, parsedIp, addr, 16);
      return addr;
    }
  }
  else if (OrgBouncycastleUtilIPAddress_isValidIPv4WithNetmaskWithNSString_(ip) || OrgBouncycastleUtilIPAddress_isValidIPv4WithNSString_(ip)) {
    jint slashIndex = [((NSString *) nil_chk(ip)) indexOf:'/'];
    if (slashIndex < 0) {
      IOSByteArray *addr = [IOSByteArray newArrayWithLength:4];
      OrgBouncycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(self, ip, addr, 0);
      return addr;
    }
    else {
      IOSByteArray *addr = [IOSByteArray newArrayWithLength:8];
      OrgBouncycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(self, [ip substring:0 endIndex:slashIndex], addr, 0);
      NSString *mask = [ip substring:slashIndex + 1];
      if ([((NSString *) nil_chk(mask)) indexOf:'.'] > 0) {
        OrgBouncycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(self, mask, addr, 4);
      }
      else {
        OrgBouncycastleAsn1X509GeneralName_parseIPv4MaskWithNSString_withByteArray_withInt_(self, mask, addr, 4);
      }
      return addr;
    }
  }
  return nil;
}

void OrgBouncycastleAsn1X509GeneralName_parseIPv4MaskWithNSString_withByteArray_withInt_(OrgBouncycastleAsn1X509GeneralName *self, NSString *mask, IOSByteArray *addr, jint offset) {
  jint maskVal = JavaLangInteger_parseIntWithNSString_(mask);
  for (jint i = 0; i != maskVal; i++) {
    *IOSByteArray_GetRef(nil_chk(addr), (i / 8) + offset) |= LShift32(1, (7 - (i % 8)));
  }
}

void OrgBouncycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(OrgBouncycastleAsn1X509GeneralName *self, NSString *ip, IOSByteArray *addr, jint offset) {
  JavaUtilStringTokenizer *sTok = [[JavaUtilStringTokenizer alloc] initWithNSString:ip withNSString:@"./"];
  jint index = 0;
  while ([sTok hasMoreTokens]) {
    *IOSByteArray_GetRef(nil_chk(addr), offset + index++) = (jbyte) JavaLangInteger_parseIntWithNSString_([sTok nextToken]);
  }
}

IOSIntArray *OrgBouncycastleAsn1X509GeneralName_parseMaskWithNSString_(OrgBouncycastleAsn1X509GeneralName *self, NSString *mask) {
  IOSIntArray *res = [IOSIntArray newArrayWithLength:8];
  jint maskVal = JavaLangInteger_parseIntWithNSString_(mask);
  for (jint i = 0; i != maskVal; i++) {
    *IOSIntArray_GetRef(res, i / 16) |= LShift32(1, (15 - (i % 16)));
  }
  return res;
}

void OrgBouncycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(OrgBouncycastleAsn1X509GeneralName *self, IOSIntArray *parsedIp, IOSByteArray *addr, jint offSet) {
  for (jint i = 0; i != ((IOSIntArray *) nil_chk(parsedIp))->size_; i++) {
    *IOSByteArray_GetRef(nil_chk(addr), (i * 2) + offSet) = (jbyte) (RShift32(IOSIntArray_Get(parsedIp, i), 8));
    *IOSByteArray_GetRef(addr, (i * 2 + 1) + offSet) = (jbyte) IOSIntArray_Get(parsedIp, i);
  }
}

IOSIntArray *OrgBouncycastleAsn1X509GeneralName_parseIPv6WithNSString_(OrgBouncycastleAsn1X509GeneralName *self, NSString *ip) {
  JavaUtilStringTokenizer *sTok = [[JavaUtilStringTokenizer alloc] initWithNSString:ip withNSString:@":" withBoolean:YES];
  jint index = 0;
  IOSIntArray *val = [IOSIntArray newArrayWithLength:8];
  if ([((NSString *) nil_chk(ip)) charAtWithInt:0] == ':' && [ip charAtWithInt:1] == ':') {
    (void) [sTok nextToken];
  }
  jint doubleColon = -1;
  while ([sTok hasMoreTokens]) {
    NSString *e = [sTok nextToken];
    if ([((NSString *) nil_chk(e)) isEqual:@":"]) {
      doubleColon = index;
      *IOSIntArray_GetRef(val, index++) = 0;
    }
    else {
      if ([e indexOf:'.'] < 0) {
        *IOSIntArray_GetRef(val, index++) = JavaLangInteger_parseIntWithNSString_withInt_(e, 16);
        if ([sTok hasMoreTokens]) {
          (void) [sTok nextToken];
        }
      }
      else {
        JavaUtilStringTokenizer *eTok = [[JavaUtilStringTokenizer alloc] initWithNSString:e withNSString:@"."];
        *IOSIntArray_GetRef(val, index++) = (LShift32(JavaLangInteger_parseIntWithNSString_([eTok nextToken]), 8)) | JavaLangInteger_parseIntWithNSString_([eTok nextToken]);
        *IOSIntArray_GetRef(val, index++) = (LShift32(JavaLangInteger_parseIntWithNSString_([eTok nextToken]), 8)) | JavaLangInteger_parseIntWithNSString_([eTok nextToken]);
      }
    }
  }
  if (index != val->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(val, doubleColon, val, val->size_ - (index - doubleColon), index - doubleColon);
    for (jint i = doubleColon; i != val->size_ - (index - doubleColon); i++) {
      *IOSIntArray_GetRef(val, i) = 0;
    }
  }
  return val;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1X509GeneralName)
