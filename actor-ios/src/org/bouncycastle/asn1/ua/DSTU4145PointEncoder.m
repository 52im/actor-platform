//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/asn1/ua/DSTU4145PointEncoder.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/util/Random.h"
#include "org/bouncycastle/asn1/ua/DSTU4145PointEncoder.h"
#include "org/bouncycastle/math/ec/ECConstants.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/math/ec/ECPoint.h"

__attribute__((unused)) static OrgBouncycastleMathEcECFieldElement *OrgBouncycastleAsn1UaDSTU4145PointEncoder_traceWithOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECFieldElement *fe);
__attribute__((unused)) static OrgBouncycastleMathEcECFieldElement *OrgBouncycastleAsn1UaDSTU4145PointEncoder_solveQuadraticEquationWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *beta);

@interface OrgBouncycastleAsn1UaDSTU4145PointEncoder ()

+ (OrgBouncycastleMathEcECFieldElement *)traceWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)fe;

+ (OrgBouncycastleMathEcECFieldElement *)solveQuadraticEquationWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
                                                        withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)beta;
@end

@implementation OrgBouncycastleAsn1UaDSTU4145PointEncoder

+ (OrgBouncycastleMathEcECFieldElement *)traceWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)fe {
  return OrgBouncycastleAsn1UaDSTU4145PointEncoder_traceWithOrgBouncycastleMathEcECFieldElement_(fe);
}

+ (OrgBouncycastleMathEcECFieldElement *)solveQuadraticEquationWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
                                                        withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)beta {
  return OrgBouncycastleAsn1UaDSTU4145PointEncoder_solveQuadraticEquationWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_(curve, beta);
}

+ (IOSByteArray *)encodePointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)Q {
  return OrgBouncycastleAsn1UaDSTU4145PointEncoder_encodePointWithOrgBouncycastleMathEcECPoint_(Q);
}

+ (OrgBouncycastleMathEcECPoint *)decodePointWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
                                                                withByteArray:(IOSByteArray *)bytes {
  return OrgBouncycastleAsn1UaDSTU4145PointEncoder_decodePointWithOrgBouncycastleMathEcECCurve_withByteArray_(curve, bytes);
}

- (instancetype)init {
  return [super init];
}

@end

OrgBouncycastleMathEcECFieldElement *OrgBouncycastleAsn1UaDSTU4145PointEncoder_traceWithOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECFieldElement *fe) {
  OrgBouncycastleAsn1UaDSTU4145PointEncoder_init();
  OrgBouncycastleMathEcECFieldElement *t = fe;
  for (jint i = 1; i < [((OrgBouncycastleMathEcECFieldElement *) nil_chk(fe)) getFieldSize]; ++i) {
    t = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(t)) square])) addWithOrgBouncycastleMathEcECFieldElement:fe];
  }
  return t;
}

OrgBouncycastleMathEcECFieldElement *OrgBouncycastleAsn1UaDSTU4145PointEncoder_solveQuadraticEquationWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *beta) {
  OrgBouncycastleAsn1UaDSTU4145PointEncoder_init();
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(beta)) isZero]) {
    return beta;
  }
  OrgBouncycastleMathEcECFieldElement *zeroElement = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) fromBigIntegerWithJavaMathBigInteger:OrgBouncycastleMathEcECConstants_get_ZERO_()];
  OrgBouncycastleMathEcECFieldElement *z = nil;
  OrgBouncycastleMathEcECFieldElement *gamma = nil;
  JavaUtilRandom *rand = [[JavaUtilRandom alloc] init];
  jint m = [beta getFieldSize];
  do {
    OrgBouncycastleMathEcECFieldElement *t = [curve fromBigIntegerWithJavaMathBigInteger:[[JavaMathBigInteger alloc] initWithInt:m withJavaUtilRandom:rand]];
    z = zeroElement;
    OrgBouncycastleMathEcECFieldElement *w = beta;
    for (jint i = 1; i <= m - 1; i++) {
      OrgBouncycastleMathEcECFieldElement *w2 = [w square];
      z = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(z)) square])) addWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(w2)) multiplyWithOrgBouncycastleMathEcECFieldElement:t]];
      w = [w2 addWithOrgBouncycastleMathEcECFieldElement:beta];
    }
    if (![((OrgBouncycastleMathEcECFieldElement *) nil_chk(w)) isZero]) {
      return nil;
    }
    gamma = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(z)) square])) addWithOrgBouncycastleMathEcECFieldElement:z];
  }
  while ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(gamma)) isZero]);
  return z;
}

IOSByteArray *OrgBouncycastleAsn1UaDSTU4145PointEncoder_encodePointWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECPoint *Q) {
  OrgBouncycastleAsn1UaDSTU4145PointEncoder_init();
  Q = [((OrgBouncycastleMathEcECPoint *) nil_chk(Q)) normalize];
  OrgBouncycastleMathEcECFieldElement *x = [((OrgBouncycastleMathEcECPoint *) nil_chk(Q)) getAffineXCoord];
  IOSByteArray *bytes = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(x)) getEncoded];
  if (![x isZero]) {
    OrgBouncycastleMathEcECFieldElement *z = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([Q getAffineYCoord])) divideWithOrgBouncycastleMathEcECFieldElement:x];
    if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(OrgBouncycastleAsn1UaDSTU4145PointEncoder_traceWithOrgBouncycastleMathEcECFieldElement_(z))) isOne]) {
      *IOSByteArray_GetRef(bytes, ((IOSByteArray *) nil_chk(bytes))->size_ - 1) |= (jint) 0x01;
    }
    else {
      *IOSByteArray_GetRef(bytes, ((IOSByteArray *) nil_chk(bytes))->size_ - 1) &= (jint) 0xFE;
    }
  }
  return bytes;
}

OrgBouncycastleMathEcECPoint *OrgBouncycastleAsn1UaDSTU4145PointEncoder_decodePointWithOrgBouncycastleMathEcECCurve_withByteArray_(OrgBouncycastleMathEcECCurve *curve, IOSByteArray *bytes) {
  OrgBouncycastleAsn1UaDSTU4145PointEncoder_init();
  OrgBouncycastleMathEcECFieldElement *k = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) fromBigIntegerWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(IOSByteArray_Get(bytes, ((IOSByteArray *) nil_chk(bytes))->size_ - 1) & (jint) 0x1)];
  OrgBouncycastleMathEcECFieldElement *xp = [curve fromBigIntegerWithJavaMathBigInteger:[[JavaMathBigInteger alloc] initWithInt:1 withByteArray:bytes]];
  if (![((OrgBouncycastleMathEcECFieldElement *) nil_chk(OrgBouncycastleAsn1UaDSTU4145PointEncoder_traceWithOrgBouncycastleMathEcECFieldElement_(xp))) isEqual:[curve getA]]) {
    xp = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(xp)) addOne];
  }
  OrgBouncycastleMathEcECFieldElement *yp = nil;
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(xp)) isZero]) {
    yp = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getB])) sqrt];
  }
  else {
    OrgBouncycastleMathEcECFieldElement *beta = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([xp square])) invert])) multiplyWithOrgBouncycastleMathEcECFieldElement:[curve getB]])) addWithOrgBouncycastleMathEcECFieldElement:[curve getA]])) addWithOrgBouncycastleMathEcECFieldElement:xp];
    OrgBouncycastleMathEcECFieldElement *z = OrgBouncycastleAsn1UaDSTU4145PointEncoder_solveQuadraticEquationWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_(curve, beta);
    if (z != nil) {
      if (![((OrgBouncycastleMathEcECFieldElement *) nil_chk(OrgBouncycastleAsn1UaDSTU4145PointEncoder_traceWithOrgBouncycastleMathEcECFieldElement_(z))) isEqual:k]) {
        z = [z addOne];
      }
      yp = [xp multiplyWithOrgBouncycastleMathEcECFieldElement:z];
    }
  }
  if (yp == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid point compression"];
  }
  return [curve createPointWithJavaMathBigInteger:[xp toBigInteger] withJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(yp)) toBigInteger]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1UaDSTU4145PointEncoder)
