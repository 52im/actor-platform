//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/asn1/ua/DSTU4145ECBinary.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1EncodableVector.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1OctetString.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/ASN1TaggedObject.h"
#include "org/bouncycastle/asn1/DEROctetString.h"
#include "org/bouncycastle/asn1/DERSequence.h"
#include "org/bouncycastle/asn1/DERTaggedObject.h"
#include "org/bouncycastle/asn1/ua/DSTU4145BinaryField.h"
#include "org/bouncycastle/asn1/ua/DSTU4145ECBinary.h"
#include "org/bouncycastle/asn1/ua/DSTU4145PointEncoder.h"
#include "org/bouncycastle/crypto/params/ECDomainParameters.h"
#include "org/bouncycastle/math/ec/ECAlgorithms.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/field/FiniteField.h"
#include "org/bouncycastle/math/field/Polynomial.h"
#include "org/bouncycastle/math/field/PolynomialExtensionField.h"
#include "org/bouncycastle/util/Arrays.h"

@interface OrgBouncycastleAsn1UaDSTU4145ECBinary ()
- (instancetype)initWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq;
@end

@implementation OrgBouncycastleAsn1UaDSTU4145ECBinary

- (instancetype)initWithOrgBouncycastleCryptoParamsECDomainParameters:(OrgBouncycastleCryptoParamsECDomainParameters *)params {
  if (self = [super init]) {
    version__ = JavaMathBigInteger_valueOfWithLong_(0);
    OrgBouncycastleMathEcECCurve *curve = [((OrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(params)) getCurve];
    if (!OrgBouncycastleMathEcECAlgorithms_isF2mCurveWithOrgBouncycastleMathEcECCurve_(curve)) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"only binary domain is possible"];
    }
    id<OrgBouncycastleMathFieldPolynomialExtensionField> field = (id<OrgBouncycastleMathFieldPolynomialExtensionField>) check_protocol_cast([((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getField], @protocol(OrgBouncycastleMathFieldPolynomialExtensionField));
    IOSIntArray *exponents = [((id<OrgBouncycastleMathFieldPolynomial>) nil_chk([((id<OrgBouncycastleMathFieldPolynomialExtensionField>) nil_chk(field)) getMinimalPolynomial])) getExponentsPresent];
    if (((IOSIntArray *) nil_chk(exponents))->size_ == 3) {
      f_ = [[OrgBouncycastleAsn1UaDSTU4145BinaryField alloc] initWithInt:IOSIntArray_Get(exponents, 2) withInt:IOSIntArray_Get(exponents, 1)];
    }
    else if (exponents->size_ == 5) {
      f_ = [[OrgBouncycastleAsn1UaDSTU4145BinaryField alloc] initWithInt:IOSIntArray_Get(exponents, 4) withInt:IOSIntArray_Get(exponents, 1) withInt:IOSIntArray_Get(exponents, 2) withInt:IOSIntArray_Get(exponents, 3)];
    }
    a_ = [[OrgBouncycastleAsn1ASN1Integer alloc] initWithJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) toBigInteger]];
    b_ = [[OrgBouncycastleAsn1DEROctetString alloc] initWithByteArray:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getB])) getEncoded]];
    n_ = [[OrgBouncycastleAsn1ASN1Integer alloc] initWithJavaMathBigInteger:[params getN]];
    bp_ = [[OrgBouncycastleAsn1DEROctetString alloc] initWithByteArray:OrgBouncycastleAsn1UaDSTU4145PointEncoder_encodePointWithOrgBouncycastleMathEcECPoint_([params getG])];
  }
  return self;
}

- (instancetype)initWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq {
  if (self = [super init]) {
    version__ = JavaMathBigInteger_valueOfWithLong_(0);
    jint index = 0;
    if ([[((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjectAtWithInt:index] isKindOfClass:[OrgBouncycastleAsn1ASN1TaggedObject class]]) {
      OrgBouncycastleAsn1ASN1TaggedObject *taggedVersion = (OrgBouncycastleAsn1ASN1TaggedObject *) check_class_cast([seq getObjectAtWithInt:index], [OrgBouncycastleAsn1ASN1TaggedObject class]);
      if ([((OrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(taggedVersion)) isExplicit] && 0 == [taggedVersion getTagNo]) {
        version__ = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(OrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([taggedVersion getLoadedObject]))) getValue];
        index++;
      }
      else {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"object parse error"];
      }
    }
    f_ = OrgBouncycastleAsn1UaDSTU4145BinaryField_getInstanceWithId_([seq getObjectAtWithInt:index]);
    index++;
    a_ = OrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([seq getObjectAtWithInt:index]);
    index++;
    b_ = OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([seq getObjectAtWithInt:index]);
    index++;
    n_ = OrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([seq getObjectAtWithInt:index]);
    index++;
    bp_ = OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([seq getObjectAtWithInt:index]);
  }
  return self;
}

+ (OrgBouncycastleAsn1UaDSTU4145ECBinary *)getInstanceWithId:(id)obj {
  return OrgBouncycastleAsn1UaDSTU4145ECBinary_getInstanceWithId_(obj);
}

- (OrgBouncycastleAsn1UaDSTU4145BinaryField *)getField {
  return f_;
}

- (JavaMathBigInteger *)getA {
  return [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(a_)) getValue];
}

- (IOSByteArray *)getB {
  return OrgBouncycastleUtilArrays_cloneWithByteArray_([((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(b_)) getOctets]);
}

- (JavaMathBigInteger *)getN {
  return [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(n_)) getValue];
}

- (IOSByteArray *)getG {
  return OrgBouncycastleUtilArrays_cloneWithByteArray_([((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(bp_)) getOctets]);
}

- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  OrgBouncycastleAsn1ASN1EncodableVector *v = [[OrgBouncycastleAsn1ASN1EncodableVector alloc] init];
  if (0 != [((JavaMathBigInteger *) nil_chk(version__)) compareToWithId:JavaMathBigInteger_valueOfWithLong_(0)]) {
    [v addWithOrgBouncycastleAsn1ASN1Encodable:[[OrgBouncycastleAsn1DERTaggedObject alloc] initWithBoolean:YES withInt:0 withOrgBouncycastleAsn1ASN1Encodable:[[OrgBouncycastleAsn1ASN1Integer alloc] initWithJavaMathBigInteger:version__]]];
  }
  [v addWithOrgBouncycastleAsn1ASN1Encodable:f_];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:a_];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:b_];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:n_];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:bp_];
  return [[OrgBouncycastleAsn1DERSequence alloc] initWithOrgBouncycastleAsn1ASN1EncodableVector:v];
}

- (void)copyAllFieldsTo:(OrgBouncycastleAsn1UaDSTU4145ECBinary *)other {
  [super copyAllFieldsTo:other];
  other->version__ = version__;
  other->f_ = f_;
  other->a_ = a_;
  other->b_ = b_;
  other->n_ = n_;
  other->bp_ = bp_;
}

@end

OrgBouncycastleAsn1UaDSTU4145ECBinary *OrgBouncycastleAsn1UaDSTU4145ECBinary_getInstanceWithId_(id obj) {
  OrgBouncycastleAsn1UaDSTU4145ECBinary_init();
  if ([obj isKindOfClass:[OrgBouncycastleAsn1UaDSTU4145ECBinary class]]) {
    return (OrgBouncycastleAsn1UaDSTU4145ECBinary *) check_class_cast(obj, [OrgBouncycastleAsn1UaDSTU4145ECBinary class]);
  }
  if (obj != nil) {
    return [[OrgBouncycastleAsn1UaDSTU4145ECBinary alloc] initWithOrgBouncycastleAsn1ASN1Sequence:OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(obj)];
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1UaDSTU4145ECBinary)
