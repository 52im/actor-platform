//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/asn1/eac/CVCertificateRequest.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Enumeration.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1EncodableVector.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1ParsingException.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/BERTags.h"
#include "org/bouncycastle/asn1/DERApplicationSpecific.h"
#include "org/bouncycastle/asn1/DEROctetString.h"
#include "org/bouncycastle/asn1/eac/CVCertificateRequest.h"
#include "org/bouncycastle/asn1/eac/CertificateBody.h"
#include "org/bouncycastle/asn1/eac/EACTags.h"
#include "org/bouncycastle/asn1/eac/PublicKeyDataObject.h"

__attribute__((unused)) static void OrgBouncycastleAsn1EacCVCertificateRequest_initCertBodyWithOrgBouncycastleAsn1DERApplicationSpecific_(OrgBouncycastleAsn1EacCVCertificateRequest *self, OrgBouncycastleAsn1DERApplicationSpecific *request);

@interface OrgBouncycastleAsn1EacCVCertificateRequest () {
 @public
  OrgBouncycastleAsn1EacCertificateBody *certificateBody_;
  IOSByteArray *innerSignature_;
  IOSByteArray *outerSignature_;
  jint valid_;
}
- (instancetype)initWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)request;

- (void)initCertBodyWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)request OBJC_METHOD_FAMILY_NONE;
@end

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1EacCVCertificateRequest, certificateBody_, OrgBouncycastleAsn1EacCertificateBody *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1EacCVCertificateRequest, innerSignature_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1EacCVCertificateRequest, outerSignature_, IOSByteArray *)

BOOL OrgBouncycastleAsn1EacCVCertificateRequest_initialized = NO;

@implementation OrgBouncycastleAsn1EacCVCertificateRequest

jint OrgBouncycastleAsn1EacCVCertificateRequest_bodyValid_ = (jint) 0x01;
jint OrgBouncycastleAsn1EacCVCertificateRequest_signValid_ = (jint) 0x02;
IOSByteArray * OrgBouncycastleAsn1EacCVCertificateRequest_ZeroArray_;

- (instancetype)initWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)request {
  if (self = [super init]) {
    innerSignature_ = nil;
    outerSignature_ = nil;
    signOid_ = nil;
    keyOid_ = nil;
    certificate_ = nil;
    overSignerReference_ = nil;
    iso7816PubKey_ = nil;
    if ([((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(request)) getApplicationTag] == OrgBouncycastleAsn1EacEACTags_AUTHENTIFICATION_DATA) {
      OrgBouncycastleAsn1ASN1Sequence *seq = OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([request getObjectWithInt:OrgBouncycastleAsn1BERTags_SEQUENCE]);
      OrgBouncycastleAsn1EacCVCertificateRequest_initCertBodyWithOrgBouncycastleAsn1DERApplicationSpecific_(self, OrgBouncycastleAsn1DERApplicationSpecific_getInstanceWithId_([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjectAtWithInt:0]));
      outerSignature_ = [((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(OrgBouncycastleAsn1DERApplicationSpecific_getInstanceWithId_([seq getObjectAtWithInt:[seq size] - 1]))) getContents];
    }
    else {
      OrgBouncycastleAsn1EacCVCertificateRequest_initCertBodyWithOrgBouncycastleAsn1DERApplicationSpecific_(self, request);
    }
  }
  return self;
}

- (void)initCertBodyWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)request {
  OrgBouncycastleAsn1EacCVCertificateRequest_initCertBodyWithOrgBouncycastleAsn1DERApplicationSpecific_(self, request);
}

+ (OrgBouncycastleAsn1EacCVCertificateRequest *)getInstanceWithId:(id)obj {
  return OrgBouncycastleAsn1EacCVCertificateRequest_getInstanceWithId_(obj);
}

- (OrgBouncycastleAsn1EacCertificateBody *)getCertificateBody {
  return certificateBody_;
}

- (OrgBouncycastleAsn1EacPublicKeyDataObject *)getPublicKey {
  return [((OrgBouncycastleAsn1EacCertificateBody *) nil_chk(certificateBody_)) getPublicKey];
}

- (IOSByteArray *)getInnerSignature {
  return innerSignature_;
}

- (IOSByteArray *)getOuterSignature {
  return outerSignature_;
}

- (jboolean)hasOuterSignature {
  return outerSignature_ != nil;
}

- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  OrgBouncycastleAsn1ASN1EncodableVector *v = [[OrgBouncycastleAsn1ASN1EncodableVector alloc] init];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:certificateBody_];
  @try {
    [v addWithOrgBouncycastleAsn1ASN1Encodable:[[OrgBouncycastleAsn1DERApplicationSpecific alloc] initWithBoolean:NO withInt:OrgBouncycastleAsn1EacEACTags_STATIC_INTERNAL_AUTHENTIFICATION_ONE_STEP withOrgBouncycastleAsn1ASN1Encodable:[[OrgBouncycastleAsn1DEROctetString alloc] initWithByteArray:innerSignature_]]];
  }
  @catch (JavaIoIOException *e) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"unable to convert signature!"];
  }
  return [[OrgBouncycastleAsn1DERApplicationSpecific alloc] initWithInt:OrgBouncycastleAsn1EacEACTags_CARDHOLDER_CERTIFICATE withOrgBouncycastleAsn1ASN1EncodableVector:v];
}

- (void)copyAllFieldsTo:(OrgBouncycastleAsn1EacCVCertificateRequest *)other {
  [super copyAllFieldsTo:other];
  other->certificateBody_ = certificateBody_;
  other->innerSignature_ = innerSignature_;
  other->outerSignature_ = outerSignature_;
  other->valid_ = valid_;
  other->signOid_ = signOid_;
  other->keyOid_ = keyOid_;
  other->strCertificateHolderReference_ = strCertificateHolderReference_;
  other->encodedAuthorityReference_ = encodedAuthorityReference_;
  other->ProfileId_ = ProfileId_;
  other->certificate_ = certificate_;
  other->overSignerReference_ = overSignerReference_;
  other->encoded_ = encoded_;
  other->iso7816PubKey_ = iso7816PubKey_;
}

+ (void)initialize {
  if (self == [OrgBouncycastleAsn1EacCVCertificateRequest class]) {
    OrgBouncycastleAsn1EacCVCertificateRequest_ZeroArray_ = [IOSByteArray newArrayWithBytes:(jbyte[]){ 0 } count:1];
    J2OBJC_SET_INITIALIZED(OrgBouncycastleAsn1EacCVCertificateRequest)
  }
}

@end

void OrgBouncycastleAsn1EacCVCertificateRequest_initCertBodyWithOrgBouncycastleAsn1DERApplicationSpecific_(OrgBouncycastleAsn1EacCVCertificateRequest *self, OrgBouncycastleAsn1DERApplicationSpecific *request) {
  if ([((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(request)) getApplicationTag] == OrgBouncycastleAsn1EacEACTags_CARDHOLDER_CERTIFICATE) {
    OrgBouncycastleAsn1ASN1Sequence *seq = OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([request getObjectWithInt:OrgBouncycastleAsn1BERTags_SEQUENCE]);
    for (id<JavaUtilEnumeration> en = [((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjects]; [((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]; ) {
      OrgBouncycastleAsn1DERApplicationSpecific *obj = OrgBouncycastleAsn1DERApplicationSpecific_getInstanceWithId_([en nextElement]);
      switch ([((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(obj)) getApplicationTag]) {
        case OrgBouncycastleAsn1EacEACTags_CERTIFICATE_CONTENT_TEMPLATE:
        self->certificateBody_ = OrgBouncycastleAsn1EacCertificateBody_getInstanceWithId_(obj);
        self->valid_ |= OrgBouncycastleAsn1EacCVCertificateRequest_bodyValid_;
        break;
        case OrgBouncycastleAsn1EacEACTags_STATIC_INTERNAL_AUTHENTIFICATION_ONE_STEP:
        self->innerSignature_ = [obj getContents];
        self->valid_ |= OrgBouncycastleAsn1EacCVCertificateRequest_signValid_;
        break;
        default:
        @throw [[JavaIoIOException alloc] initWithNSString:JreStrcat("$I", @"Invalid tag, not an CV Certificate Request element:", [obj getApplicationTag])];
      }
    }
  }
  else {
    @throw [[JavaIoIOException alloc] initWithNSString:JreStrcat("$I", @"not a CARDHOLDER_CERTIFICATE in request:", [request getApplicationTag])];
  }
}

OrgBouncycastleAsn1EacCVCertificateRequest *OrgBouncycastleAsn1EacCVCertificateRequest_getInstanceWithId_(id obj) {
  OrgBouncycastleAsn1EacCVCertificateRequest_init();
  if ([obj isKindOfClass:[OrgBouncycastleAsn1EacCVCertificateRequest class]]) {
    return (OrgBouncycastleAsn1EacCVCertificateRequest *) check_class_cast(obj, [OrgBouncycastleAsn1EacCVCertificateRequest class]);
  }
  else if (obj != nil) {
    @try {
      return [[OrgBouncycastleAsn1EacCVCertificateRequest alloc] initWithOrgBouncycastleAsn1DERApplicationSpecific:OrgBouncycastleAsn1DERApplicationSpecific_getInstanceWithId_(obj)];
    }
    @catch (JavaIoIOException *e) {
      @throw [[OrgBouncycastleAsn1ASN1ParsingException alloc] initWithNSString:JreStrcat("$$", @"unable to parse data: ", [((JavaIoIOException *) nil_chk(e)) getMessage]) withJavaLangThrowable:e];
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1EacCVCertificateRequest)
