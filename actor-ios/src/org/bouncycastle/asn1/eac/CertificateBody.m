//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/asn1/eac/CertificateBody.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/bouncycastle/asn1/ASN1EncodableVector.h"
#include "org/bouncycastle/asn1/ASN1InputStream.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/BERTags.h"
#include "org/bouncycastle/asn1/DERApplicationSpecific.h"
#include "org/bouncycastle/asn1/DEROctetString.h"
#include "org/bouncycastle/asn1/eac/CertificateBody.h"
#include "org/bouncycastle/asn1/eac/CertificateHolderAuthorization.h"
#include "org/bouncycastle/asn1/eac/CertificateHolderReference.h"
#include "org/bouncycastle/asn1/eac/CertificationAuthorityReference.h"
#include "org/bouncycastle/asn1/eac/EACTags.h"
#include "org/bouncycastle/asn1/eac/PackedDate.h"
#include "org/bouncycastle/asn1/eac/PublicKeyDataObject.h"

__attribute__((unused)) static void OrgBouncycastleAsn1EacCertificateBody_setIso7816CertificateBodyWithOrgBouncycastleAsn1DERApplicationSpecific_(OrgBouncycastleAsn1EacCertificateBody *self, OrgBouncycastleAsn1DERApplicationSpecific *appSpe);
__attribute__((unused)) static OrgBouncycastleAsn1ASN1Primitive *OrgBouncycastleAsn1EacCertificateBody_profileToASN1Object(OrgBouncycastleAsn1EacCertificateBody *self);
__attribute__((unused)) static void OrgBouncycastleAsn1EacCertificateBody_setCertificateProfileIdentifierWithOrgBouncycastleAsn1DERApplicationSpecific_(OrgBouncycastleAsn1EacCertificateBody *self, OrgBouncycastleAsn1DERApplicationSpecific *certificateProfileIdentifier);
__attribute__((unused)) static void OrgBouncycastleAsn1EacCertificateBody_setCertificateHolderReferenceWithOrgBouncycastleAsn1DERApplicationSpecific_(OrgBouncycastleAsn1EacCertificateBody *self, OrgBouncycastleAsn1DERApplicationSpecific *certificateHolderReference);
__attribute__((unused)) static void OrgBouncycastleAsn1EacCertificateBody_setCertificationAuthorityReferenceWithOrgBouncycastleAsn1DERApplicationSpecific_(OrgBouncycastleAsn1EacCertificateBody *self, OrgBouncycastleAsn1DERApplicationSpecific *certificationAuthorityReference);
__attribute__((unused)) static void OrgBouncycastleAsn1EacCertificateBody_setPublicKeyWithOrgBouncycastleAsn1EacPublicKeyDataObject_(OrgBouncycastleAsn1EacCertificateBody *self, OrgBouncycastleAsn1EacPublicKeyDataObject *publicKey);
__attribute__((unused)) static OrgBouncycastleAsn1ASN1Primitive *OrgBouncycastleAsn1EacCertificateBody_requestToASN1Object(OrgBouncycastleAsn1EacCertificateBody *self);
__attribute__((unused)) static void OrgBouncycastleAsn1EacCertificateBody_setCertificateEffectiveDateWithOrgBouncycastleAsn1DERApplicationSpecific_(OrgBouncycastleAsn1EacCertificateBody *self, OrgBouncycastleAsn1DERApplicationSpecific *ced);
__attribute__((unused)) static void OrgBouncycastleAsn1EacCertificateBody_setCertificateExpirationDateWithOrgBouncycastleAsn1DERApplicationSpecific_(OrgBouncycastleAsn1EacCertificateBody *self, OrgBouncycastleAsn1DERApplicationSpecific *ced);
__attribute__((unused)) static void OrgBouncycastleAsn1EacCertificateBody_setCertificateHolderAuthorizationWithOrgBouncycastleAsn1EacCertificateHolderAuthorization_(OrgBouncycastleAsn1EacCertificateBody *self, OrgBouncycastleAsn1EacCertificateHolderAuthorization *cha);

@interface OrgBouncycastleAsn1EacCertificateBody () {
 @public
  OrgBouncycastleAsn1DERApplicationSpecific *certificateProfileIdentifier_;
  OrgBouncycastleAsn1DERApplicationSpecific *certificationAuthorityReference_;
  OrgBouncycastleAsn1EacPublicKeyDataObject *publicKey_;
  OrgBouncycastleAsn1DERApplicationSpecific *certificateHolderReference_;
  OrgBouncycastleAsn1EacCertificateHolderAuthorization *certificateHolderAuthorization_;
  OrgBouncycastleAsn1DERApplicationSpecific *certificateEffectiveDate_;
  OrgBouncycastleAsn1DERApplicationSpecific *certificateExpirationDate_;
  jint certificateType_;
}

- (void)setIso7816CertificateBodyWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)appSpe;
- (instancetype)initWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)obj;

- (OrgBouncycastleAsn1ASN1Primitive *)profileToASN1Object;

- (void)setCertificateProfileIdentifierWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)certificateProfileIdentifier;

- (void)setCertificateHolderReferenceWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)certificateHolderReference;

- (void)setCertificationAuthorityReferenceWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)certificationAuthorityReference;

- (void)setPublicKeyWithOrgBouncycastleAsn1EacPublicKeyDataObject:(OrgBouncycastleAsn1EacPublicKeyDataObject *)publicKey;

- (OrgBouncycastleAsn1ASN1Primitive *)requestToASN1Object;

- (void)setCertificateEffectiveDateWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)ced;

- (void)setCertificateExpirationDateWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)ced;

- (void)setCertificateHolderAuthorizationWithOrgBouncycastleAsn1EacCertificateHolderAuthorization:(OrgBouncycastleAsn1EacCertificateHolderAuthorization *)cha;
@end

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1EacCertificateBody, certificateProfileIdentifier_, OrgBouncycastleAsn1DERApplicationSpecific *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1EacCertificateBody, certificationAuthorityReference_, OrgBouncycastleAsn1DERApplicationSpecific *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1EacCertificateBody, publicKey_, OrgBouncycastleAsn1EacPublicKeyDataObject *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1EacCertificateBody, certificateHolderReference_, OrgBouncycastleAsn1DERApplicationSpecific *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1EacCertificateBody, certificateHolderAuthorization_, OrgBouncycastleAsn1EacCertificateHolderAuthorization *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1EacCertificateBody, certificateEffectiveDate_, OrgBouncycastleAsn1DERApplicationSpecific *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1EacCertificateBody, certificateExpirationDate_, OrgBouncycastleAsn1DERApplicationSpecific *)

@implementation OrgBouncycastleAsn1EacCertificateBody

- (void)setIso7816CertificateBodyWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)appSpe {
  OrgBouncycastleAsn1EacCertificateBody_setIso7816CertificateBodyWithOrgBouncycastleAsn1DERApplicationSpecific_(self, appSpe);
}

- (instancetype)initWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)certificateProfileIdentifier
        withOrgBouncycastleAsn1EacCertificationAuthorityReference:(OrgBouncycastleAsn1EacCertificationAuthorityReference *)certificationAuthorityReference
                    withOrgBouncycastleAsn1EacPublicKeyDataObject:(OrgBouncycastleAsn1EacPublicKeyDataObject *)publicKey
             withOrgBouncycastleAsn1EacCertificateHolderReference:(OrgBouncycastleAsn1EacCertificateHolderReference *)certificateHolderReference
         withOrgBouncycastleAsn1EacCertificateHolderAuthorization:(OrgBouncycastleAsn1EacCertificateHolderAuthorization *)certificateHolderAuthorization
                             withOrgBouncycastleAsn1EacPackedDate:(OrgBouncycastleAsn1EacPackedDate *)certificateEffectiveDate
                             withOrgBouncycastleAsn1EacPackedDate:(OrgBouncycastleAsn1EacPackedDate *)certificateExpirationDate {
  if (self = [super init]) {
    certificateType_ = 0;
    OrgBouncycastleAsn1EacCertificateBody_setCertificateProfileIdentifierWithOrgBouncycastleAsn1DERApplicationSpecific_(self, certificateProfileIdentifier);
    OrgBouncycastleAsn1EacCertificateBody_setCertificationAuthorityReferenceWithOrgBouncycastleAsn1DERApplicationSpecific_(self, [[OrgBouncycastleAsn1DERApplicationSpecific alloc] initWithInt:OrgBouncycastleAsn1EacEACTags_ISSUER_IDENTIFICATION_NUMBER withByteArray:[((OrgBouncycastleAsn1EacCertificationAuthorityReference *) nil_chk(certificationAuthorityReference)) getEncoded]]);
    OrgBouncycastleAsn1EacCertificateBody_setPublicKeyWithOrgBouncycastleAsn1EacPublicKeyDataObject_(self, publicKey);
    OrgBouncycastleAsn1EacCertificateBody_setCertificateHolderReferenceWithOrgBouncycastleAsn1DERApplicationSpecific_(self, [[OrgBouncycastleAsn1DERApplicationSpecific alloc] initWithInt:OrgBouncycastleAsn1EacEACTags_CARDHOLDER_NAME withByteArray:[((OrgBouncycastleAsn1EacCertificateHolderReference *) nil_chk(certificateHolderReference)) getEncoded]]);
    OrgBouncycastleAsn1EacCertificateBody_setCertificateHolderAuthorizationWithOrgBouncycastleAsn1EacCertificateHolderAuthorization_(self, certificateHolderAuthorization);
    @try {
      OrgBouncycastleAsn1EacCertificateBody_setCertificateEffectiveDateWithOrgBouncycastleAsn1DERApplicationSpecific_(self, [[OrgBouncycastleAsn1DERApplicationSpecific alloc] initWithBoolean:NO withInt:OrgBouncycastleAsn1EacEACTags_APPLICATION_EFFECTIVE_DATE withOrgBouncycastleAsn1ASN1Encodable:[[OrgBouncycastleAsn1DEROctetString alloc] initWithByteArray:[((OrgBouncycastleAsn1EacPackedDate *) nil_chk(certificateEffectiveDate)) getEncoding]]]);
      OrgBouncycastleAsn1EacCertificateBody_setCertificateExpirationDateWithOrgBouncycastleAsn1DERApplicationSpecific_(self, [[OrgBouncycastleAsn1DERApplicationSpecific alloc] initWithBoolean:NO withInt:OrgBouncycastleAsn1EacEACTags_APPLICATION_EXPIRATION_DATE withOrgBouncycastleAsn1ASN1Encodable:[[OrgBouncycastleAsn1DEROctetString alloc] initWithByteArray:[((OrgBouncycastleAsn1EacPackedDate *) nil_chk(certificateExpirationDate)) getEncoding]]]);
    }
    @catch (JavaIoIOException *e) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$", @"unable to encode dates: ", [((JavaIoIOException *) nil_chk(e)) getMessage])];
    }
  }
  return self;
}

- (instancetype)initWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)obj {
  if (self = [super init]) {
    certificateType_ = 0;
    OrgBouncycastleAsn1EacCertificateBody_setIso7816CertificateBodyWithOrgBouncycastleAsn1DERApplicationSpecific_(self, obj);
  }
  return self;
}

- (OrgBouncycastleAsn1ASN1Primitive *)profileToASN1Object {
  return OrgBouncycastleAsn1EacCertificateBody_profileToASN1Object(self);
}

- (void)setCertificateProfileIdentifierWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)certificateProfileIdentifier {
  OrgBouncycastleAsn1EacCertificateBody_setCertificateProfileIdentifierWithOrgBouncycastleAsn1DERApplicationSpecific_(self, certificateProfileIdentifier);
}

- (void)setCertificateHolderReferenceWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)certificateHolderReference {
  OrgBouncycastleAsn1EacCertificateBody_setCertificateHolderReferenceWithOrgBouncycastleAsn1DERApplicationSpecific_(self, certificateHolderReference);
}

- (void)setCertificationAuthorityReferenceWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)certificationAuthorityReference {
  OrgBouncycastleAsn1EacCertificateBody_setCertificationAuthorityReferenceWithOrgBouncycastleAsn1DERApplicationSpecific_(self, certificationAuthorityReference);
}

- (void)setPublicKeyWithOrgBouncycastleAsn1EacPublicKeyDataObject:(OrgBouncycastleAsn1EacPublicKeyDataObject *)publicKey {
  OrgBouncycastleAsn1EacCertificateBody_setPublicKeyWithOrgBouncycastleAsn1EacPublicKeyDataObject_(self, publicKey);
}

- (OrgBouncycastleAsn1ASN1Primitive *)requestToASN1Object {
  return OrgBouncycastleAsn1EacCertificateBody_requestToASN1Object(self);
}

- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  @try {
    if (certificateType_ == OrgBouncycastleAsn1EacCertificateBody_profileType) {
      return OrgBouncycastleAsn1EacCertificateBody_profileToASN1Object(self);
    }
    if (certificateType_ == OrgBouncycastleAsn1EacCertificateBody_requestType) {
      return OrgBouncycastleAsn1EacCertificateBody_requestToASN1Object(self);
    }
  }
  @catch (JavaIoIOException *e) {
    return nil;
  }
  return nil;
}

- (jint)getCertificateType {
  return certificateType_;
}

+ (OrgBouncycastleAsn1EacCertificateBody *)getInstanceWithId:(id)obj {
  return OrgBouncycastleAsn1EacCertificateBody_getInstanceWithId_(obj);
}

- (OrgBouncycastleAsn1EacPackedDate *)getCertificateEffectiveDate {
  if ((self->certificateType_ & OrgBouncycastleAsn1EacCertificateBody_CEfD) == OrgBouncycastleAsn1EacCertificateBody_CEfD) {
    return [[OrgBouncycastleAsn1EacPackedDate alloc] initWithByteArray:[((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(certificateEffectiveDate_)) getContents]];
  }
  return nil;
}

- (void)setCertificateEffectiveDateWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)ced {
  OrgBouncycastleAsn1EacCertificateBody_setCertificateEffectiveDateWithOrgBouncycastleAsn1DERApplicationSpecific_(self, ced);
}

- (OrgBouncycastleAsn1EacPackedDate *)getCertificateExpirationDate {
  if ((self->certificateType_ & OrgBouncycastleAsn1EacCertificateBody_CExD) == OrgBouncycastleAsn1EacCertificateBody_CExD) {
    return [[OrgBouncycastleAsn1EacPackedDate alloc] initWithByteArray:[((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(certificateExpirationDate_)) getContents]];
  }
  @throw [[JavaIoIOException alloc] initWithNSString:@"certificate Expiration Date not set"];
}

- (void)setCertificateExpirationDateWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)ced {
  OrgBouncycastleAsn1EacCertificateBody_setCertificateExpirationDateWithOrgBouncycastleAsn1DERApplicationSpecific_(self, ced);
}

- (OrgBouncycastleAsn1EacCertificateHolderAuthorization *)getCertificateHolderAuthorization {
  if ((self->certificateType_ & OrgBouncycastleAsn1EacCertificateBody_CHA) == OrgBouncycastleAsn1EacCertificateBody_CHA) {
    return certificateHolderAuthorization_;
  }
  @throw [[JavaIoIOException alloc] initWithNSString:@"Certificate Holder Authorisation not set"];
}

- (void)setCertificateHolderAuthorizationWithOrgBouncycastleAsn1EacCertificateHolderAuthorization:(OrgBouncycastleAsn1EacCertificateHolderAuthorization *)cha {
  OrgBouncycastleAsn1EacCertificateBody_setCertificateHolderAuthorizationWithOrgBouncycastleAsn1EacCertificateHolderAuthorization_(self, cha);
}

- (OrgBouncycastleAsn1EacCertificateHolderReference *)getCertificateHolderReference {
  return [[OrgBouncycastleAsn1EacCertificateHolderReference alloc] initWithByteArray:[((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(certificateHolderReference_)) getContents]];
}

- (OrgBouncycastleAsn1DERApplicationSpecific *)getCertificateProfileIdentifier {
  return certificateProfileIdentifier_;
}

- (OrgBouncycastleAsn1EacCertificationAuthorityReference *)getCertificationAuthorityReference {
  if ((self->certificateType_ & OrgBouncycastleAsn1EacCertificateBody_CAR) == OrgBouncycastleAsn1EacCertificateBody_CAR) {
    return [[OrgBouncycastleAsn1EacCertificationAuthorityReference alloc] initWithByteArray:[((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(certificationAuthorityReference_)) getContents]];
  }
  @throw [[JavaIoIOException alloc] initWithNSString:@"Certification authority reference not set"];
}

- (OrgBouncycastleAsn1EacPublicKeyDataObject *)getPublicKey {
  return publicKey_;
}

- (void)copyAllFieldsTo:(OrgBouncycastleAsn1EacCertificateBody *)other {
  [super copyAllFieldsTo:other];
  other->seq_ = seq_;
  other->certificateProfileIdentifier_ = certificateProfileIdentifier_;
  other->certificationAuthorityReference_ = certificationAuthorityReference_;
  other->publicKey_ = publicKey_;
  other->certificateHolderReference_ = certificateHolderReference_;
  other->certificateHolderAuthorization_ = certificateHolderAuthorization_;
  other->certificateEffectiveDate_ = certificateEffectiveDate_;
  other->certificateExpirationDate_ = certificateExpirationDate_;
  other->certificateType_ = certificateType_;
}

@end

void OrgBouncycastleAsn1EacCertificateBody_setIso7816CertificateBodyWithOrgBouncycastleAsn1DERApplicationSpecific_(OrgBouncycastleAsn1EacCertificateBody *self, OrgBouncycastleAsn1DERApplicationSpecific *appSpe) {
  IOSByteArray *content;
  if ([((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(appSpe)) getApplicationTag] == OrgBouncycastleAsn1EacEACTags_CERTIFICATE_CONTENT_TEMPLATE) {
    content = [appSpe getContents];
  }
  else {
    @throw [[JavaIoIOException alloc] initWithNSString:@"Bad tag : not an iso7816 CERTIFICATE_CONTENT_TEMPLATE"];
  }
  OrgBouncycastleAsn1ASN1InputStream *aIS = [[OrgBouncycastleAsn1ASN1InputStream alloc] initWithByteArray:content];
  OrgBouncycastleAsn1ASN1Primitive *obj;
  while ((obj = [aIS readObject]) != nil) {
    OrgBouncycastleAsn1DERApplicationSpecific *aSpe;
    if ([obj isKindOfClass:[OrgBouncycastleAsn1DERApplicationSpecific class]]) {
      aSpe = (OrgBouncycastleAsn1DERApplicationSpecific *) check_class_cast(obj, [OrgBouncycastleAsn1DERApplicationSpecific class]);
    }
    else {
      @throw [[JavaIoIOException alloc] initWithNSString:JreStrcat("$I@", @"Not a valid iso7816 content : not a DERApplicationSpecific Object :", OrgBouncycastleAsn1EacEACTags_encodeTagWithOrgBouncycastleAsn1DERApplicationSpecific_(appSpe), [((OrgBouncycastleAsn1ASN1Primitive *) nil_chk(obj)) getClass])];
    }
    switch ([((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(aSpe)) getApplicationTag]) {
      case OrgBouncycastleAsn1EacEACTags_INTERCHANGE_PROFILE:
      OrgBouncycastleAsn1EacCertificateBody_setCertificateProfileIdentifierWithOrgBouncycastleAsn1DERApplicationSpecific_(self, aSpe);
      break;
      case OrgBouncycastleAsn1EacEACTags_ISSUER_IDENTIFICATION_NUMBER:
      OrgBouncycastleAsn1EacCertificateBody_setCertificationAuthorityReferenceWithOrgBouncycastleAsn1DERApplicationSpecific_(self, aSpe);
      break;
      case OrgBouncycastleAsn1EacEACTags_CARDHOLDER_PUBLIC_KEY_TEMPLATE:
      OrgBouncycastleAsn1EacCertificateBody_setPublicKeyWithOrgBouncycastleAsn1EacPublicKeyDataObject_(self, OrgBouncycastleAsn1EacPublicKeyDataObject_getInstanceWithId_([aSpe getObjectWithInt:OrgBouncycastleAsn1BERTags_SEQUENCE]));
      break;
      case OrgBouncycastleAsn1EacEACTags_CARDHOLDER_NAME:
      OrgBouncycastleAsn1EacCertificateBody_setCertificateHolderReferenceWithOrgBouncycastleAsn1DERApplicationSpecific_(self, aSpe);
      break;
      case OrgBouncycastleAsn1EacEACTags_CERTIFICATE_HOLDER_AUTHORIZATION_TEMPLATE:
      OrgBouncycastleAsn1EacCertificateBody_setCertificateHolderAuthorizationWithOrgBouncycastleAsn1EacCertificateHolderAuthorization_(self, [[OrgBouncycastleAsn1EacCertificateHolderAuthorization alloc] initWithOrgBouncycastleAsn1DERApplicationSpecific:aSpe]);
      break;
      case OrgBouncycastleAsn1EacEACTags_APPLICATION_EFFECTIVE_DATE:
      OrgBouncycastleAsn1EacCertificateBody_setCertificateEffectiveDateWithOrgBouncycastleAsn1DERApplicationSpecific_(self, aSpe);
      break;
      case OrgBouncycastleAsn1EacEACTags_APPLICATION_EXPIRATION_DATE:
      OrgBouncycastleAsn1EacCertificateBody_setCertificateExpirationDateWithOrgBouncycastleAsn1DERApplicationSpecific_(self, aSpe);
      break;
      default:
      self->certificateType_ = 0;
      @throw [[JavaIoIOException alloc] initWithNSString:JreStrcat("$I", @"Not a valid iso7816 DERApplicationSpecific tag ", [aSpe getApplicationTag])];
    }
  }
}

OrgBouncycastleAsn1ASN1Primitive *OrgBouncycastleAsn1EacCertificateBody_profileToASN1Object(OrgBouncycastleAsn1EacCertificateBody *self) {
  OrgBouncycastleAsn1ASN1EncodableVector *v = [[OrgBouncycastleAsn1ASN1EncodableVector alloc] init];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:self->certificateProfileIdentifier_];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:self->certificationAuthorityReference_];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:[[OrgBouncycastleAsn1DERApplicationSpecific alloc] initWithBoolean:NO withInt:OrgBouncycastleAsn1EacEACTags_CARDHOLDER_PUBLIC_KEY_TEMPLATE withOrgBouncycastleAsn1ASN1Encodable:self->publicKey_]];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:self->certificateHolderReference_];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:self->certificateHolderAuthorization_];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:self->certificateEffectiveDate_];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:self->certificateExpirationDate_];
  return [[OrgBouncycastleAsn1DERApplicationSpecific alloc] initWithInt:OrgBouncycastleAsn1EacEACTags_CERTIFICATE_CONTENT_TEMPLATE withOrgBouncycastleAsn1ASN1EncodableVector:v];
}

void OrgBouncycastleAsn1EacCertificateBody_setCertificateProfileIdentifierWithOrgBouncycastleAsn1DERApplicationSpecific_(OrgBouncycastleAsn1EacCertificateBody *self, OrgBouncycastleAsn1DERApplicationSpecific *certificateProfileIdentifier) {
  if ([((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(certificateProfileIdentifier)) getApplicationTag] == OrgBouncycastleAsn1EacEACTags_INTERCHANGE_PROFILE) {
    self->certificateProfileIdentifier_ = certificateProfileIdentifier;
    self->certificateType_ |= OrgBouncycastleAsn1EacCertificateBody_CPI;
  }
  else {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I", @"Not an Iso7816Tags.INTERCHANGE_PROFILE tag :", OrgBouncycastleAsn1EacEACTags_encodeTagWithOrgBouncycastleAsn1DERApplicationSpecific_(certificateProfileIdentifier))];
  }
}

void OrgBouncycastleAsn1EacCertificateBody_setCertificateHolderReferenceWithOrgBouncycastleAsn1DERApplicationSpecific_(OrgBouncycastleAsn1EacCertificateBody *self, OrgBouncycastleAsn1DERApplicationSpecific *certificateHolderReference) {
  if ([((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(certificateHolderReference)) getApplicationTag] == OrgBouncycastleAsn1EacEACTags_CARDHOLDER_NAME) {
    self->certificateHolderReference_ = certificateHolderReference;
    self->certificateType_ |= OrgBouncycastleAsn1EacCertificateBody_CHR;
  }
  else {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Not an Iso7816Tags.CARDHOLDER_NAME tag"];
  }
}

void OrgBouncycastleAsn1EacCertificateBody_setCertificationAuthorityReferenceWithOrgBouncycastleAsn1DERApplicationSpecific_(OrgBouncycastleAsn1EacCertificateBody *self, OrgBouncycastleAsn1DERApplicationSpecific *certificationAuthorityReference) {
  if ([((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(certificationAuthorityReference)) getApplicationTag] == OrgBouncycastleAsn1EacEACTags_ISSUER_IDENTIFICATION_NUMBER) {
    self->certificationAuthorityReference_ = certificationAuthorityReference;
    self->certificateType_ |= OrgBouncycastleAsn1EacCertificateBody_CAR;
  }
  else {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Not an Iso7816Tags.ISSUER_IDENTIFICATION_NUMBER tag"];
  }
}

void OrgBouncycastleAsn1EacCertificateBody_setPublicKeyWithOrgBouncycastleAsn1EacPublicKeyDataObject_(OrgBouncycastleAsn1EacCertificateBody *self, OrgBouncycastleAsn1EacPublicKeyDataObject *publicKey) {
  self->publicKey_ = OrgBouncycastleAsn1EacPublicKeyDataObject_getInstanceWithId_(publicKey);
  self->certificateType_ |= OrgBouncycastleAsn1EacCertificateBody_PK;
}

OrgBouncycastleAsn1ASN1Primitive *OrgBouncycastleAsn1EacCertificateBody_requestToASN1Object(OrgBouncycastleAsn1EacCertificateBody *self) {
  OrgBouncycastleAsn1ASN1EncodableVector *v = [[OrgBouncycastleAsn1ASN1EncodableVector alloc] init];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:self->certificateProfileIdentifier_];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:[[OrgBouncycastleAsn1DERApplicationSpecific alloc] initWithBoolean:NO withInt:OrgBouncycastleAsn1EacEACTags_CARDHOLDER_PUBLIC_KEY_TEMPLATE withOrgBouncycastleAsn1ASN1Encodable:self->publicKey_]];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:self->certificateHolderReference_];
  return [[OrgBouncycastleAsn1DERApplicationSpecific alloc] initWithInt:OrgBouncycastleAsn1EacEACTags_CERTIFICATE_CONTENT_TEMPLATE withOrgBouncycastleAsn1ASN1EncodableVector:v];
}

OrgBouncycastleAsn1EacCertificateBody *OrgBouncycastleAsn1EacCertificateBody_getInstanceWithId_(id obj) {
  OrgBouncycastleAsn1EacCertificateBody_init();
  if ([obj isKindOfClass:[OrgBouncycastleAsn1EacCertificateBody class]]) {
    return (OrgBouncycastleAsn1EacCertificateBody *) check_class_cast(obj, [OrgBouncycastleAsn1EacCertificateBody class]);
  }
  else if (obj != nil) {
    return [[OrgBouncycastleAsn1EacCertificateBody alloc] initWithOrgBouncycastleAsn1DERApplicationSpecific:OrgBouncycastleAsn1DERApplicationSpecific_getInstanceWithId_(obj)];
  }
  return nil;
}

void OrgBouncycastleAsn1EacCertificateBody_setCertificateEffectiveDateWithOrgBouncycastleAsn1DERApplicationSpecific_(OrgBouncycastleAsn1EacCertificateBody *self, OrgBouncycastleAsn1DERApplicationSpecific *ced) {
  if ([((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(ced)) getApplicationTag] == OrgBouncycastleAsn1EacEACTags_APPLICATION_EFFECTIVE_DATE) {
    self->certificateEffectiveDate_ = ced;
    self->certificateType_ |= OrgBouncycastleAsn1EacCertificateBody_CEfD;
  }
  else {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I", @"Not an Iso7816Tags.APPLICATION_EFFECTIVE_DATE tag :", OrgBouncycastleAsn1EacEACTags_encodeTagWithOrgBouncycastleAsn1DERApplicationSpecific_(ced))];
  }
}

void OrgBouncycastleAsn1EacCertificateBody_setCertificateExpirationDateWithOrgBouncycastleAsn1DERApplicationSpecific_(OrgBouncycastleAsn1EacCertificateBody *self, OrgBouncycastleAsn1DERApplicationSpecific *ced) {
  if ([((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(ced)) getApplicationTag] == OrgBouncycastleAsn1EacEACTags_APPLICATION_EXPIRATION_DATE) {
    self->certificateExpirationDate_ = ced;
    self->certificateType_ |= OrgBouncycastleAsn1EacCertificateBody_CExD;
  }
  else {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Not an Iso7816Tags.APPLICATION_EXPIRATION_DATE tag"];
  }
}

void OrgBouncycastleAsn1EacCertificateBody_setCertificateHolderAuthorizationWithOrgBouncycastleAsn1EacCertificateHolderAuthorization_(OrgBouncycastleAsn1EacCertificateBody *self, OrgBouncycastleAsn1EacCertificateHolderAuthorization *cha) {
  self->certificateHolderAuthorization_ = cha;
  self->certificateType_ |= OrgBouncycastleAsn1EacCertificateBody_CHA;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1EacCertificateBody)
