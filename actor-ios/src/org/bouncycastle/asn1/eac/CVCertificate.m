//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/asn1/eac/CVCertificate.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "org/bouncycastle/asn1/ASN1EncodableVector.h"
#include "org/bouncycastle/asn1/ASN1InputStream.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1ParsingException.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/DERApplicationSpecific.h"
#include "org/bouncycastle/asn1/DEROctetString.h"
#include "org/bouncycastle/asn1/eac/CVCertificate.h"
#include "org/bouncycastle/asn1/eac/CertificateBody.h"
#include "org/bouncycastle/asn1/eac/CertificateHolderAuthorization.h"
#include "org/bouncycastle/asn1/eac/CertificateHolderReference.h"
#include "org/bouncycastle/asn1/eac/CertificationAuthorityReference.h"
#include "org/bouncycastle/asn1/eac/EACTags.h"
#include "org/bouncycastle/asn1/eac/Flags.h"
#include "org/bouncycastle/asn1/eac/PackedDate.h"

__attribute__((unused)) static void OrgBouncycastleAsn1EacCVCertificate_setPrivateDataWithOrgBouncycastleAsn1DERApplicationSpecific_(OrgBouncycastleAsn1EacCVCertificate *self, OrgBouncycastleAsn1DERApplicationSpecific *appSpe);
__attribute__((unused)) static void OrgBouncycastleAsn1EacCVCertificate_initFromWithOrgBouncycastleAsn1ASN1InputStream_(OrgBouncycastleAsn1EacCVCertificate *self, OrgBouncycastleAsn1ASN1InputStream *aIS);

@interface OrgBouncycastleAsn1EacCVCertificate () {
 @public
  OrgBouncycastleAsn1EacCertificateBody *certificateBody_;
  IOSByteArray *signature_;
  jint valid_;
}

- (void)setPrivateDataWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)appSpe;

- (void)initFromWithOrgBouncycastleAsn1ASN1InputStream:(OrgBouncycastleAsn1ASN1InputStream *)aIS OBJC_METHOD_FAMILY_NONE;
- (instancetype)initWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)appSpe;
@end

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1EacCVCertificate, certificateBody_, OrgBouncycastleAsn1EacCertificateBody *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1EacCVCertificate, signature_, IOSByteArray *)

@implementation OrgBouncycastleAsn1EacCVCertificate

jint OrgBouncycastleAsn1EacCVCertificate_bodyValid_ = (jint) 0x01;
jint OrgBouncycastleAsn1EacCVCertificate_signValid_ = (jint) 0x02;
NSString * OrgBouncycastleAsn1EacCVCertificate_ReferenceEncoding_ = @"ISO-8859-1";

- (void)setPrivateDataWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)appSpe {
  OrgBouncycastleAsn1EacCVCertificate_setPrivateDataWithOrgBouncycastleAsn1DERApplicationSpecific_(self, appSpe);
}

- (instancetype)initWithOrgBouncycastleAsn1ASN1InputStream:(OrgBouncycastleAsn1ASN1InputStream *)aIS {
  if (self = [super init]) {
    OrgBouncycastleAsn1EacCVCertificate_initFromWithOrgBouncycastleAsn1ASN1InputStream_(self, aIS);
  }
  return self;
}

- (void)initFromWithOrgBouncycastleAsn1ASN1InputStream:(OrgBouncycastleAsn1ASN1InputStream *)aIS {
  OrgBouncycastleAsn1EacCVCertificate_initFromWithOrgBouncycastleAsn1ASN1InputStream_(self, aIS);
}

- (instancetype)initWithOrgBouncycastleAsn1DERApplicationSpecific:(OrgBouncycastleAsn1DERApplicationSpecific *)appSpe {
  if (self = [super init]) {
    OrgBouncycastleAsn1EacCVCertificate_setPrivateDataWithOrgBouncycastleAsn1DERApplicationSpecific_(self, appSpe);
  }
  return self;
}

- (instancetype)initWithOrgBouncycastleAsn1EacCertificateBody:(OrgBouncycastleAsn1EacCertificateBody *)body
                                                withByteArray:(IOSByteArray *)signature {
  if (self = [super init]) {
    certificateBody_ = body;
    self->signature_ = signature;
    valid_ |= OrgBouncycastleAsn1EacCVCertificate_bodyValid_;
    valid_ |= OrgBouncycastleAsn1EacCVCertificate_signValid_;
  }
  return self;
}

+ (OrgBouncycastleAsn1EacCVCertificate *)getInstanceWithId:(id)obj {
  return OrgBouncycastleAsn1EacCVCertificate_getInstanceWithId_(obj);
}

- (IOSByteArray *)getSignature {
  return signature_;
}

- (OrgBouncycastleAsn1EacCertificateBody *)getBody {
  return certificateBody_;
}

- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  OrgBouncycastleAsn1ASN1EncodableVector *v = [[OrgBouncycastleAsn1ASN1EncodableVector alloc] init];
  if (valid_ != (OrgBouncycastleAsn1EacCVCertificate_signValid_ | OrgBouncycastleAsn1EacCVCertificate_bodyValid_)) {
    return nil;
  }
  [v addWithOrgBouncycastleAsn1ASN1Encodable:certificateBody_];
  @try {
    [v addWithOrgBouncycastleAsn1ASN1Encodable:[[OrgBouncycastleAsn1DERApplicationSpecific alloc] initWithBoolean:NO withInt:OrgBouncycastleAsn1EacEACTags_STATIC_INTERNAL_AUTHENTIFICATION_ONE_STEP withOrgBouncycastleAsn1ASN1Encodable:[[OrgBouncycastleAsn1DEROctetString alloc] initWithByteArray:signature_]]];
  }
  @catch (JavaIoIOException *e) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"unable to convert signature!"];
  }
  return [[OrgBouncycastleAsn1DERApplicationSpecific alloc] initWithInt:OrgBouncycastleAsn1EacEACTags_CARDHOLDER_CERTIFICATE withOrgBouncycastleAsn1ASN1EncodableVector:v];
}

- (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getHolderAuthorization {
  OrgBouncycastleAsn1EacCertificateHolderAuthorization *cha = [((OrgBouncycastleAsn1EacCertificateBody *) nil_chk(certificateBody_)) getCertificateHolderAuthorization];
  return [((OrgBouncycastleAsn1EacCertificateHolderAuthorization *) nil_chk(cha)) getOid];
}

- (OrgBouncycastleAsn1EacPackedDate *)getEffectiveDate {
  return [((OrgBouncycastleAsn1EacCertificateBody *) nil_chk(certificateBody_)) getCertificateEffectiveDate];
}

- (jint)getCertificateType {
  return [((OrgBouncycastleAsn1EacCertificateBody *) nil_chk(self->certificateBody_)) getCertificateType];
}

- (OrgBouncycastleAsn1EacPackedDate *)getExpirationDate {
  return [((OrgBouncycastleAsn1EacCertificateBody *) nil_chk(certificateBody_)) getCertificateExpirationDate];
}

- (jint)getRole {
  OrgBouncycastleAsn1EacCertificateHolderAuthorization *cha = [((OrgBouncycastleAsn1EacCertificateBody *) nil_chk(certificateBody_)) getCertificateHolderAuthorization];
  return [((OrgBouncycastleAsn1EacCertificateHolderAuthorization *) nil_chk(cha)) getAccessRights];
}

- (OrgBouncycastleAsn1EacCertificationAuthorityReference *)getAuthorityReference {
  return [((OrgBouncycastleAsn1EacCertificateBody *) nil_chk(certificateBody_)) getCertificationAuthorityReference];
}

- (OrgBouncycastleAsn1EacCertificateHolderReference *)getHolderReference {
  return [((OrgBouncycastleAsn1EacCertificateBody *) nil_chk(certificateBody_)) getCertificateHolderReference];
}

- (jint)getHolderAuthorizationRole {
  jint rights = [((OrgBouncycastleAsn1EacCertificateHolderAuthorization *) nil_chk([((OrgBouncycastleAsn1EacCertificateBody *) nil_chk(certificateBody_)) getCertificateHolderAuthorization])) getAccessRights];
  return rights & (jint) 0xC0;
}

- (OrgBouncycastleAsn1EacFlags *)getHolderAuthorizationRights {
  return [[OrgBouncycastleAsn1EacFlags alloc] initWithInt:[((OrgBouncycastleAsn1EacCertificateHolderAuthorization *) nil_chk([((OrgBouncycastleAsn1EacCertificateBody *) nil_chk(certificateBody_)) getCertificateHolderAuthorization])) getAccessRights] & (jint) 0x1F];
}

- (void)copyAllFieldsTo:(OrgBouncycastleAsn1EacCVCertificate *)other {
  [super copyAllFieldsTo:other];
  other->certificateBody_ = certificateBody_;
  other->signature_ = signature_;
  other->valid_ = valid_;
}

@end

void OrgBouncycastleAsn1EacCVCertificate_setPrivateDataWithOrgBouncycastleAsn1DERApplicationSpecific_(OrgBouncycastleAsn1EacCVCertificate *self, OrgBouncycastleAsn1DERApplicationSpecific *appSpe) {
  self->valid_ = 0;
  if ([((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(appSpe)) getApplicationTag] == OrgBouncycastleAsn1EacEACTags_CARDHOLDER_CERTIFICATE) {
    OrgBouncycastleAsn1ASN1InputStream *content = [[OrgBouncycastleAsn1ASN1InputStream alloc] initWithByteArray:[appSpe getContents]];
    OrgBouncycastleAsn1ASN1Primitive *tmpObj;
    while ((tmpObj = [content readObject]) != nil) {
      OrgBouncycastleAsn1DERApplicationSpecific *aSpe;
      if ([tmpObj isKindOfClass:[OrgBouncycastleAsn1DERApplicationSpecific class]]) {
        aSpe = (OrgBouncycastleAsn1DERApplicationSpecific *) check_class_cast(tmpObj, [OrgBouncycastleAsn1DERApplicationSpecific class]);
        switch ([((OrgBouncycastleAsn1DERApplicationSpecific *) nil_chk(aSpe)) getApplicationTag]) {
          case OrgBouncycastleAsn1EacEACTags_CERTIFICATE_CONTENT_TEMPLATE:
          self->certificateBody_ = OrgBouncycastleAsn1EacCertificateBody_getInstanceWithId_(aSpe);
          self->valid_ |= OrgBouncycastleAsn1EacCVCertificate_bodyValid_;
          break;
          case OrgBouncycastleAsn1EacEACTags_STATIC_INTERNAL_AUTHENTIFICATION_ONE_STEP:
          self->signature_ = [aSpe getContents];
          self->valid_ |= OrgBouncycastleAsn1EacCVCertificate_signValid_;
          break;
          default:
          @throw [[JavaIoIOException alloc] initWithNSString:JreStrcat("$I", @"Invalid tag, not an Iso7816CertificateStructure :", [aSpe getApplicationTag])];
        }
      }
      else {
        @throw [[JavaIoIOException alloc] initWithNSString:@"Invalid Object, not an Iso7816CertificateStructure"];
      }
    }
  }
  else {
    @throw [[JavaIoIOException alloc] initWithNSString:JreStrcat("$I", @"not a CARDHOLDER_CERTIFICATE :", [appSpe getApplicationTag])];
  }
}

void OrgBouncycastleAsn1EacCVCertificate_initFromWithOrgBouncycastleAsn1ASN1InputStream_(OrgBouncycastleAsn1EacCVCertificate *self, OrgBouncycastleAsn1ASN1InputStream *aIS) {
  OrgBouncycastleAsn1ASN1Primitive *obj;
  while ((obj = [((OrgBouncycastleAsn1ASN1InputStream *) nil_chk(aIS)) readObject]) != nil) {
    if ([obj isKindOfClass:[OrgBouncycastleAsn1DERApplicationSpecific class]]) {
      OrgBouncycastleAsn1EacCVCertificate_setPrivateDataWithOrgBouncycastleAsn1DERApplicationSpecific_(self, (OrgBouncycastleAsn1DERApplicationSpecific *) check_class_cast(obj, [OrgBouncycastleAsn1DERApplicationSpecific class]));
    }
    else {
      @throw [[JavaIoIOException alloc] initWithNSString:@"Invalid Input Stream for creating an Iso7816CertificateStructure"];
    }
  }
}

OrgBouncycastleAsn1EacCVCertificate *OrgBouncycastleAsn1EacCVCertificate_getInstanceWithId_(id obj) {
  OrgBouncycastleAsn1EacCVCertificate_init();
  if ([obj isKindOfClass:[OrgBouncycastleAsn1EacCVCertificate class]]) {
    return (OrgBouncycastleAsn1EacCVCertificate *) check_class_cast(obj, [OrgBouncycastleAsn1EacCVCertificate class]);
  }
  else if (obj != nil) {
    @try {
      return [[OrgBouncycastleAsn1EacCVCertificate alloc] initWithOrgBouncycastleAsn1DERApplicationSpecific:OrgBouncycastleAsn1DERApplicationSpecific_getInstanceWithId_(obj)];
    }
    @catch (JavaIoIOException *e) {
      @throw [[OrgBouncycastleAsn1ASN1ParsingException alloc] initWithNSString:JreStrcat("$$", @"unable to parse data: ", [((JavaIoIOException *) nil_chk(e)) getMessage]) withJavaLangThrowable:e];
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1EacCVCertificate)
