//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/asn1/ASN1UTCTime.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/SimpleTimeZone.h"
#include "org/bouncycastle/asn1/ASN1Object.h"
#include "org/bouncycastle/asn1/ASN1OctetString.h"
#include "org/bouncycastle/asn1/ASN1OutputStream.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1TaggedObject.h"
#include "org/bouncycastle/asn1/ASN1UTCTime.h"
#include "org/bouncycastle/asn1/BERTags.h"
#include "org/bouncycastle/asn1/StreamUtil.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Strings.h"

@interface OrgBouncycastleAsn1ASN1UTCTime () {
 @public
  IOSByteArray *time_;
}
@end

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1ASN1UTCTime, time_, IOSByteArray *)

@implementation OrgBouncycastleAsn1ASN1UTCTime

+ (OrgBouncycastleAsn1ASN1UTCTime *)getInstanceWithId:(id)obj {
  return OrgBouncycastleAsn1ASN1UTCTime_getInstanceWithId_(obj);
}

+ (OrgBouncycastleAsn1ASN1UTCTime *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                           withBoolean:(jboolean)explicit_ {
  return OrgBouncycastleAsn1ASN1UTCTime_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_);
}

- (instancetype)initWithNSString:(NSString *)time {
  if (self = [super init]) {
    self->time_ = OrgBouncycastleUtilStrings_toByteArrayWithNSString_(time);
    @try {
      (void) [self getDate];
    }
    @catch (JavaTextParseException *e) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$", @"invalid date string: ", [((JavaTextParseException *) nil_chk(e)) getMessage])];
    }
  }
  return self;
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time {
  if (self = [super init]) {
    JavaTextSimpleDateFormat *dateF = [[JavaTextSimpleDateFormat alloc] initWithNSString:@"yyMMddHHmmss'Z'"];
    [dateF setTimeZoneWithJavaUtilTimeZone:[[JavaUtilSimpleTimeZone alloc] initWithInt:0 withNSString:@"Z"]];
    self->time_ = OrgBouncycastleUtilStrings_toByteArrayWithNSString_([dateF formatWithJavaUtilDate:time]);
  }
  return self;
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (self = [super init]) {
    JavaTextSimpleDateFormat *dateF = [[JavaTextSimpleDateFormat alloc] initWithNSString:@"yyMMddHHmmss'Z'" withJavaUtilLocale:locale];
    [dateF setTimeZoneWithJavaUtilTimeZone:[[JavaUtilSimpleTimeZone alloc] initWithInt:0 withNSString:@"Z"]];
    self->time_ = OrgBouncycastleUtilStrings_toByteArrayWithNSString_([dateF formatWithJavaUtilDate:time]);
  }
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)time {
  if (self = [super init]) {
    self->time_ = time;
  }
  return self;
}

- (JavaUtilDate *)getDate {
  JavaTextSimpleDateFormat *dateF = [[JavaTextSimpleDateFormat alloc] initWithNSString:@"yyMMddHHmmssz"];
  return [dateF parseWithNSString:[self getTime]];
}

- (JavaUtilDate *)getAdjustedDate {
  JavaTextSimpleDateFormat *dateF = [[JavaTextSimpleDateFormat alloc] initWithNSString:@"yyyyMMddHHmmssz"];
  [dateF setTimeZoneWithJavaUtilTimeZone:[[JavaUtilSimpleTimeZone alloc] initWithInt:0 withNSString:@"Z"]];
  return [dateF parseWithNSString:[self getAdjustedTime]];
}

- (NSString *)getTime {
  NSString *stime = OrgBouncycastleUtilStrings_fromByteArrayWithByteArray_(time_);
  if ([((NSString *) nil_chk(stime)) indexOf:'-'] < 0 && [stime indexOf:'+'] < 0) {
    if (((jint) [stime length]) == 11) {
      return JreStrcat("$$", [stime substring:0 endIndex:10], @"00GMT+00:00");
    }
    else {
      return JreStrcat("$$", [stime substring:0 endIndex:12], @"GMT+00:00");
    }
  }
  else {
    jint index = [stime indexOf:'-'];
    if (index < 0) {
      index = [stime indexOf:'+'];
    }
    NSString *d = stime;
    if (index == ((jint) [stime length]) - 3) {
      d = JreStrcat("$$", d, @"00");
    }
    if (index == 10) {
      return JreStrcat("$$$C$", [d substring:0 endIndex:10], @"00GMT", [d substring:10 endIndex:13], ':', [d substring:13 endIndex:15]);
    }
    else {
      return JreStrcat("$$$C$", [d substring:0 endIndex:12], @"GMT", [d substring:12 endIndex:15], ':', [d substring:15 endIndex:17]);
    }
  }
}

- (NSString *)getAdjustedTime {
  NSString *d = [self getTime];
  if ([((NSString *) nil_chk(d)) charAtWithInt:0] < '5') {
    return JreStrcat("$$", @"20", d);
  }
  else {
    return JreStrcat("$$", @"19", d);
  }
}

- (jboolean)isConstructed {
  return NO;
}

- (jint)encodedLength {
  jint length = ((IOSByteArray *) nil_chk(time_))->size_;
  return 1 + OrgBouncycastleAsn1StreamUtil_calculateBodyLengthWithInt_(length) + length;
}

- (void)encodeWithOrgBouncycastleAsn1ASN1OutputStream:(OrgBouncycastleAsn1ASN1OutputStream *)outArg {
  [((OrgBouncycastleAsn1ASN1OutputStream *) nil_chk(outArg)) writeWithInt:OrgBouncycastleAsn1BERTags_UTC_TIME];
  jint length = ((IOSByteArray *) nil_chk(time_))->size_;
  [outArg writeLengthWithInt:length];
  for (jint i = 0; i != length; i++) {
    [outArg writeWithInt:(jbyte) IOSByteArray_Get(time_, i)];
  }
}

- (jboolean)asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)o {
  if (!([o isKindOfClass:[OrgBouncycastleAsn1ASN1UTCTime class]])) {
    return NO;
  }
  return OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(time_, ((OrgBouncycastleAsn1ASN1UTCTime *) nil_chk(((OrgBouncycastleAsn1ASN1UTCTime *) check_class_cast(o, [OrgBouncycastleAsn1ASN1UTCTime class]))))->time_);
}

- (NSUInteger)hash {
  return OrgBouncycastleUtilArrays_hashCodeWithByteArray_(time_);
}

- (NSString *)description {
  return OrgBouncycastleUtilStrings_fromByteArrayWithByteArray_(time_);
}

- (void)copyAllFieldsTo:(OrgBouncycastleAsn1ASN1UTCTime *)other {
  [super copyAllFieldsTo:other];
  other->time_ = time_;
}

@end

OrgBouncycastleAsn1ASN1UTCTime *OrgBouncycastleAsn1ASN1UTCTime_getInstanceWithId_(id obj) {
  OrgBouncycastleAsn1ASN1UTCTime_init();
  if (obj == nil || [obj isKindOfClass:[OrgBouncycastleAsn1ASN1UTCTime class]]) {
    return (OrgBouncycastleAsn1ASN1UTCTime *) check_class_cast(obj, [OrgBouncycastleAsn1ASN1UTCTime class]);
  }
  if ([obj isKindOfClass:[IOSByteArray class]]) {
    @try {
      return (OrgBouncycastleAsn1ASN1UTCTime *) check_class_cast(OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_((IOSByteArray *) check_class_cast(obj, [IOSByteArray class])), [OrgBouncycastleAsn1ASN1UTCTime class]);
    }
    @catch (JavaLangException *e) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$", @"encoding error in getInstance: ", [((JavaLangException *) nil_chk(e)) description])];
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$", @"illegal object in getInstance: ", [[nil_chk(obj) getClass] getName])];
}

OrgBouncycastleAsn1ASN1UTCTime *OrgBouncycastleAsn1ASN1UTCTime_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_) {
  OrgBouncycastleAsn1ASN1UTCTime_init();
  OrgBouncycastleAsn1ASN1Object *o = [((OrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(obj)) getObject];
  if (explicit_ || [o isKindOfClass:[OrgBouncycastleAsn1ASN1UTCTime class]]) {
    return OrgBouncycastleAsn1ASN1UTCTime_getInstanceWithId_(o);
  }
  else {
    return [[OrgBouncycastleAsn1ASN1UTCTime alloc] initWithByteArray:[((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(((OrgBouncycastleAsn1ASN1OctetString *) check_class_cast(o, [OrgBouncycastleAsn1ASN1OctetString class])))) getOctets]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1ASN1UTCTime)
