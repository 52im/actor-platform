//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/asn1/DERBitString.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1Encoding.h"
#include "org/bouncycastle/asn1/ASN1OctetString.h"
#include "org/bouncycastle/asn1/ASN1OutputStream.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1TaggedObject.h"
#include "org/bouncycastle/asn1/BERTags.h"
#include "org/bouncycastle/asn1/DERBitString.h"
#include "org/bouncycastle/asn1/StreamUtil.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/io/Streams.h"

@interface OrgBouncycastleAsn1DERBitString () {
}
@end

BOOL OrgBouncycastleAsn1DERBitString_initialized = NO;

@implementation OrgBouncycastleAsn1DERBitString

IOSCharArray * OrgBouncycastleAsn1DERBitString_table_;

+ (jint)getPadBitsWithInt:(jint)bitString {
  return OrgBouncycastleAsn1DERBitString_getPadBitsWithInt_(bitString);
}

+ (IOSByteArray *)getBytesWithInt:(jint)bitString {
  return OrgBouncycastleAsn1DERBitString_getBytesWithInt_(bitString);
}

+ (OrgBouncycastleAsn1DERBitString *)getInstanceWithId:(id)obj {
  return OrgBouncycastleAsn1DERBitString_getInstanceWithId_(obj);
}

+ (OrgBouncycastleAsn1DERBitString *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                            withBoolean:(jboolean)explicit_ {
  return OrgBouncycastleAsn1DERBitString_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_);
}

- (instancetype)initWithByte:(jbyte)data
                     withInt:(jint)padBits {
  if (self = [super init]) {
    self->data_ = [IOSByteArray newArrayWithLength:1];
    *IOSByteArray_GetRef(self->data_, 0) = data;
    self->padBits_ = padBits;
  }
  return self;
}

- (instancetype)initOrgBouncycastleAsn1DERBitStringWithByteArray:(IOSByteArray *)data
                                                         withInt:(jint)padBits {
  if (self = [super init]) {
    self->data_ = data;
    self->padBits_ = padBits;
  }
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)data
                          withInt:(jint)padBits {
  return [self initOrgBouncycastleAsn1DERBitStringWithByteArray:data withInt:padBits];
}

- (instancetype)initWithByteArray:(IOSByteArray *)data {
  return [self initOrgBouncycastleAsn1DERBitStringWithByteArray:data withInt:0];
}

- (instancetype)initWithInt:(jint)value {
  if (self = [super init]) {
    self->data_ = OrgBouncycastleAsn1DERBitString_getBytesWithInt_(value);
    self->padBits_ = OrgBouncycastleAsn1DERBitString_getPadBitsWithInt_(value);
  }
  return self;
}

- (instancetype)initWithOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)obj {
  if (self = [super init]) {
    self->data_ = [((OrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk(obj)) toASN1Primitive])) getEncodedWithNSString:OrgBouncycastleAsn1ASN1Encoding_get_DER_()];
    self->padBits_ = 0;
  }
  return self;
}

- (IOSByteArray *)getBytes {
  return data_;
}

- (jint)getPadBits {
  return padBits_;
}

- (jint)intValue {
  jint value = 0;
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(data_))->size_ && i != 4; i++) {
    value |= LShift32((IOSByteArray_Get(data_, i) & (jint) 0xff), (8 * i));
  }
  return value;
}

- (jboolean)isConstructed {
  return NO;
}

- (jint)encodedLength {
  return 1 + OrgBouncycastleAsn1StreamUtil_calculateBodyLengthWithInt_(((IOSByteArray *) nil_chk(data_))->size_ + 1) + data_->size_ + 1;
}

- (void)encodeWithOrgBouncycastleAsn1ASN1OutputStream:(OrgBouncycastleAsn1ASN1OutputStream *)outArg {
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk([self getBytes]))->size_ + 1];
  *IOSByteArray_GetRef(bytes, 0) = (jbyte) [self getPadBits];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([self getBytes], 0, bytes, 1, bytes->size_ - 1);
  [((OrgBouncycastleAsn1ASN1OutputStream *) nil_chk(outArg)) writeEncodedWithInt:OrgBouncycastleAsn1BERTags_BIT_STRING withByteArray:bytes];
}

- (NSUInteger)hash {
  return padBits_ ^ OrgBouncycastleUtilArrays_hashCodeWithByteArray_(data_);
}

- (jboolean)asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)o {
  if (!([o isKindOfClass:[OrgBouncycastleAsn1DERBitString class]])) {
    return NO;
  }
  OrgBouncycastleAsn1DERBitString *other = (OrgBouncycastleAsn1DERBitString *) check_class_cast(o, [OrgBouncycastleAsn1DERBitString class]);
  return self->padBits_ == ((OrgBouncycastleAsn1DERBitString *) nil_chk(other))->padBits_ && OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(self->data_, other->data_);
}

- (NSString *)getString {
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] initWithNSString:@"#"];
  JavaIoByteArrayOutputStream *bOut = [[JavaIoByteArrayOutputStream alloc] init];
  OrgBouncycastleAsn1ASN1OutputStream *aOut = [[OrgBouncycastleAsn1ASN1OutputStream alloc] initWithJavaIoOutputStream:bOut];
  @try {
    [aOut writeObjectWithOrgBouncycastleAsn1ASN1Encodable:self];
  }
  @catch (JavaIoIOException *e) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"internal error encoding BitString"];
  }
  IOSByteArray *string = [bOut toByteArray];
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(string))->size_; i++) {
    (void) [buf appendWithChar:IOSCharArray_Get(nil_chk(OrgBouncycastleAsn1DERBitString_table_), (URShift32(IOSByteArray_Get(string, i), 4)) & (jint) 0xf)];
    (void) [buf appendWithChar:IOSCharArray_Get(OrgBouncycastleAsn1DERBitString_table_, IOSByteArray_Get(string, i) & (jint) 0xf)];
  }
  return [buf description];
}

- (NSString *)description {
  return [self getString];
}

+ (OrgBouncycastleAsn1DERBitString *)fromOctetStringWithByteArray:(IOSByteArray *)bytes {
  return OrgBouncycastleAsn1DERBitString_fromOctetStringWithByteArray_(bytes);
}

+ (OrgBouncycastleAsn1DERBitString *)fromInputStreamWithInt:(jint)length
                                      withJavaIoInputStream:(JavaIoInputStream *)stream {
  return OrgBouncycastleAsn1DERBitString_fromInputStreamWithInt_withJavaIoInputStream_(length, stream);
}

- (void)copyAllFieldsTo:(OrgBouncycastleAsn1DERBitString *)other {
  [super copyAllFieldsTo:other];
  other->data_ = data_;
  other->padBits_ = padBits_;
}

+ (void)initialize {
  if (self == [OrgBouncycastleAsn1DERBitString class]) {
    OrgBouncycastleAsn1DERBitString_table_ = [IOSCharArray newArrayWithChars:(jchar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' } count:16];
    J2OBJC_SET_INITIALIZED(OrgBouncycastleAsn1DERBitString)
  }
}

@end

jint OrgBouncycastleAsn1DERBitString_getPadBitsWithInt_(jint bitString) {
  OrgBouncycastleAsn1DERBitString_init();
  jint val = 0;
  for (jint i = 3; i >= 0; i--) {
    if (i != 0) {
      if ((RShift32(bitString, (i * 8))) != 0) {
        val = (RShift32(bitString, (i * 8))) & (jint) 0xFF;
        break;
      }
    }
    else {
      if (bitString != 0) {
        val = bitString & (jint) 0xFF;
        break;
      }
    }
  }
  if (val == 0) {
    return 7;
  }
  jint bits = 1;
  while (((LShiftAssignInt(&val, 1)) & (jint) 0xFF) != 0) {
    bits++;
  }
  return 8 - bits;
}

IOSByteArray *OrgBouncycastleAsn1DERBitString_getBytesWithInt_(jint bitString) {
  OrgBouncycastleAsn1DERBitString_init();
  jint bytes = 4;
  for (jint i = 3; i >= 1; i--) {
    if ((bitString & (LShift32((jint) 0xFF, (i * 8)))) != 0) {
      break;
    }
    bytes--;
  }
  IOSByteArray *result = [IOSByteArray newArrayWithLength:bytes];
  for (jint i = 0; i < bytes; i++) {
    *IOSByteArray_GetRef(result, i) = (jbyte) ((RShift32(bitString, (i * 8))) & (jint) 0xFF);
  }
  return result;
}

OrgBouncycastleAsn1DERBitString *OrgBouncycastleAsn1DERBitString_getInstanceWithId_(id obj) {
  OrgBouncycastleAsn1DERBitString_init();
  if (obj == nil || [obj isKindOfClass:[OrgBouncycastleAsn1DERBitString class]]) {
    return (OrgBouncycastleAsn1DERBitString *) check_class_cast(obj, [OrgBouncycastleAsn1DERBitString class]);
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$", @"illegal object in getInstance: ", [[nil_chk(obj) getClass] getName])];
}

OrgBouncycastleAsn1DERBitString *OrgBouncycastleAsn1DERBitString_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_) {
  OrgBouncycastleAsn1DERBitString_init();
  OrgBouncycastleAsn1ASN1Primitive *o = [((OrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(obj)) getObject];
  if (explicit_ || [o isKindOfClass:[OrgBouncycastleAsn1DERBitString class]]) {
    return OrgBouncycastleAsn1DERBitString_getInstanceWithId_(o);
  }
  else {
    return OrgBouncycastleAsn1DERBitString_fromOctetStringWithByteArray_([((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(((OrgBouncycastleAsn1ASN1OctetString *) check_class_cast(o, [OrgBouncycastleAsn1ASN1OctetString class])))) getOctets]);
  }
}

OrgBouncycastleAsn1DERBitString *OrgBouncycastleAsn1DERBitString_fromOctetStringWithByteArray_(IOSByteArray *bytes) {
  OrgBouncycastleAsn1DERBitString_init();
  if (((IOSByteArray *) nil_chk(bytes))->size_ < 1) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"truncated BIT STRING detected"];
  }
  jint padBits = IOSByteArray_Get(bytes, 0);
  IOSByteArray *data = [IOSByteArray newArrayWithLength:bytes->size_ - 1];
  if (data->size_ != 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, 1, data, 0, bytes->size_ - 1);
  }
  return [[OrgBouncycastleAsn1DERBitString alloc] initWithByteArray:data withInt:padBits];
}

OrgBouncycastleAsn1DERBitString *OrgBouncycastleAsn1DERBitString_fromInputStreamWithInt_withJavaIoInputStream_(jint length, JavaIoInputStream *stream) {
  OrgBouncycastleAsn1DERBitString_init();
  if (length < 1) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"truncated BIT STRING detected"];
  }
  jint padBits = [((JavaIoInputStream *) nil_chk(stream)) read];
  IOSByteArray *data = [IOSByteArray newArrayWithLength:length - 1];
  if (data->size_ != 0) {
    if (OrgBouncycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_(stream, data) != data->size_) {
      @throw [[JavaIoEOFException alloc] initWithNSString:@"EOF encountered in middle of BIT STRING"];
    }
  }
  return [[OrgBouncycastleAsn1DERBitString alloc] initWithByteArray:data withInt:padBits];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1DERBitString)
