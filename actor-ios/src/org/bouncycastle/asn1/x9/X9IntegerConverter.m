//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/asn1/x9/X9IntegerConverter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/asn1/x9/X9IntegerConverter.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"

@implementation OrgBouncycastleAsn1X9X9IntegerConverter

- (jint)getByteLengthWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)c {
  return ([((OrgBouncycastleMathEcECCurve *) nil_chk(c)) getFieldSize] + 7) / 8;
}

- (jint)getByteLengthWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)fe {
  return ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(fe)) getFieldSize] + 7) / 8;
}

- (IOSByteArray *)integerToBytesWithJavaMathBigInteger:(JavaMathBigInteger *)s
                                               withInt:(jint)qLength {
  IOSByteArray *bytes = [((JavaMathBigInteger *) nil_chk(s)) toByteArray];
  if (qLength < ((IOSByteArray *) nil_chk(bytes))->size_) {
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:qLength];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, bytes->size_ - tmp->size_, tmp, 0, tmp->size_);
    return tmp;
  }
  else if (qLength > bytes->size_) {
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:qLength];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, 0, tmp, tmp->size_ - bytes->size_, bytes->size_);
    return tmp;
  }
  return bytes;
}

- (instancetype)init {
  return [super init];
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1X9X9IntegerConverter)
