//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/asn1/IndefiniteLengthInputStream.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "org/bouncycastle/asn1/IndefiniteLengthInputStream.h"
#include "org/bouncycastle/asn1/LimitedInputStream.h"

__attribute__((unused)) static jboolean OrgBouncycastleAsn1IndefiniteLengthInputStream_checkForEof(OrgBouncycastleAsn1IndefiniteLengthInputStream *self);

@interface OrgBouncycastleAsn1IndefiniteLengthInputStream () {
 @public
  jint _b1_;
  jint _b2_;
  jboolean _eofReached_;
  jboolean _eofOn00_;
}

- (jboolean)checkForEof;
@end

@implementation OrgBouncycastleAsn1IndefiniteLengthInputStream

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                  withInt:(jint)limit {
  if (self = [super initWithJavaIoInputStream:inArg withInt:limit]) {
    _eofReached_ = NO;
    _eofOn00_ = YES;
    _b1_ = [((JavaIoInputStream *) nil_chk(inArg)) read];
    _b2_ = [inArg read];
    if (_b2_ < 0) {
      @throw [[JavaIoEOFException alloc] init];
    }
    OrgBouncycastleAsn1IndefiniteLengthInputStream_checkForEof(self);
  }
  return self;
}

- (void)setEofOn00WithBoolean:(jboolean)eofOn00 {
  _eofOn00_ = eofOn00;
  OrgBouncycastleAsn1IndefiniteLengthInputStream_checkForEof(self);
}

- (jboolean)checkForEof {
  return OrgBouncycastleAsn1IndefiniteLengthInputStream_checkForEof(self);
}

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len {
  if (_eofOn00_ || len < 3) {
    return [super readWithByteArray:b withInt:off withInt:len];
  }
  if (_eofReached_) {
    return -1;
  }
  jint numRead = [((JavaIoInputStream *) nil_chk(_in_)) readWithByteArray:b withInt:off + 2 withInt:len - 2];
  if (numRead < 0) {
    @throw [[JavaIoEOFException alloc] init];
  }
  *IOSByteArray_GetRef(nil_chk(b), off) = (jbyte) _b1_;
  *IOSByteArray_GetRef(b, off + 1) = (jbyte) _b2_;
  _b1_ = [_in_ read];
  _b2_ = [_in_ read];
  if (_b2_ < 0) {
    @throw [[JavaIoEOFException alloc] init];
  }
  return numRead + 2;
}

- (jint)read {
  if (OrgBouncycastleAsn1IndefiniteLengthInputStream_checkForEof(self)) {
    return -1;
  }
  jint b = [((JavaIoInputStream *) nil_chk(_in_)) read];
  if (b < 0) {
    @throw [[JavaIoEOFException alloc] init];
  }
  jint v = _b1_;
  _b1_ = _b2_;
  _b2_ = b;
  return v;
}

- (void)copyAllFieldsTo:(OrgBouncycastleAsn1IndefiniteLengthInputStream *)other {
  [super copyAllFieldsTo:other];
  other->_b1_ = _b1_;
  other->_b2_ = _b2_;
  other->_eofReached_ = _eofReached_;
  other->_eofOn00_ = _eofOn00_;
}

@end

jboolean OrgBouncycastleAsn1IndefiniteLengthInputStream_checkForEof(OrgBouncycastleAsn1IndefiniteLengthInputStream *self) {
  if (!self->_eofReached_ && self->_eofOn00_ && (self->_b1_ == (jint) 0x00 && self->_b2_ == (jint) 0x00)) {
    self->_eofReached_ = YES;
    [self setParentEofDetectWithBoolean:YES];
  }
  return self->_eofReached_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1IndefiniteLengthInputStream)
