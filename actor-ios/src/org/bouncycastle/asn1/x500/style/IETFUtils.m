//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/actor-ios/build/java/org/bouncycastle/asn1/x500/style/IETFUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1Encoding.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1String.h"
#include "org/bouncycastle/asn1/DERUniversalString.h"
#include "org/bouncycastle/asn1/x500/AttributeTypeAndValue.h"
#include "org/bouncycastle/asn1/x500/RDN.h"
#include "org/bouncycastle/asn1/x500/X500Name.h"
#include "org/bouncycastle/asn1/x500/X500NameBuilder.h"
#include "org/bouncycastle/asn1/x500/X500NameStyle.h"
#include "org/bouncycastle/asn1/x500/style/IETFUtils.h"
#include "org/bouncycastle/asn1/x500/style/X500NameTokenizer.h"
#include "org/bouncycastle/util/Strings.h"
#include "org/bouncycastle/util/encoders/Hex.h"

__attribute__((unused)) static NSString *OrgBouncycastleAsn1X500StyleIETFUtils_unescapeWithNSString_(NSString *elt);
__attribute__((unused)) static jboolean OrgBouncycastleAsn1X500StyleIETFUtils_isHexDigitWithChar_(jchar c);
__attribute__((unused)) static jint OrgBouncycastleAsn1X500StyleIETFUtils_convertHexWithChar_(jchar c);
__attribute__((unused)) static IOSObjectArray *OrgBouncycastleAsn1X500StyleIETFUtils_toValueArrayWithJavaUtilVector_(JavaUtilVector *values);
__attribute__((unused)) static IOSObjectArray *OrgBouncycastleAsn1X500StyleIETFUtils_toOIDArrayWithJavaUtilVector_(JavaUtilVector *oids);
__attribute__((unused)) static NSString *OrgBouncycastleAsn1X500StyleIETFUtils_bytesToStringWithByteArray_(IOSByteArray *data);
__attribute__((unused)) static OrgBouncycastleAsn1ASN1Primitive *OrgBouncycastleAsn1X500StyleIETFUtils_decodeObjectWithNSString_(NSString *oValue);
__attribute__((unused)) static jboolean OrgBouncycastleAsn1X500StyleIETFUtils_atvAreEqualWithOrgBouncycastleAsn1X500AttributeTypeAndValue_withOrgBouncycastleAsn1X500AttributeTypeAndValue_(OrgBouncycastleAsn1X500AttributeTypeAndValue *atv1, OrgBouncycastleAsn1X500AttributeTypeAndValue *atv2);

@interface OrgBouncycastleAsn1X500StyleIETFUtils ()

+ (NSString *)unescapeWithNSString:(NSString *)elt;

+ (jboolean)isHexDigitWithChar:(jchar)c;

+ (jint)convertHexWithChar:(jchar)c;

+ (IOSObjectArray *)toValueArrayWithJavaUtilVector:(JavaUtilVector *)values;

+ (IOSObjectArray *)toOIDArrayWithJavaUtilVector:(JavaUtilVector *)oids;

+ (NSString *)bytesToStringWithByteArray:(IOSByteArray *)data;

+ (OrgBouncycastleAsn1ASN1Primitive *)decodeObjectWithNSString:(NSString *)oValue;

+ (jboolean)atvAreEqualWithOrgBouncycastleAsn1X500AttributeTypeAndValue:(OrgBouncycastleAsn1X500AttributeTypeAndValue *)atv1
                       withOrgBouncycastleAsn1X500AttributeTypeAndValue:(OrgBouncycastleAsn1X500AttributeTypeAndValue *)atv2;
@end

@implementation OrgBouncycastleAsn1X500StyleIETFUtils

+ (NSString *)unescapeWithNSString:(NSString *)elt {
  return OrgBouncycastleAsn1X500StyleIETFUtils_unescapeWithNSString_(elt);
}

+ (jboolean)isHexDigitWithChar:(jchar)c {
  return OrgBouncycastleAsn1X500StyleIETFUtils_isHexDigitWithChar_(c);
}

+ (jint)convertHexWithChar:(jchar)c {
  return OrgBouncycastleAsn1X500StyleIETFUtils_convertHexWithChar_(c);
}

+ (IOSObjectArray *)rDNsFromStringWithNSString:(NSString *)name
      withOrgBouncycastleAsn1X500X500NameStyle:(id<OrgBouncycastleAsn1X500X500NameStyle>)x500Style {
  return OrgBouncycastleAsn1X500StyleIETFUtils_rDNsFromStringWithNSString_withOrgBouncycastleAsn1X500X500NameStyle_(name, x500Style);
}

+ (IOSObjectArray *)toValueArrayWithJavaUtilVector:(JavaUtilVector *)values {
  return OrgBouncycastleAsn1X500StyleIETFUtils_toValueArrayWithJavaUtilVector_(values);
}

+ (IOSObjectArray *)toOIDArrayWithJavaUtilVector:(JavaUtilVector *)oids {
  return OrgBouncycastleAsn1X500StyleIETFUtils_toOIDArrayWithJavaUtilVector_(oids);
}

+ (IOSObjectArray *)findAttrNamesForOIDWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                                                             withJavaUtilHashtable:(JavaUtilHashtable *)lookup {
  return OrgBouncycastleAsn1X500StyleIETFUtils_findAttrNamesForOIDWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilHashtable_(oid, lookup);
}

+ (OrgBouncycastleAsn1ASN1ObjectIdentifier *)decodeAttrNameWithNSString:(NSString *)name
                                                  withJavaUtilHashtable:(JavaUtilHashtable *)lookUp {
  return OrgBouncycastleAsn1X500StyleIETFUtils_decodeAttrNameWithNSString_withJavaUtilHashtable_(name, lookUp);
}

+ (id<OrgBouncycastleAsn1ASN1Encodable>)valueFromHexStringWithNSString:(NSString *)str
                                                               withInt:(jint)off {
  return OrgBouncycastleAsn1X500StyleIETFUtils_valueFromHexStringWithNSString_withInt_(str, off);
}

+ (void)appendRDNWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
           withOrgBouncycastleAsn1X500RDN:(OrgBouncycastleAsn1X500RDN *)rdn
                    withJavaUtilHashtable:(JavaUtilHashtable *)oidSymbols {
  OrgBouncycastleAsn1X500StyleIETFUtils_appendRDNWithJavaLangStringBuffer_withOrgBouncycastleAsn1X500RDN_withJavaUtilHashtable_(buf, rdn, oidSymbols);
}

+ (void)appendTypeAndValueWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
  withOrgBouncycastleAsn1X500AttributeTypeAndValue:(OrgBouncycastleAsn1X500AttributeTypeAndValue *)typeAndValue
                             withJavaUtilHashtable:(JavaUtilHashtable *)oidSymbols {
  OrgBouncycastleAsn1X500StyleIETFUtils_appendTypeAndValueWithJavaLangStringBuffer_withOrgBouncycastleAsn1X500AttributeTypeAndValue_withJavaUtilHashtable_(buf, typeAndValue, oidSymbols);
}

+ (NSString *)valueToStringWithOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)value {
  return OrgBouncycastleAsn1X500StyleIETFUtils_valueToStringWithOrgBouncycastleAsn1ASN1Encodable_(value);
}

+ (NSString *)bytesToStringWithByteArray:(IOSByteArray *)data {
  return OrgBouncycastleAsn1X500StyleIETFUtils_bytesToStringWithByteArray_(data);
}

+ (NSString *)canonicalizeWithNSString:(NSString *)s {
  return OrgBouncycastleAsn1X500StyleIETFUtils_canonicalizeWithNSString_(s);
}

+ (OrgBouncycastleAsn1ASN1Primitive *)decodeObjectWithNSString:(NSString *)oValue {
  return OrgBouncycastleAsn1X500StyleIETFUtils_decodeObjectWithNSString_(oValue);
}

+ (NSString *)stripInternalSpacesWithNSString:(NSString *)str {
  return OrgBouncycastleAsn1X500StyleIETFUtils_stripInternalSpacesWithNSString_(str);
}

+ (jboolean)rDNAreEqualWithOrgBouncycastleAsn1X500RDN:(OrgBouncycastleAsn1X500RDN *)rdn1
                       withOrgBouncycastleAsn1X500RDN:(OrgBouncycastleAsn1X500RDN *)rdn2 {
  return OrgBouncycastleAsn1X500StyleIETFUtils_rDNAreEqualWithOrgBouncycastleAsn1X500RDN_withOrgBouncycastleAsn1X500RDN_(rdn1, rdn2);
}

+ (jboolean)atvAreEqualWithOrgBouncycastleAsn1X500AttributeTypeAndValue:(OrgBouncycastleAsn1X500AttributeTypeAndValue *)atv1
                       withOrgBouncycastleAsn1X500AttributeTypeAndValue:(OrgBouncycastleAsn1X500AttributeTypeAndValue *)atv2 {
  return OrgBouncycastleAsn1X500StyleIETFUtils_atvAreEqualWithOrgBouncycastleAsn1X500AttributeTypeAndValue_withOrgBouncycastleAsn1X500AttributeTypeAndValue_(atv1, atv2);
}

- (instancetype)init {
  return [super init];
}

@end

NSString *OrgBouncycastleAsn1X500StyleIETFUtils_unescapeWithNSString_(NSString *elt) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  if (((jint) [((NSString *) nil_chk(elt)) length]) == 0 || ([elt indexOf:'\\'] < 0 && [elt indexOf:'"'] < 0)) {
    return [elt trim];
  }
  IOSCharArray *elts = [elt toCharArray];
  jboolean escaped = NO;
  jboolean quoted = NO;
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] initWithInt:((jint) [elt length])];
  jint start = 0;
  if (IOSCharArray_Get(nil_chk(elts), 0) == '\\') {
    if (IOSCharArray_Get(elts, 1) == '#') {
      start = 2;
      (void) [buf appendWithNSString:@"\\#"];
    }
  }
  jboolean nonWhiteSpaceEncountered = NO;
  jint lastEscaped = 0;
  jchar hex1 = 0;
  for (jint i = start; i != elts->size_; i++) {
    jchar c = IOSCharArray_Get(elts, i);
    if (c != ' ') {
      nonWhiteSpaceEncountered = YES;
    }
    if (c == '"') {
      if (!escaped) {
        quoted = !quoted;
      }
      else {
        (void) [buf appendWithChar:c];
      }
      escaped = NO;
    }
    else if (c == '\\' && !(escaped || quoted)) {
      escaped = YES;
      lastEscaped = [buf sequenceLength];
    }
    else {
      if (c == ' ' && !escaped && !nonWhiteSpaceEncountered) {
        continue;
      }
      if (escaped && OrgBouncycastleAsn1X500StyleIETFUtils_isHexDigitWithChar_(c)) {
        if (hex1 != 0) {
          (void) [buf appendWithChar:(jchar) (OrgBouncycastleAsn1X500StyleIETFUtils_convertHexWithChar_(hex1) * 16 + OrgBouncycastleAsn1X500StyleIETFUtils_convertHexWithChar_(c))];
          escaped = NO;
          hex1 = 0;
          continue;
        }
        hex1 = c;
        continue;
      }
      (void) [buf appendWithChar:c];
      escaped = NO;
    }
  }
  if ([buf sequenceLength] > 0) {
    while ([buf charAtWithInt:[buf sequenceLength] - 1] == ' ' && lastEscaped != ([buf sequenceLength] - 1)) {
      [buf setLengthWithInt:[buf sequenceLength] - 1];
    }
  }
  return [buf description];
}

jboolean OrgBouncycastleAsn1X500StyleIETFUtils_isHexDigitWithChar_(jchar c) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  return ('0' <= c && c <= '9') || ('a' <= c && c <= 'f') || ('A' <= c && c <= 'F');
}

jint OrgBouncycastleAsn1X500StyleIETFUtils_convertHexWithChar_(jchar c) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  if ('0' <= c && c <= '9') {
    return c - '0';
  }
  if ('a' <= c && c <= 'f') {
    return c - 'a' + 10;
  }
  return c - 'A' + 10;
}

IOSObjectArray *OrgBouncycastleAsn1X500StyleIETFUtils_rDNsFromStringWithNSString_withOrgBouncycastleAsn1X500X500NameStyle_(NSString *name, id<OrgBouncycastleAsn1X500X500NameStyle> x500Style) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  OrgBouncycastleAsn1X500StyleX500NameTokenizer *nTok = [[OrgBouncycastleAsn1X500StyleX500NameTokenizer alloc] initWithNSString:name];
  OrgBouncycastleAsn1X500X500NameBuilder *builder = [[OrgBouncycastleAsn1X500X500NameBuilder alloc] initWithOrgBouncycastleAsn1X500X500NameStyle:x500Style];
  while ([nTok hasMoreTokens]) {
    NSString *token = [nTok nextToken];
    if ([((NSString *) nil_chk(token)) indexOf:'+'] > 0) {
      OrgBouncycastleAsn1X500StyleX500NameTokenizer *pTok = [[OrgBouncycastleAsn1X500StyleX500NameTokenizer alloc] initWithNSString:token withChar:'+'];
      OrgBouncycastleAsn1X500StyleX500NameTokenizer *vTok = [[OrgBouncycastleAsn1X500StyleX500NameTokenizer alloc] initWithNSString:[pTok nextToken] withChar:'='];
      NSString *attr = [vTok nextToken];
      if (![vTok hasMoreTokens]) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"badly formatted directory string"];
      }
      NSString *value = [vTok nextToken];
      OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = [((id<OrgBouncycastleAsn1X500X500NameStyle>) nil_chk(x500Style)) attrNameToOIDWithNSString:[((NSString *) nil_chk(attr)) trim]];
      if ([pTok hasMoreTokens]) {
        JavaUtilVector *oids = [[JavaUtilVector alloc] init];
        JavaUtilVector *values = [[JavaUtilVector alloc] init];
        [oids addElementWithId:oid];
        [values addElementWithId:OrgBouncycastleAsn1X500StyleIETFUtils_unescapeWithNSString_(value)];
        while ([pTok hasMoreTokens]) {
          vTok = [[OrgBouncycastleAsn1X500StyleX500NameTokenizer alloc] initWithNSString:[pTok nextToken] withChar:'='];
          attr = [vTok nextToken];
          if (![vTok hasMoreTokens]) {
            @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"badly formatted directory string"];
          }
          value = [vTok nextToken];
          oid = [x500Style attrNameToOIDWithNSString:[((NSString *) nil_chk(attr)) trim]];
          [oids addElementWithId:oid];
          [values addElementWithId:OrgBouncycastleAsn1X500StyleIETFUtils_unescapeWithNSString_(value)];
        }
        (void) [builder addMultiValuedRDNWithOrgBouncycastleAsn1ASN1ObjectIdentifierArray:OrgBouncycastleAsn1X500StyleIETFUtils_toOIDArrayWithJavaUtilVector_(oids) withNSStringArray:OrgBouncycastleAsn1X500StyleIETFUtils_toValueArrayWithJavaUtilVector_(values)];
      }
      else {
        (void) [builder addRDNWithOrgBouncycastleAsn1ASN1ObjectIdentifier:oid withNSString:OrgBouncycastleAsn1X500StyleIETFUtils_unescapeWithNSString_(value)];
      }
    }
    else {
      OrgBouncycastleAsn1X500StyleX500NameTokenizer *vTok = [[OrgBouncycastleAsn1X500StyleX500NameTokenizer alloc] initWithNSString:token withChar:'='];
      NSString *attr = [vTok nextToken];
      if (![vTok hasMoreTokens]) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"badly formatted directory string"];
      }
      NSString *value = [vTok nextToken];
      OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = [((id<OrgBouncycastleAsn1X500X500NameStyle>) nil_chk(x500Style)) attrNameToOIDWithNSString:[((NSString *) nil_chk(attr)) trim]];
      (void) [builder addRDNWithOrgBouncycastleAsn1ASN1ObjectIdentifier:oid withNSString:OrgBouncycastleAsn1X500StyleIETFUtils_unescapeWithNSString_(value)];
    }
  }
  return [((OrgBouncycastleAsn1X500X500Name *) nil_chk([builder build])) getRDNs];
}

IOSObjectArray *OrgBouncycastleAsn1X500StyleIETFUtils_toValueArrayWithJavaUtilVector_(JavaUtilVector *values) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  IOSObjectArray *tmp = [IOSObjectArray newArrayWithLength:[((JavaUtilVector *) nil_chk(values)) size] type:NSString_class_()];
  for (jint i = 0; i != tmp->size_; i++) {
    IOSObjectArray_Set(tmp, i, (NSString *) check_class_cast([values elementAtWithInt:i], [NSString class]));
  }
  return tmp;
}

IOSObjectArray *OrgBouncycastleAsn1X500StyleIETFUtils_toOIDArrayWithJavaUtilVector_(JavaUtilVector *oids) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  IOSObjectArray *tmp = [IOSObjectArray newArrayWithLength:[((JavaUtilVector *) nil_chk(oids)) size] type:OrgBouncycastleAsn1ASN1ObjectIdentifier_class_()];
  for (jint i = 0; i != tmp->size_; i++) {
    IOSObjectArray_Set(tmp, i, (OrgBouncycastleAsn1ASN1ObjectIdentifier *) check_class_cast([oids elementAtWithInt:i], [OrgBouncycastleAsn1ASN1ObjectIdentifier class]));
  }
  return tmp;
}

IOSObjectArray *OrgBouncycastleAsn1X500StyleIETFUtils_findAttrNamesForOIDWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilHashtable_(OrgBouncycastleAsn1ASN1ObjectIdentifier *oid, JavaUtilHashtable *lookup) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  jint count = 0;
  for (id<JavaUtilEnumeration> en = [((JavaUtilHashtable *) nil_chk(lookup)) elements]; [((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]; ) {
    if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) isEqual:[en nextElement]]) {
      count++;
    }
  }
  IOSObjectArray *aliases = [IOSObjectArray newArrayWithLength:count type:NSString_class_()];
  count = 0;
  for (id<JavaUtilEnumeration> en = [lookup keys]; [((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]; ) {
    NSString *key = (NSString *) check_class_cast([en nextElement], [NSString class]);
    if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) isEqual:[lookup getWithId:key]]) {
      IOSObjectArray_Set(aliases, count++, key);
    }
  }
  return aliases;
}

OrgBouncycastleAsn1ASN1ObjectIdentifier *OrgBouncycastleAsn1X500StyleIETFUtils_decodeAttrNameWithNSString_withJavaUtilHashtable_(NSString *name, JavaUtilHashtable *lookUp) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  if ([((NSString *) nil_chk(OrgBouncycastleUtilStrings_toUpperCaseWithNSString_(name))) hasPrefix:@"OID."]) {
    return [[OrgBouncycastleAsn1ASN1ObjectIdentifier alloc] initWithNSString:[((NSString *) nil_chk(name)) substring:4]];
  }
  else if ([((NSString *) nil_chk(name)) charAtWithInt:0] >= '0' && [name charAtWithInt:0] <= '9') {
    return [[OrgBouncycastleAsn1ASN1ObjectIdentifier alloc] initWithNSString:name];
  }
  OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (OrgBouncycastleAsn1ASN1ObjectIdentifier *) check_class_cast([((JavaUtilHashtable *) nil_chk(lookUp)) getWithId:OrgBouncycastleUtilStrings_toLowerCaseWithNSString_(name)], [OrgBouncycastleAsn1ASN1ObjectIdentifier class]);
  if (oid == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$$", @"Unknown object id - ", name, @" - passed to distinguished name")];
  }
  return oid;
}

id<OrgBouncycastleAsn1ASN1Encodable> OrgBouncycastleAsn1X500StyleIETFUtils_valueFromHexStringWithNSString_withInt_(NSString *str, jint off) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  IOSByteArray *data = [IOSByteArray newArrayWithLength:(((jint) [((NSString *) nil_chk(str)) length]) - off) / 2];
  for (jint index = 0; index != data->size_; index++) {
    jchar left = [str charAtWithInt:(index * 2) + off];
    jchar right = [str charAtWithInt:(index * 2) + off + 1];
    *IOSByteArray_GetRef(data, index) = (jbyte) ((LShift32(OrgBouncycastleAsn1X500StyleIETFUtils_convertHexWithChar_(left), 4)) | OrgBouncycastleAsn1X500StyleIETFUtils_convertHexWithChar_(right));
  }
  return OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(data);
}

void OrgBouncycastleAsn1X500StyleIETFUtils_appendRDNWithJavaLangStringBuffer_withOrgBouncycastleAsn1X500RDN_withJavaUtilHashtable_(JavaLangStringBuffer *buf, OrgBouncycastleAsn1X500RDN *rdn, JavaUtilHashtable *oidSymbols) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  if ([((OrgBouncycastleAsn1X500RDN *) nil_chk(rdn)) isMultiValued]) {
    IOSObjectArray *atv = [rdn getTypesAndValues];
    jboolean firstAtv = YES;
    for (jint j = 0; j != ((IOSObjectArray *) nil_chk(atv))->size_; j++) {
      if (firstAtv) {
        firstAtv = NO;
      }
      else {
        (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithChar:'+'];
      }
      OrgBouncycastleAsn1X500StyleIETFUtils_appendTypeAndValueWithJavaLangStringBuffer_withOrgBouncycastleAsn1X500AttributeTypeAndValue_withJavaUtilHashtable_(buf, IOSObjectArray_Get(atv, j), oidSymbols);
    }
  }
  else {
    OrgBouncycastleAsn1X500StyleIETFUtils_appendTypeAndValueWithJavaLangStringBuffer_withOrgBouncycastleAsn1X500AttributeTypeAndValue_withJavaUtilHashtable_(buf, [rdn getFirst], oidSymbols);
  }
}

void OrgBouncycastleAsn1X500StyleIETFUtils_appendTypeAndValueWithJavaLangStringBuffer_withOrgBouncycastleAsn1X500AttributeTypeAndValue_withJavaUtilHashtable_(JavaLangStringBuffer *buf, OrgBouncycastleAsn1X500AttributeTypeAndValue *typeAndValue, JavaUtilHashtable *oidSymbols) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  NSString *sym = (NSString *) check_class_cast([((JavaUtilHashtable *) nil_chk(oidSymbols)) getWithId:[((OrgBouncycastleAsn1X500AttributeTypeAndValue *) nil_chk(typeAndValue)) getType]], [NSString class]);
  if (sym != nil) {
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:sym];
  }
  else {
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:[((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([typeAndValue getType])) getId]];
  }
  (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithChar:'='];
  (void) [buf appendWithNSString:OrgBouncycastleAsn1X500StyleIETFUtils_valueToStringWithOrgBouncycastleAsn1ASN1Encodable_([typeAndValue getValue])];
}

NSString *OrgBouncycastleAsn1X500StyleIETFUtils_valueToStringWithOrgBouncycastleAsn1ASN1Encodable_(id<OrgBouncycastleAsn1ASN1Encodable> value) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  JavaLangStringBuffer *vBuf = [[JavaLangStringBuffer alloc] init];
  if ([OrgBouncycastleAsn1ASN1String_class_() isInstance:value] && !([value isKindOfClass:[OrgBouncycastleAsn1DERUniversalString class]])) {
    NSString *v = [((id<OrgBouncycastleAsn1ASN1String>) nil_chk(((id<OrgBouncycastleAsn1ASN1String>) check_protocol_cast(value, @protocol(OrgBouncycastleAsn1ASN1String))))) getString];
    if (((jint) [((NSString *) nil_chk(v)) length]) > 0 && [v charAtWithInt:0] == '#') {
      (void) [vBuf appendWithNSString:JreStrcat("C$", '\\', v)];
    }
    else {
      (void) [vBuf appendWithNSString:v];
    }
  }
  else {
    @try {
      (void) [vBuf appendWithNSString:JreStrcat("C$", '#', OrgBouncycastleAsn1X500StyleIETFUtils_bytesToStringWithByteArray_(OrgBouncycastleUtilEncodersHex_encodeWithByteArray_([((OrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk(value)) toASN1Primitive])) getEncodedWithNSString:OrgBouncycastleAsn1ASN1Encoding_get_DER_()])))];
    }
    @catch (JavaIoIOException *e) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Other value has no encoded form"];
    }
  }
  jint end = [vBuf sequenceLength];
  jint index = 0;
  if ([vBuf sequenceLength] >= 2 && [vBuf charAtWithInt:0] == '\\' && [vBuf charAtWithInt:1] == '#') {
    index += 2;
  }
  while (index != end) {
    if (([vBuf charAtWithInt:index] == ',') || ([vBuf charAtWithInt:index] == '"') || ([vBuf charAtWithInt:index] == '\\') || ([vBuf charAtWithInt:index] == '+') || ([vBuf charAtWithInt:index] == '=') || ([vBuf charAtWithInt:index] == '<') || ([vBuf charAtWithInt:index] == '>') || ([vBuf charAtWithInt:index] == ';')) {
      (void) [vBuf insertWithInt:index withNSString:@"\\"];
      index++;
      end++;
    }
    index++;
  }
  jint start = 0;
  if ([vBuf sequenceLength] > 0) {
    while ([vBuf sequenceLength] > start && [vBuf charAtWithInt:start] == ' ') {
      (void) [vBuf insertWithInt:start withNSString:@"\\"];
      start += 2;
    }
  }
  jint endBuf = [vBuf sequenceLength] - 1;
  while (endBuf >= 0 && [vBuf charAtWithInt:endBuf] == ' ') {
    (void) [vBuf insertWithInt:endBuf withChar:'\\'];
    endBuf--;
  }
  return [vBuf description];
}

NSString *OrgBouncycastleAsn1X500StyleIETFUtils_bytesToStringWithByteArray_(IOSByteArray *data) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  IOSCharArray *cs = [IOSCharArray newArrayWithLength:((IOSByteArray *) nil_chk(data))->size_];
  for (jint i = 0; i != cs->size_; i++) {
    *IOSCharArray_GetRef(cs, i) = (jchar) (IOSByteArray_Get(data, i) & (jint) 0xff);
  }
  return [NSString stringWithCharacters:cs];
}

NSString *OrgBouncycastleAsn1X500StyleIETFUtils_canonicalizeWithNSString_(NSString *s) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  NSString *value = OrgBouncycastleUtilStrings_toLowerCaseWithNSString_([((NSString *) nil_chk(s)) trim]);
  if (((jint) [((NSString *) nil_chk(value)) length]) > 0 && [value charAtWithInt:0] == '#') {
    OrgBouncycastleAsn1ASN1Primitive *obj = OrgBouncycastleAsn1X500StyleIETFUtils_decodeObjectWithNSString_(value);
    if ([OrgBouncycastleAsn1ASN1String_class_() isInstance:obj]) {
      value = OrgBouncycastleUtilStrings_toLowerCaseWithNSString_([((NSString *) nil_chk([((id<OrgBouncycastleAsn1ASN1String>) nil_chk(((id<OrgBouncycastleAsn1ASN1String>) check_protocol_cast(obj, @protocol(OrgBouncycastleAsn1ASN1String))))) getString])) trim]);
    }
  }
  value = OrgBouncycastleAsn1X500StyleIETFUtils_stripInternalSpacesWithNSString_(value);
  return value;
}

OrgBouncycastleAsn1ASN1Primitive *OrgBouncycastleAsn1X500StyleIETFUtils_decodeObjectWithNSString_(NSString *oValue) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  @try {
    return OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(OrgBouncycastleUtilEncodersHex_decodeWithNSString_([((NSString *) nil_chk(oValue)) substring:1]));
  }
  @catch (JavaIoIOException *e) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$@", @"unknown encoding in name: ", e)];
  }
}

NSString *OrgBouncycastleAsn1X500StyleIETFUtils_stripInternalSpacesWithNSString_(NSString *str) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  JavaLangStringBuffer *res = [[JavaLangStringBuffer alloc] init];
  if (((jint) [((NSString *) nil_chk(str)) length]) != 0) {
    jchar c1 = [str charAtWithInt:0];
    (void) [res appendWithChar:c1];
    for (jint k = 1; k < ((jint) [str length]); k++) {
      jchar c2 = [str charAtWithInt:k];
      if (!(c1 == ' ' && c2 == ' ')) {
        (void) [res appendWithChar:c2];
      }
      c1 = c2;
    }
  }
  return [res description];
}

jboolean OrgBouncycastleAsn1X500StyleIETFUtils_rDNAreEqualWithOrgBouncycastleAsn1X500RDN_withOrgBouncycastleAsn1X500RDN_(OrgBouncycastleAsn1X500RDN *rdn1, OrgBouncycastleAsn1X500RDN *rdn2) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  if ([((OrgBouncycastleAsn1X500RDN *) nil_chk(rdn1)) isMultiValued]) {
    if ([((OrgBouncycastleAsn1X500RDN *) nil_chk(rdn2)) isMultiValued]) {
      IOSObjectArray *atvs1 = [rdn1 getTypesAndValues];
      IOSObjectArray *atvs2 = [rdn2 getTypesAndValues];
      if (((IOSObjectArray *) nil_chk(atvs1))->size_ != ((IOSObjectArray *) nil_chk(atvs2))->size_) {
        return NO;
      }
      for (jint i = 0; i != atvs1->size_; i++) {
        if (!OrgBouncycastleAsn1X500StyleIETFUtils_atvAreEqualWithOrgBouncycastleAsn1X500AttributeTypeAndValue_withOrgBouncycastleAsn1X500AttributeTypeAndValue_(IOSObjectArray_Get(atvs1, i), IOSObjectArray_Get(atvs2, i))) {
          return NO;
        }
      }
    }
    else {
      return NO;
    }
  }
  else {
    if (![((OrgBouncycastleAsn1X500RDN *) nil_chk(rdn2)) isMultiValued]) {
      return OrgBouncycastleAsn1X500StyleIETFUtils_atvAreEqualWithOrgBouncycastleAsn1X500AttributeTypeAndValue_withOrgBouncycastleAsn1X500AttributeTypeAndValue_([rdn1 getFirst], [rdn2 getFirst]);
    }
    else {
      return NO;
    }
  }
  return YES;
}

jboolean OrgBouncycastleAsn1X500StyleIETFUtils_atvAreEqualWithOrgBouncycastleAsn1X500AttributeTypeAndValue_withOrgBouncycastleAsn1X500AttributeTypeAndValue_(OrgBouncycastleAsn1X500AttributeTypeAndValue *atv1, OrgBouncycastleAsn1X500AttributeTypeAndValue *atv2) {
  OrgBouncycastleAsn1X500StyleIETFUtils_init();
  if (atv1 == atv2) {
    return YES;
  }
  if (atv1 == nil) {
    return NO;
  }
  if (atv2 == nil) {
    return NO;
  }
  OrgBouncycastleAsn1ASN1ObjectIdentifier *o1 = [((OrgBouncycastleAsn1X500AttributeTypeAndValue *) nil_chk(atv1)) getType];
  OrgBouncycastleAsn1ASN1ObjectIdentifier *o2 = [((OrgBouncycastleAsn1X500AttributeTypeAndValue *) nil_chk(atv2)) getType];
  if (![((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(o1)) isEqual:o2]) {
    return NO;
  }
  NSString *v1 = OrgBouncycastleAsn1X500StyleIETFUtils_canonicalizeWithNSString_(OrgBouncycastleAsn1X500StyleIETFUtils_valueToStringWithOrgBouncycastleAsn1ASN1Encodable_([atv1 getValue]));
  NSString *v2 = OrgBouncycastleAsn1X500StyleIETFUtils_canonicalizeWithNSString_(OrgBouncycastleAsn1X500StyleIETFUtils_valueToStringWithOrgBouncycastleAsn1ASN1Encodable_([atv2 getValue]));
  if (![((NSString *) nil_chk(v1)) isEqual:v2]) {
    return NO;
  }
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1X500StyleIETFUtils)
